# 1 "lsystem.l"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "lsystem.l"



# 1 "/home/neil/vlab-4.4.0/include/lpfgall.h" 1





# 1 "/usr/include/memory.h" 1 3 4
# 26 "/usr/include/memory.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 313 "/usr/include/features.h" 3 4
# 1 "/usr/include/bits/predefs.h" 1 3 4
# 314 "/usr/include/features.h" 2 3 4
# 346 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 353 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 354 "/usr/include/sys/cdefs.h" 2 3 4
# 347 "/usr/include/features.h" 2 3 4
# 378 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4



# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 5 "/usr/include/gnu/stubs.h" 2 3 4




# 1 "/usr/include/gnu/stubs-64.h" 1 3 4
# 10 "/usr/include/gnu/stubs.h" 2 3 4
# 379 "/usr/include/features.h" 2 3 4
# 27 "/usr/include/memory.h" 2 3 4



# 1 "/usr/include/string.h" 1 3 4
# 28 "/usr/include/string.h" 3 4
extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 211 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/string.h" 2 3 4









extern void *memcpy (void *__restrict __dest,
       __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, __const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, __const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (__const void *__s1, __const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const void *memchr (__const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 92 "/usr/include/string.h" 3 4
}










extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const void *rawmemchr (__const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const void *memrchr (__const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern char *strcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, __const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (__const char *__s1, __const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));






# 1 "/usr/include/xlocale.h" 1 3 4
# 28 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 162 "/usr/include/string.h" 2 3 4


extern int strcoll_l (__const char *__s1, __const char *__s2, __locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, __const char *__src, size_t __n,
    __locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));




extern char *strdup (__const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (__const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 208 "/usr/include/string.h" 3 4



extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *strchr (__const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 231 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *strrchr (__const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 258 "/usr/include/string.h" 3 4
}










extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" __const char *strchrnul (__const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));









extern size_t strcspn (__const char *__s, __const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (__const char *__s, __const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, __const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern __const char *strpbrk (__const char *__s, __const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 310 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strstr (char *__haystack, __const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern __const char *strstr (__const char *__haystack,
        __const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 338 "/usr/include/string.h" 3 4
}







extern char *strtok (char *__restrict __s, __const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    __const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, __const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, __const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" __const char *strcasestr (__const char *__haystack,
           __const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 380 "/usr/include/string.h" 3 4
extern void *memmem (__const void *__haystack, size_t __haystacklen,
       __const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        __const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (__const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (__const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) throw ();

# 436 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));





extern char *strerror_l (int __errnum, __locale_t __l) throw ();





extern void __bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern void bcopy (__const void *__src, void *__dest, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int bcmp (__const void *__s1, __const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *index (__const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 485 "/usr/include/string.h" 3 4
}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern __const char *rindex (__const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 513 "/usr/include/string.h" 3 4
}







extern int ffs (int __i) throw () __attribute__ ((__const__));




extern int ffsl (long int __l) throw () __attribute__ ((__const__));

__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));




extern int strcasecmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (__const char *__s1, __const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (__const char *__s1, __const char *__s2,
    __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (__const char *__s1, __const char *__s2,
     size_t __n, __locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       __const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, __const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (__const char *__s1, __const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" __const char *basename (__const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 644 "/usr/include/string.h" 3 4
}
# 31 "/usr/include/memory.h" 2 3 4
# 7 "/home/neil/vlab-4.4.0/include/lpfgall.h" 2
# 1 "/usr/include/stdlib.h" 1 3 4
# 33 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 34 "/usr/include/stdlib.h" 2 3 4

extern "C" {






# 1 "/usr/include/bits/waitflags.h" 1 3 4
# 43 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/bits/waitstatus.h" 1 3 4
# 65 "/usr/include/bits/waitstatus.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 38 "/usr/include/endian.h" 2 3 4
# 61 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 28 "/usr/include/bits/byteswap.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/bits/byteswap.h" 2 3 4
# 62 "/usr/include/endian.h" 2 3 4
# 66 "/usr/include/bits/waitstatus.h" 2 3 4

union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 44 "/usr/include/stdlib.h" 2 3 4
# 96 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 140 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;




extern double atof (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (__const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (__const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern float strtof (__const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1))) ;

extern long double strtold (__const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern long int strtol (__const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

extern unsigned long int strtoul (__const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;




__extension__
extern long long int strtoq (__const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtouq (__const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;





__extension__
extern long long int strtoll (__const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtoull (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1))) ;

# 240 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4))) ;

extern unsigned long int strtoul_l (__const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern long long int strtoll_l (__const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern unsigned long long int strtoull_l (__const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4))) ;

extern double strtod_l (__const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;

extern float strtof_l (__const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;

extern long double strtold_l (__const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3))) ;
# 311 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (__const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/sys/types.h" 1 3 4
# 29 "/usr/include/sys/types.h" 3 4
extern "C" {

# 1 "/usr/include/bits/types.h" 1 3 4
# 28 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 29 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;







typedef long int __quad_t;
typedef unsigned long int __u_quad_t;
# 131 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 132 "/usr/include/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef long int __swblk_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;

typedef long int __ssize_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;
# 32 "/usr/include/sys/types.h" 2 3 4



typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;



typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __pid_t pid_t;




typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 133 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/time.h" 1 3 4
# 58 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 74 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 92 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 104 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 134 "/usr/include/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 148 "/usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 195 "/usr/include/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 220 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/sys/select.h" 1 3 4
# 31 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select.h" 1 3 4
# 23 "/usr/include/bits/select.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 24 "/usr/include/bits/select.h" 2 3 4
# 32 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/sigset.h" 1 3 4
# 24 "/usr/include/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 35 "/usr/include/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    long int tv_nsec;
  };
# 45 "/usr/include/sys/select.h" 2 3 4

# 1 "/usr/include/bits/time.h" 1 3 4
# 69 "/usr/include/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 47 "/usr/include/sys/select.h" 2 3 4
# 55 "/usr/include/sys/select.h" 3 4
typedef long int __fd_mask;
# 67 "/usr/include/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 99 "/usr/include/sys/select.h" 3 4
extern "C" {
# 109 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 121 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);


}
# 221 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/sysmacros.h" 1 3 4
# 30 "/usr/include/sys/sysmacros.h" 3 4
__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     throw ();
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     throw ();
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     throw ();
# 224 "/usr/include/sys/types.h" 2 3 4




typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 262 "/usr/include/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 24 "/usr/include/bits/pthreadtypes.h" 2 3 4
# 50 "/usr/include/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


typedef union
{
  char __size[56];
  long int __align;
} pthread_attr_t;



typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 76 "/usr/include/bits/pthreadtypes.h" 3 4
typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;

    unsigned int __nusers;



    int __kind;

    int __spins;
    __pthread_list_t __list;
# 101 "/usr/include/bits/pthreadtypes.h" 3 4
  } __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{

  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;
    int __writer;
    int __shared;
    unsigned long int __pad1;
    unsigned long int __pad2;


    unsigned int __flags;
  } __data;
# 187 "/usr/include/bits/pthreadtypes.h" 3 4
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 271 "/usr/include/sys/types.h" 2 3 4


}
# 321 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();




extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    unsigned long long int __a;
  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) throw ();




extern void cfree (void *__ptr) throw ();



# 1 "/usr/include/alloca.h" 1 3 4
# 25 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 26 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 498 "/usr/include/stdlib.h" 2 3 4




extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));






extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));









extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) throw () __attribute__ ((__noreturn__));







extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));







extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));






extern char *getenv (__const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;




extern char *__secure_getenv (__const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (__const char *__name, __const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (__const char *__name) throw ();






extern int clearenv (void) throw ();
# 604 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 615 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 625 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 637 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 647 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 658 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 669 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 679 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 689 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 701 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;









extern int system (__const char *__command) ;






extern char *canonicalize_file_name (__const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 729 "/usr/include/stdlib.h" 3 4
extern char *realpath (__const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (__const void *, __const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (__const void *, __const void *, void *);





extern void *bsearch (__const void *__key, __const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;



extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;

# 802 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));







extern int mblen (__const char *__s, size_t __n) throw () ;


extern int mbtowc (wchar_t *__restrict __pwc,
     __const char *__restrict __s, size_t __n) throw () ;


extern int wctomb (char *__s, wchar_t __wchar) throw () ;



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   __const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   __const wchar_t *__restrict __pwcs, size_t __n)
     throw ();








extern int rpmatch (__const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 890 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *__const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (__const char *__key) throw () __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 958 "/usr/include/stdlib.h" 3 4
}
# 8 "/home/neil/vlab-4.4.0/include/lpfgall.h" 2
# 1 "/home/neil/vlab-4.4.0/include/lparams.h" 1
# 13 "/home/neil/vlab-4.4.0/include/lparams.h"
enum
{
 __lc_eMaxIdentifierLength = 32,
  __lc_eMaxParams = 64,
        __lc_eMaxFormalModules = 32,
  __lc_eFirstModuleId = 2
};


enum __lc_GroupType
{
 __lc_gtUnspecified,
 __lc_gtLsystem,
 __lc_gtGillespie
};
# 9 "/home/neil/vlab-4.4.0/include/lpfgall.h" 2
# 1 "/home/neil/vlab-4.4.0/include/lintrfc.h" 1



# 1 "/usr/include/c++/4.4/cmath" 1 3
# 41 "/usr/include/c++/4.4/cmath" 3
       
# 42 "/usr/include/c++/4.4/cmath" 3

# 1 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++config.h" 1 3
# 243 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++config.h" 3
# 1 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/os_defines.h" 1 3
# 244 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++config.h" 2 3


# 1 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/cpu_defines.h" 1 3
# 247 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++config.h" 2 3
# 44 "/usr/include/c++/4.4/cmath" 2 3
# 1 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 1 3
# 36 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
       
# 37 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
# 69 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {

  template<typename _Iterator, typename _Container>
    class __normal_iterator;

}

namespace std __attribute__ ((__visibility__ ("default"))) {

  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };




  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 194 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_normal_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Iterator, typename _Container>
    struct __is_normal_iterator< __gnu_cxx::__normal_iterator<_Iterator,
             _Container> >
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_fundamental
    : public __traitor<__is_void<_Tp>, __is_arithmetic<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };
# 417 "/usr/include/c++/4.4/bits/cpp_type_traits.h" 3
}
# 45 "/usr/include/c++/4.4/cmath" 2 3
# 1 "/usr/include/c++/4.4/ext/type_traits.h" 1 3
# 32 "/usr/include/c++/4.4/ext/type_traits.h" 3
       
# 33 "/usr/include/c++/4.4/ext/type_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {


  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };

  template<typename _Tp>
    struct __promote<_Tp, false>
    { typedef _Tp __type; };

  template<typename _Tp, typename _Up>
    struct __promote_2
    {
    private:
      typedef typename __promote<_Tp>::__type __type1;
      typedef typename __promote<_Up>::__type __type2;

    public:
      typedef __typeof__(__type1() + __type2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp>
    struct __promote_3
    {
    private:
      typedef typename __promote<_Tp>::__type __type1;
      typedef typename __promote<_Up>::__type __type2;
      typedef typename __promote<_Vp>::__type __type3;

    public:
      typedef __typeof__(__type1() + __type2() + __type3()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp>
    struct __promote_4
    {
    private:
      typedef typename __promote<_Tp>::__type __type1;
      typedef typename __promote<_Up>::__type __type2;
      typedef typename __promote<_Vp>::__type __type3;
      typedef typename __promote<_Wp>::__type __type4;

    public:
      typedef __typeof__(__type1() + __type2() + __type3() + __type4()) __type;
    };

}
# 46 "/usr/include/c++/4.4/cmath" 2 3
# 1 "/usr/include/math.h" 1 3 4
# 30 "/usr/include/math.h" 3 4
extern "C" {



# 1 "/usr/include/bits/huge_val.h" 1 3 4
# 35 "/usr/include/math.h" 2 3 4

# 1 "/usr/include/bits/huge_valf.h" 1 3 4
# 37 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/bits/huge_vall.h" 1 3 4
# 38 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/bits/inf.h" 1 3 4
# 41 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/bits/nan.h" 1 3 4
# 44 "/usr/include/math.h" 2 3 4



# 1 "/usr/include/bits/mathdef.h" 1 3 4
# 26 "/usr/include/bits/mathdef.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 27 "/usr/include/bits/mathdef.h" 2 3 4




typedef float float_t;
typedef double double_t;
# 48 "/usr/include/math.h" 2 3 4
# 71 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4


extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();




extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ();






extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();







extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw ();




extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();

extern double pow10 (double __x) throw (); extern double __pow10 (double __x) throw ();





extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();






extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();








extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();





extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();






extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();








extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();




extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));





extern int isinf (double __value) throw () __attribute__ ((__const__));


extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();





extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));






extern double nan (__const char *__tagb) throw () __attribute__ ((__const__)); extern double __nan (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnan (double __value) throw () __attribute__ ((__const__));



extern int isnan (double __value) throw () __attribute__ ((__const__));


extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();






extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();






extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();






extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();







extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw () __attribute__ ((__const__)); extern double __nextafter (double __x, double __y) throw () __attribute__ ((__const__));

extern double nexttoward (double __x, long double __y) throw () __attribute__ ((__const__)); extern double __nexttoward (double __x, long double __y) throw () __attribute__ ((__const__));



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw (); extern double __fmax (double __x, double __y) throw ();


extern double fmin (double __x, double __y) throw (); extern double __fmin (double __x, double __y) throw ();



extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();








extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 72 "/usr/include/math.h" 2 3 4
# 94 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4


extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();




extern void sincosf (float __x, float *__sinx, float *__cosx) throw (); extern void __sincosf (float __x, float *__sinx, float *__cosx) throw ();






extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();







extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw ();




extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();

extern float pow10f (float __x) throw (); extern float __pow10f (float __x) throw ();





extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();






extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();








extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();





extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();






extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();








extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();




extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));





extern int isinff (float __value) throw () __attribute__ ((__const__));


extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();





extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));






extern float nanf (__const char *__tagb) throw () __attribute__ ((__const__)); extern float __nanf (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanf (float __value) throw () __attribute__ ((__const__));



extern int isnanf (float __value) throw () __attribute__ ((__const__));


extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();






extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();






extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();






extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();







extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __nextafterf (float __x, float __y) throw () __attribute__ ((__const__));

extern float nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__)); extern float __nexttowardf (float __x, long double __y) throw () __attribute__ ((__const__));



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw (); extern float __fmaxf (float __x, float __y) throw ();


extern float fminf (float __x, float __y) throw (); extern float __fminf (float __x, float __y) throw ();



extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();








extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 95 "/usr/include/math.h" 2 3 4
# 145 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4


extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();




extern void sincosl (long double __x, long double *__sinx, long double *__cosx) throw (); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) throw ();






extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();







extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw ();




extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();

extern long double pow10l (long double __x) throw (); extern long double __pow10l (long double __x) throw ();





extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();






extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();








extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();





extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();






extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();








extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();




extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));





extern int isinfl (long double __value) throw () __attribute__ ((__const__));


extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();





extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));






extern long double nanl (__const char *__tagb) throw () __attribute__ ((__const__)); extern long double __nanl (__const char *__tagb) throw () __attribute__ ((__const__));





extern int __isnanl (long double __value) throw () __attribute__ ((__const__));



extern int isnanl (long double __value) throw () __attribute__ ((__const__));


extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();






extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();






extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();






extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();







extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nextafterl (long double __x, long double __y) throw () __attribute__ ((__const__));

extern long double nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __nexttowardl (long double __x, long double __y) throw () __attribute__ ((__const__));



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw (); extern long double __fmaxl (long double __x, long double __y) throw ();


extern long double fminl (long double __x, long double __y) throw (); extern long double __fminl (long double __x, long double __y) throw ();



extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();








extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 146 "/usr/include/math.h" 2 3 4
# 161 "/usr/include/math.h" 3 4
extern int signgam;
# 202 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN,

    FP_INFINITE,

    FP_ZERO,

    FP_SUBNORMAL,

    FP_NORMAL

  };
# 295 "/usr/include/math.h" 3 4
typedef enum
{
  _IEEE_ = -1,
  _SVID_,
  _XOPEN_,
  _POSIX_,
  _ISOC_
} _LIB_VERSION_TYPE;




extern _LIB_VERSION_TYPE _LIB_VERSION;
# 318 "/usr/include/math.h" 3 4
struct __exception



  {
    int type;
    char *name;
    double arg1;
    double arg2;
    double retval;
  };


extern int matherr (struct __exception *__exc) throw ();
# 476 "/usr/include/math.h" 3 4
}
# 47 "/usr/include/c++/4.4/cmath" 2 3
# 77 "/usr/include/c++/4.4/cmath" 3
namespace std __attribute__ ((__visibility__ ("default"))) {



  template<typename _Tp>
    _Tp __cmath_power(_Tp, unsigned int);

  template<typename _Tp>
    inline _Tp
    __pow_helper(_Tp __x, int __n)
    {
      return __n < 0
        ? _Tp(1)/__cmath_power(__x, -__n)
        : __cmath_power(__x, __n);
    }

  inline double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }

  using ::acos;

  inline float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline long double
  acos(long double __x)
  { return __builtin_acosl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;

  inline float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline long double
  asin(long double __x)
  { return __builtin_asinl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;

  inline float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline long double
  atan(long double __x)
  { return __builtin_atanl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;

  inline float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }

  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<
    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value
        && __is_arithmetic<_Up>::__value,
        _Tp>::__type, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;

  inline float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;

  inline float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline long double
  cos(long double __x)
  { return __builtin_cosl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;

  inline float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;

  inline float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline long double
  exp(long double __x)
  { return __builtin_expl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;

  inline float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;

  inline float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline long double
  floor(long double __x)
  { return __builtin_floorl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;

  inline float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }

  using ::frexp;

  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;

  inline float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
  ldexp(_Tp __x, int __exp)
  { return __builtin_ldexp(__x, __exp); }

  using ::log;

  inline float
  log(float __x)
  { return __builtin_logf(__x); }

  inline long double
  log(long double __x)
  { return __builtin_logl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;

  inline float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline long double
  log10(long double __x)
  { return __builtin_log10l(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;

  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }

  using ::pow;

  inline float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }




  inline double
  pow(double __x, int __i)
  { return __builtin_powi(__x, __i); }

  inline float
  pow(float __x, int __n)
  { return __builtin_powif(__x, __n); }

  inline long double
  pow(long double __x, int __n)
  { return __builtin_powil(__x, __n); }


  template<typename _Tp, typename _Up>
    inline
    typename __gnu_cxx::__promote_2<
    typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value
        && __is_arithmetic<_Up>::__value,
        _Tp>::__type, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;

  inline float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline long double
  sin(long double __x)
  { return __builtin_sinl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;

  inline float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;

  inline float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;

  inline float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline long double
  tan(long double __x)
  { return __builtin_tanl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;

  inline float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
        double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }

}
# 492 "/usr/include/c++/4.4/cmath" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    fpclassify(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_fpclassify(FP_NAN, FP_INFINITE, FP_NORMAL,
      FP_SUBNORMAL, FP_ZERO, __type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isfinite(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isfinite(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isinf(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isinf(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isnan(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isnan(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isnormal(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isnormal(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    signbit(_Tp __f)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_signbit(__type(__f));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isgreater(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isgreater(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isgreaterequal(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isgreaterequal(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isless(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isless(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    islessequal(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_islessequal(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    islessgreater(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_islessgreater(__type(__f1), __type(__f2));
    }

  template<typename _Tp>
    inline typename __gnu_cxx::__enable_if<__is_arithmetic<_Tp>::__value,
        int>::__type
    isunordered(_Tp __f1, _Tp __f2)
    {
      typedef typename __gnu_cxx::__promote<_Tp>::__type __type;
      return __builtin_isunordered(__type(__f1), __type(__f2));
    }

}





# 1 "/usr/include/c++/4.4/bits/cmath.tcc" 1 3
# 35 "/usr/include/c++/4.4/bits/cmath.tcc" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _Tp>
    inline _Tp
    __cmath_power(_Tp __x, unsigned int __n)
    {
      _Tp __y = __n % 2 ? __x : _Tp(1);

      while (__n >>= 1)
        {
          __x = __x * __x;
          if (__n % 2)
            __y = __y * __x;
        }

      return __y;
    }

}
# 610 "/usr/include/c++/4.4/cmath" 2 3
# 5 "/home/neil/vlab-4.4.0/include/lintrfc.h" 2
# 1 "/usr/include/c++/4.4/string" 1 3
# 38 "/usr/include/c++/4.4/string" 3
       
# 39 "/usr/include/c++/4.4/string" 3


# 1 "/usr/include/c++/4.4/bits/stringfwd.h" 1 3
# 38 "/usr/include/c++/4.4/bits/stringfwd.h" 3
       
# 39 "/usr/include/c++/4.4/bits/stringfwd.h" 3



namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _Alloc>
    class allocator;

  template<class _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
           typename _Alloc = allocator<_CharT> >
    class basic_string;

  template<> struct char_traits<char>;

  typedef basic_string<char> string;


  template<> struct char_traits<wchar_t>;

  typedef basic_string<wchar_t> wstring;
# 75 "/usr/include/c++/4.4/bits/stringfwd.h" 3
}
# 42 "/usr/include/c++/4.4/string" 2 3
# 1 "/usr/include/c++/4.4/bits/char_traits.h" 1 3
# 39 "/usr/include/c++/4.4/bits/char_traits.h" 3
       
# 40 "/usr/include/c++/4.4/bits/char_traits.h" 3

# 1 "/usr/include/c++/4.4/bits/stl_algobase.h" 1 3
# 61 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
# 1 "/usr/include/c++/4.4/cstddef" 1 3
# 41 "/usr/include/c++/4.4/cstddef" 3
       
# 42 "/usr/include/c++/4.4/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 149 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 45 "/usr/include/c++/4.4/cstddef" 2 3




namespace std __attribute__ ((__visibility__ ("default"))) {

  using ::ptrdiff_t;
  using ::size_t;

}
# 62 "/usr/include/c++/4.4/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.4/bits/functexcept.h" 1 3
# 37 "/usr/include/c++/4.4/bits/functexcept.h" 3
# 1 "/usr/include/c++/4.4/exception_defines.h" 1 3
# 38 "/usr/include/c++/4.4/bits/functexcept.h" 2 3

namespace std __attribute__ ((__visibility__ ("default"))) {


  void
  __throw_bad_exception(void) __attribute__((__noreturn__));


  void
  __throw_bad_alloc(void) __attribute__((__noreturn__));


  void
  __throw_bad_cast(void) __attribute__((__noreturn__));

  void
  __throw_bad_typeid(void) __attribute__((__noreturn__));


  void
  __throw_logic_error(const char*) __attribute__((__noreturn__));

  void
  __throw_domain_error(const char*) __attribute__((__noreturn__));

  void
  __throw_invalid_argument(const char*) __attribute__((__noreturn__));

  void
  __throw_length_error(const char*) __attribute__((__noreturn__));

  void
  __throw_out_of_range(const char*) __attribute__((__noreturn__));

  void
  __throw_runtime_error(const char*) __attribute__((__noreturn__));

  void
  __throw_range_error(const char*) __attribute__((__noreturn__));

  void
  __throw_overflow_error(const char*) __attribute__((__noreturn__));

  void
  __throw_underflow_error(const char*) __attribute__((__noreturn__));


  void
  __throw_ios_failure(const char*) __attribute__((__noreturn__));

  void
  __throw_system_error(int) __attribute__((__noreturn__));

}
# 63 "/usr/include/c++/4.4/bits/stl_algobase.h" 2 3


# 1 "/usr/include/c++/4.4/ext/numeric_traits.h" 1 3
# 32 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
       
# 33 "/usr/include/c++/4.4/ext/numeric_traits.h" 3




namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {
# 52 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_integer
    {

      static const _Value __min = (((_Value)(-1) < 0) ? (_Value)1 << (sizeof(_Value) * 8 - ((_Value)(-1) < 0)) : (_Value)0);
      static const _Value __max = (((_Value)(-1) < 0) ? (((((_Value)1 << ((sizeof(_Value) * 8 - ((_Value)(-1) < 0)) - 1)) - 1) << 1) + 1) : ~(_Value)0);



      static const bool __is_signed = ((_Value)(-1) < 0);
      static const int __digits = (sizeof(_Value) * 8 - ((_Value)(-1) < 0));
    };

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__min;

  template<typename _Value>
    const _Value __numeric_traits_integer<_Value>::__max;

  template<typename _Value>
    const bool __numeric_traits_integer<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_integer<_Value>::__digits;
# 97 "/usr/include/c++/4.4/ext/numeric_traits.h" 3
  template<typename _Value>
    struct __numeric_traits_floating
    {

      static const int __max_digits10 = (2 + (std::__are_same<_Value, float>::__value ? 24 : std::__are_same<_Value, double>::__value ? 53 : 64) * 3010 / 10000);


      static const bool __is_signed = true;
      static const int __digits10 = (std::__are_same<_Value, float>::__value ? 6 : std::__are_same<_Value, double>::__value ? 15 : 18);
      static const int __max_exponent10 = (std::__are_same<_Value, float>::__value ? 38 : std::__are_same<_Value, double>::__value ? 308 : 4932);
    };

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_digits10;

  template<typename _Value>
    const bool __numeric_traits_floating<_Value>::__is_signed;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__digits10;

  template<typename _Value>
    const int __numeric_traits_floating<_Value>::__max_exponent10;

  template<typename _Value>
    struct __numeric_traits
    : public __conditional_type<std::__is_integer<_Value>::__value,
    __numeric_traits_integer<_Value>,
    __numeric_traits_floating<_Value> >::__type
    { };

}
# 66 "/usr/include/c++/4.4/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.4/bits/stl_pair.h" 1 3
# 60 "/usr/include/c++/4.4/bits/stl_pair.h" 3
# 1 "/usr/include/c++/4.4/bits/move.h" 1 3
# 34 "/usr/include/c++/4.4/bits/move.h" 3
# 1 "/usr/include/c++/4.4/cstddef" 1 3
# 41 "/usr/include/c++/4.4/cstddef" 3
       
# 42 "/usr/include/c++/4.4/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 45 "/usr/include/c++/4.4/cstddef" 2 3
# 35 "/usr/include/c++/4.4/bits/move.h" 2 3
# 1 "/usr/include/c++/4.4/bits/concept_check.h" 1 3
# 33 "/usr/include/c++/4.4/bits/concept_check.h" 3
       
# 34 "/usr/include/c++/4.4/bits/concept_check.h" 3
# 36 "/usr/include/c++/4.4/bits/move.h" 2 3
# 66 "/usr/include/c++/4.4/bits/move.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {







  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
    {

     

      _Tp __tmp = (__a);
      __a = (__b);
      __b = (__tmp);
    }



  template<typename _Tp, size_t _Nm>
    inline void
    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
    {
      for (size_t __n = 0; __n < _Nm; ++__n)
 swap(__a[__n], __b[__n]);
    }

}
# 61 "/usr/include/c++/4.4/bits/stl_pair.h" 2 3


namespace std __attribute__ ((__visibility__ ("default"))) {


  template<class _T1, class _T2>
    struct pair
    {
      typedef _T1 first_type;
      typedef _T2 second_type;

      _T1 first;
      _T2 second;





      pair()
      : first(), second() { }


      pair(const _T1& __a, const _T2& __b)
      : first(__a), second(__b) { }
# 98 "/usr/include/c++/4.4/bits/stl_pair.h" 3
      template<class _U1, class _U2>
        pair(const pair<_U1, _U2>& __p)
 : first(__p.first),
   second(__p.second) { }
# 141 "/usr/include/c++/4.4/bits/stl_pair.h" 3
    };


  template<class _T1, class _T2>
    inline bool
    operator==(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first == __y.first && __x.second == __y.second; }


  template<class _T1, class _T2>
    inline bool
    operator<(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __x.first < __y.first
      || (!(__y.first < __x.first) && __x.second < __y.second); }


  template<class _T1, class _T2>
    inline bool
    operator!=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x == __y); }


  template<class _T1, class _T2>
    inline bool
    operator>(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return __y < __x; }


  template<class _T1, class _T2>
    inline bool
    operator<=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__y < __x); }


  template<class _T1, class _T2>
    inline bool
    operator>=(const pair<_T1, _T2>& __x, const pair<_T1, _T2>& __y)
    { return !(__x < __y); }
# 213 "/usr/include/c++/4.4/bits/stl_pair.h" 3
  template<class _T1, class _T2>
    inline pair<_T1, _T2>
    make_pair(_T1 __x, _T2 __y)
    { return pair<_T1, _T2>(__x, __y); }
# 259 "/usr/include/c++/4.4/bits/stl_pair.h" 3
}
# 67 "/usr/include/c++/4.4/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 1 3
# 63 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
       
# 64 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3


# 1 "/usr/include/c++/4.4/cstddef" 1 3
# 41 "/usr/include/c++/4.4/cstddef" 3
       
# 42 "/usr/include/c++/4.4/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 45 "/usr/include/c++/4.4/cstddef" 2 3
# 67 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 2 3

namespace std __attribute__ ((__visibility__ ("default"))) {
# 79 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
  struct input_iterator_tag { };

  struct output_iterator_tag { };

  struct forward_iterator_tag : public input_iterator_tag { };


  struct bidirectional_iterator_tag : public forward_iterator_tag { };


  struct random_access_iterator_tag : public bidirectional_iterator_tag { };
# 102 "/usr/include/c++/4.4/bits/stl_iterator_base_types.h" 3
  template<typename _Category, typename _Tp, typename _Distance = ptrdiff_t,
           typename _Pointer = _Tp*, typename _Reference = _Tp&>
    struct iterator
    {

      typedef _Category iterator_category;

      typedef _Tp value_type;

      typedef _Distance difference_type;

      typedef _Pointer pointer;

      typedef _Reference reference;
    };







  template<typename _Iterator>
    struct iterator_traits
    {
      typedef typename _Iterator::iterator_category iterator_category;
      typedef typename _Iterator::value_type value_type;
      typedef typename _Iterator::difference_type difference_type;
      typedef typename _Iterator::pointer pointer;
      typedef typename _Iterator::reference reference;
    };

  template<typename _Tp>
    struct iterator_traits<_Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef _Tp& reference;
    };

  template<typename _Tp>
    struct iterator_traits<const _Tp*>
    {
      typedef random_access_iterator_tag iterator_category;
      typedef _Tp value_type;
      typedef ptrdiff_t difference_type;
      typedef const _Tp* pointer;
      typedef const _Tp& reference;
    };





  template<typename _Iter>
    inline typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
    { return typename iterator_traits<_Iter>::iterator_category(); }



}
# 68 "/usr/include/c++/4.4/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 1 3
# 63 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
       
# 64 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3


namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    __distance(_InputIterator __first, _InputIterator __last,
               input_iterator_tag)
    {

     

      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      while (__first != __last)
 {
   ++__first;
   ++__n;
 }
      return __n;
    }

  template<typename _RandomAccessIterator>
    inline typename iterator_traits<_RandomAccessIterator>::difference_type
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
               random_access_iterator_tag)
    {

     

      return __last - __first;
    }
# 108 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
    {

      return std::__distance(__first, __last,
        std::__iterator_category(__first));
    }

  template<typename _InputIterator, typename _Distance>
    inline void
    __advance(_InputIterator& __i, _Distance __n, input_iterator_tag)
    {

     
      while (__n--)
 ++__i;
    }

  template<typename _BidirectionalIterator, typename _Distance>
    inline void
    __advance(_BidirectionalIterator& __i, _Distance __n,
       bidirectional_iterator_tag)
    {

     

      if (__n > 0)
        while (__n--)
   ++__i;
      else
        while (__n++)
   --__i;
    }

  template<typename _RandomAccessIterator, typename _Distance>
    inline void
    __advance(_RandomAccessIterator& __i, _Distance __n,
              random_access_iterator_tag)
    {

     

      __i += __n;
    }
# 166 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
  template<typename _InputIterator, typename _Distance>
    inline void
    advance(_InputIterator& __i, _Distance __n)
    {

      typename iterator_traits<_InputIterator>::difference_type __d = __n;
      std::__advance(__i, __d, std::__iterator_category(__i));
    }
# 195 "/usr/include/c++/4.4/bits/stl_iterator_base_funcs.h" 3
}
# 69 "/usr/include/c++/4.4/bits/stl_algobase.h" 2 3
# 1 "/usr/include/c++/4.4/bits/stl_iterator.h" 1 3
# 68 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {
# 89 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
  template<typename _Iterator>
    class reverse_iterator
    : public iterator<typename iterator_traits<_Iterator>::iterator_category,
        typename iterator_traits<_Iterator>::value_type,
        typename iterator_traits<_Iterator>::difference_type,
        typename iterator_traits<_Iterator>::pointer,
                      typename iterator_traits<_Iterator>::reference>
    {
    protected:
      _Iterator current;

    public:
      typedef _Iterator iterator_type;
      typedef typename iterator_traits<_Iterator>::difference_type
              difference_type;
      typedef typename iterator_traits<_Iterator>::reference reference;
      typedef typename iterator_traits<_Iterator>::pointer pointer;

    public:






      reverse_iterator() : current() { }




      explicit
      reverse_iterator(iterator_type __x) : current(__x) { }




      reverse_iterator(const reverse_iterator& __x)
      : current(__x.current) { }





      template<typename _Iter>
        reverse_iterator(const reverse_iterator<_Iter>& __x)
 : current(__x.base()) { }




      iterator_type
      base() const
      { return current; }






      reference
      operator*() const
      {
 _Iterator __tmp = current;
 return *--__tmp;
      }






      pointer
      operator->() const
      { return &(operator*()); }






      reverse_iterator&
      operator++()
      {
 --current;
 return *this;
      }






      reverse_iterator
      operator++(int)
      {
 reverse_iterator __tmp = *this;
 --current;
 return __tmp;
      }






      reverse_iterator&
      operator--()
      {
 ++current;
 return *this;
      }






      reverse_iterator
      operator--(int)
      {
 reverse_iterator __tmp = *this;
 ++current;
 return __tmp;
      }






      reverse_iterator
      operator+(difference_type __n) const
      { return reverse_iterator(current - __n); }






      reverse_iterator&
      operator+=(difference_type __n)
      {
 current -= __n;
 return *this;
      }






      reverse_iterator
      operator-(difference_type __n) const
      { return reverse_iterator(current + __n); }






      reverse_iterator&
      operator-=(difference_type __n)
      {
 current += __n;
 return *this;
      }






      reference
      operator[](difference_type __n) const
      { return *(*this + __n); }
    };
# 276 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
  template<typename _Iterator>
    inline bool
    operator==(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return __x.base() == __y.base(); }

  template<typename _Iterator>
    inline bool
    operator<(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() < __x.base(); }

  template<typename _Iterator>
    inline bool
    operator!=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x == __y); }

  template<typename _Iterator>
    inline bool
    operator>(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y < __x; }

  template<typename _Iterator>
    inline bool
    operator<=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__y < __x); }

  template<typename _Iterator>
    inline bool
    operator>=(const reverse_iterator<_Iterator>& __x,
        const reverse_iterator<_Iterator>& __y)
    { return !(__x < __y); }

  template<typename _Iterator>
    inline typename reverse_iterator<_Iterator>::difference_type
    operator-(const reverse_iterator<_Iterator>& __x,
       const reverse_iterator<_Iterator>& __y)
    { return __y.base() - __x.base(); }

  template<typename _Iterator>
    inline reverse_iterator<_Iterator>
    operator+(typename reverse_iterator<_Iterator>::difference_type __n,
       const reverse_iterator<_Iterator>& __x)
    { return reverse_iterator<_Iterator>(__x.base() - __n); }



  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator==(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return __x.base() == __y.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y.base() < __x.base(); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator!=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x == __y); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)
    { return __y < __x; }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator<=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__y < __x); }

  template<typename _IteratorL, typename _IteratorR>
    inline bool
    operator>=(const reverse_iterator<_IteratorL>& __x,
        const reverse_iterator<_IteratorR>& __y)
    { return !(__x < __y); }

  template<typename _IteratorL, typename _IteratorR>







    inline typename reverse_iterator<_IteratorL>::difference_type
    operator-(const reverse_iterator<_IteratorL>& __x,
       const reverse_iterator<_IteratorR>& __y)

    { return __y.base() - __x.base(); }
# 388 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
  template<typename _Container>
    class back_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit
      back_insert_iterator(_Container& __x) : container(&__x) { }
# 414 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 container->push_back(__value);
 return *this;
      }
# 431 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
      back_insert_iterator&
      operator*()
      { return *this; }


      back_insert_iterator&
      operator++()
      { return *this; }


      back_insert_iterator
      operator++(int)
      { return *this; }
    };
# 457 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
  template<typename _Container>
    inline back_insert_iterator<_Container>
    back_inserter(_Container& __x)
    { return back_insert_iterator<_Container>(__x); }
# 472 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
  template<typename _Container>
    class front_insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;

    public:

      typedef _Container container_type;


      explicit front_insert_iterator(_Container& __x) : container(&__x) { }
# 497 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 container->push_front(__value);
 return *this;
      }
# 514 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
      front_insert_iterator&
      operator*()
      { return *this; }


      front_insert_iterator&
      operator++()
      { return *this; }


      front_insert_iterator
      operator++(int)
      { return *this; }
    };
# 540 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
  template<typename _Container>
    inline front_insert_iterator<_Container>
    front_inserter(_Container& __x)
    { return front_insert_iterator<_Container>(__x); }
# 559 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
  template<typename _Container>
    class insert_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    protected:
      _Container* container;
      typename _Container::iterator iter;

    public:

      typedef _Container container_type;





      insert_iterator(_Container& __x, typename _Container::iterator __i)
      : container(&__x), iter(__i) {}
# 601 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
      insert_iterator&
      operator=(typename _Container::const_reference __value)
      {
 iter = container->insert(iter, __value);
 ++iter;
 return *this;
      }
# 620 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
      insert_iterator&
      operator*()
      { return *this; }


      insert_iterator&
      operator++()
      { return *this; }


      insert_iterator&
      operator++(int)
      { return *this; }
    };
# 646 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
  template<typename _Container, typename _Iterator>
    inline insert_iterator<_Container>
    inserter(_Container& __x, _Iterator __i)
    {
      return insert_iterator<_Container>(__x,
      typename _Container::iterator(__i));
    }

}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {
# 665 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
  using std::iterator_traits;
  using std::iterator;
  template<typename _Iterator, typename _Container>
    class __normal_iterator
    {
    protected:
      _Iterator _M_current;

    public:
      typedef _Iterator iterator_type;
      typedef typename iterator_traits<_Iterator>::iterator_category
                                                             iterator_category;
      typedef typename iterator_traits<_Iterator>::value_type value_type;
      typedef typename iterator_traits<_Iterator>::difference_type
                                                             difference_type;
      typedef typename iterator_traits<_Iterator>::reference reference;
      typedef typename iterator_traits<_Iterator>::pointer pointer;

      __normal_iterator() : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) : _M_current(__i) { }


      template<typename _Iter>
        __normal_iterator(const __normal_iterator<_Iter,
     typename __enable_if<
              (std::__are_same<_Iter, typename _Container::pointer>::__value),
        _Container>::__type>& __i)
        : _M_current(__i.base()) { }


      reference
      operator*() const
      { return *_M_current; }

      pointer
      operator->() const
      { return _M_current; }

      __normal_iterator&
      operator++()
      {
 ++_M_current;
 return *this;
      }

      __normal_iterator
      operator++(int)
      { return __normal_iterator(_M_current++); }


      __normal_iterator&
      operator--()
      {
 --_M_current;
 return *this;
      }

      __normal_iterator
      operator--(int)
      { return __normal_iterator(_M_current--); }


      reference
      operator[](const difference_type& __n) const
      { return _M_current[__n]; }

      __normal_iterator&
      operator+=(const difference_type& __n)
      { _M_current += __n; return *this; }

      __normal_iterator
      operator+(const difference_type& __n) const
      { return __normal_iterator(_M_current + __n); }

      __normal_iterator&
      operator-=(const difference_type& __n)
      { _M_current -= __n; return *this; }

      __normal_iterator
      operator-(const difference_type& __n) const
      { return __normal_iterator(_M_current - __n); }

      const _Iterator&
      base() const
      { return _M_current; }
    };
# 763 "/usr/include/c++/4.4/bits/stl_iterator.h" 3
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() == __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() != __rhs.base(); }


  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() < __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() > __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator<=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() <= __rhs.base(); }

  template<typename _IteratorL, typename _IteratorR, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_IteratorL, _Container>& __lhs,
        const __normal_iterator<_IteratorR, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline bool
    operator>=(const __normal_iterator<_Iterator, _Container>& __lhs,
        const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() >= __rhs.base(); }





  template<typename _IteratorL, typename _IteratorR, typename _Container>







    inline typename __normal_iterator<_IteratorL, _Container>::difference_type
    operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,
       const __normal_iterator<_IteratorR, _Container>& __rhs)

    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
       const __normal_iterator<_Iterator, _Container>& __rhs)
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline __normal_iterator<_Iterator, _Container>
    operator+(typename __normal_iterator<_Iterator, _Container>::difference_type
       __n, const __normal_iterator<_Iterator, _Container>& __i)
    { return __normal_iterator<_Iterator, _Container>(__i.base() + __n); }

}
# 70 "/usr/include/c++/4.4/bits/stl_algobase.h" 2 3

# 1 "/usr/include/c++/4.4/debug/debug.h" 1 3
# 47 "/usr/include/c++/4.4/debug/debug.h" 3
namespace std
{
  namespace __debug { }
}




namespace __gnu_debug
{
  using namespace std::__debug;
}
# 72 "/usr/include/c++/4.4/bits/stl_algobase.h" 2 3


namespace std __attribute__ ((__visibility__ ("default"))) {




  template<bool _BoolType>
    struct __iter_swap
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          typedef typename iterator_traits<_ForwardIterator1>::value_type
            _ValueType1;
          _ValueType1 __tmp = (*__a);
          *__a = (*__b);
          *__b = (__tmp);
 }
    };

  template<>
    struct __iter_swap<true>
    {
      template<typename _ForwardIterator1, typename _ForwardIterator2>
        static void
        iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
        {
          swap(*__a, *__b);
        }
    };
# 115 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline void
    iter_swap(_ForwardIterator1 __a, _ForwardIterator2 __b)
    {
      typedef typename iterator_traits<_ForwardIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator2>::value_type
 _ValueType2;


     

     

     

     


      typedef typename iterator_traits<_ForwardIterator1>::reference
 _ReferenceType1;
      typedef typename iterator_traits<_ForwardIterator2>::reference
 _ReferenceType2;
      std::__iter_swap<__are_same<_ValueType1, _ValueType2>::__value
 && __are_same<_ValueType1&, _ReferenceType1>::__value
 && __are_same<_ValueType2&, _ReferenceType2>::__value>::
 iter_swap(__a, __b);
    }
# 156 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator2
    swap_ranges(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
  _ForwardIterator2 __first2)
    {

     

     

      ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 std::iter_swap(__first1, __first2);
      return __first2;
    }
# 184 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
    {

     

      if (__b < __a)
 return __b;
      return __a;
    }
# 207 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _Tp>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
    {

     

      if (__a < __b)
 return __b;
      return __a;
    }
# 230 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__b, __a))
 return __b;
      return __a;
    }
# 251 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b, _Compare __comp)
    {

      if (__comp(__a, __b))
 return __b;
      return __a;
    }




  template<typename _Iterator,
    bool _IsNormal = __is_normal_iterator<_Iterator>::__value>
    struct __niter_base
    {
      static _Iterator
      __b(_Iterator __it)
      { return __it; }
    };

  template<typename _Iterator>
    struct __niter_base<_Iterator, true>
    {
      static typename _Iterator::iterator_type
      __b(_Iterator __it)
      { return __it.base(); }
    };


  template<typename _Iterator,
    bool _IsMove = __is_move_iterator<_Iterator>::__value>
    struct __miter_base
    {
      static _Iterator
      __b(_Iterator __it)
      { return __it; }
    };

  template<typename _Iterator>
    struct __miter_base<_Iterator, true>
    {
      static typename _Iterator::iterator_type
      __b(_Iterator __it)
      { return __it.base(); }
    };







  template<bool, bool, typename>
    struct __copy_move
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   for (; __first != __last; ++__result, ++__first)
     *__result = *__first;
   return __result;
 }
    };
# 333 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<>
    struct __copy_move<false, false, random_access_iterator_tag>
    {
      template<typename _II, typename _OI>
        static _OI
        __copy_m(_II __first, _II __last, _OI __result)
        {
   typedef typename iterator_traits<_II>::difference_type _Distance;
   for(_Distance __n = __last - __first; __n > 0; --__n)
     {
       *__result = *__first;
       ++__first;
       ++__result;
     }
   return __result;
 }
    };
# 371 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<bool _IsMove>
    struct __copy_move<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   __builtin_memmove(__result, __first,
       sizeof(_Tp) * (__last - __first));
   return __result + (__last - __first);
 }
    };

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a(_II __first, _II __last, _OI __result)
    {
      typedef typename iterator_traits<_II>::value_type _ValueTypeI;
      typedef typename iterator_traits<_OI>::value_type _ValueTypeO;
      typedef typename iterator_traits<_II>::iterator_category _Category;
      const bool __simple = (__is_pod(_ValueTypeI)
                      && __is_pointer<_II>::__value
                      && __is_pointer<_OI>::__value
        && __are_same<_ValueTypeI, _ValueTypeO>::__value);

      return std::__copy_move<_IsMove, __simple,
                       _Category>::__copy_m(__first, __last, __result);
    }



  template<typename _CharT>
    struct char_traits;

  template<typename _CharT, typename _Traits>
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator;

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(_CharT*, _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
      ostreambuf_iterator<_CharT, char_traits<_CharT> > >::__type
    __copy_move_a2(const _CharT*, const _CharT*,
     ostreambuf_iterator<_CharT, char_traits<_CharT> >);

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT, char_traits<_CharT> >,
     istreambuf_iterator<_CharT, char_traits<_CharT> >, _CharT*);

  template<bool _IsMove, typename _II, typename _OI>
    inline _OI
    __copy_move_a2(_II __first, _II __last, _OI __result)
    {
      return _OI(std::__copy_move_a<_IsMove>
   (std::__niter_base<_II>::__b(__first),
    std::__niter_base<_II>::__b(__last),
    std::__niter_base<_OI>::__b(__result)));
    }
# 456 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
    {

     
     

      ;

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
       (std::__miter_base<_II>::__b(__first),
        std::__miter_base<_II>::__b(__last), __result));
    }
# 509 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<bool, bool, typename>
    struct __copy_move_backward
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   while (__first != __last)
     *--__result = *--__last;
   return __result;
 }
    };
# 537 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<>
    struct __copy_move_backward<false, false, random_access_iterator_tag>
    {
      template<typename _BI1, typename _BI2>
        static _BI2
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
        {
   typename iterator_traits<_BI1>::difference_type __n;
   for (__n = __last - __first; __n > 0; --__n)
     *--__result = *--__last;
   return __result;
 }
    };
# 567 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<bool _IsMove>
    struct __copy_move_backward<_IsMove, true, random_access_iterator_tag>
    {
      template<typename _Tp>
        static _Tp*
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
        {
   const ptrdiff_t _Num = __last - __first;
   __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
   return __result - _Num;
 }
    };

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      typedef typename iterator_traits<_BI1>::value_type _ValueType1;
      typedef typename iterator_traits<_BI2>::value_type _ValueType2;
      typedef typename iterator_traits<_BI1>::iterator_category _Category;
      const bool __simple = (__is_pod(_ValueType1)
                      && __is_pointer<_BI1>::__value
                      && __is_pointer<_BI2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__copy_move_backward<_IsMove, __simple,
                                _Category>::__copy_move_b(__first,
         __last,
         __result);
    }

  template<bool _IsMove, typename _BI1, typename _BI2>
    inline _BI2
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
    {
      return _BI2(std::__copy_move_backward_a<_IsMove>
    (std::__niter_base<_BI1>::__b(__first),
     std::__niter_base<_BI1>::__b(__last),
     std::__niter_base<_BI2>::__b(__result)));
    }
# 626 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
    {

     
     
     


      ;

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
       (std::__miter_base<_BI1>::__b(__first),
        std::__miter_base<_BI1>::__b(__last), __result));
    }
# 684 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
       const _Tp& __value)
    {
      for (; __first != __last; ++__first)
 *__first = __value;
    }

  template<typename _ForwardIterator, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, void>::__type
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __first != __last; ++__first)
 *__first = __tmp;
    }


  template<typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, void>::__type
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
    {
      const _Tp __tmp = __c;
      __builtin_memset(__first, static_cast<unsigned char>(__tmp),
         __last - __first);
    }
# 728 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
    {

     

      ;

      std::__fill_a(std::__niter_base<_ForwardIterator>::__b(__first),
      std::__niter_base<_ForwardIterator>::__b(__last), __value);
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<!__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      for (; __n > 0; --__n, ++__first)
 *__first = __value;
      return __first;
    }

  template<typename _OutputIterator, typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_scalar<_Tp>::__value, _OutputIterator>::__type
    __fill_n_a(_OutputIterator __first, _Size __n, const _Tp& __value)
    {
      const _Tp __tmp = __value;
      for (; __n > 0; --__n, ++__first)
 *__first = __tmp;
      return __first;
    }

  template<typename _Size, typename _Tp>
    inline typename
    __gnu_cxx::__enable_if<__is_byte<_Tp>::__value, _Tp*>::__type
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
    {
      std::__fill_a(__first, __first + __n, __c);
      return __first + __n;
    }
# 783 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
    {

     

      return _OI(std::__fill_n_a(std::__niter_base<_OI>::__b(__first),
     __n, __value));
    }

  template<bool _BoolType>
    struct __equal
    {
      template<typename _II1, typename _II2>
        static bool
        equal(_II1 __first1, _II1 __last1, _II2 __first2)
        {
   for (; __first1 != __last1; ++__first1, ++__first2)
     if (!(*__first1 == *__first2))
       return false;
   return true;
 }
    };

  template<>
    struct __equal<true>
    {
      template<typename _Tp>
        static bool
        equal(const _Tp* __first1, const _Tp* __last1, const _Tp* __first2)
        {
   return !__builtin_memcmp(__first1, __first2, sizeof(_Tp)
       * (__last1 - __first1));
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __equal_aux(_II1 __first1, _II1 __last1, _II2 __first2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple = (__is_integer<_ValueType1>::__value
                      && __is_pointer<_II1>::__value
                      && __is_pointer<_II2>::__value
        && __are_same<_ValueType1, _ValueType2>::__value);

      return std::__equal<__simple>::equal(__first1, __last1, __first2);
    }


  template<typename, typename>
    struct __lc_rai
    {
      template<typename _II1, typename _II2>
        static _II1
        __newlast1(_II1, _II1 __last1, _II2, _II2)
        { return __last1; }

      template<typename _II>
        static bool
        __cnd2(_II __first, _II __last)
        { return __first != __last; }
    };

  template<>
    struct __lc_rai<random_access_iterator_tag, random_access_iterator_tag>
    {
      template<typename _RAI1, typename _RAI2>
        static _RAI1
        __newlast1(_RAI1 __first1, _RAI1 __last1,
     _RAI2 __first2, _RAI2 __last2)
        {
   const typename iterator_traits<_RAI1>::difference_type
     __diff1 = __last1 - __first1;
   const typename iterator_traits<_RAI2>::difference_type
     __diff2 = __last2 - __first2;
   return __diff2 < __diff1 ? __first1 + __diff2 : __last1;
 }

      template<typename _RAI>
        static bool
        __cnd2(_RAI, _RAI)
        { return true; }
    };

  template<bool _BoolType>
    struct __lexicographical_compare
    {
      template<typename _II1, typename _II2>
        static bool __lc(_II1, _II1, _II2, _II2);
    };

  template<bool _BoolType>
    template<typename _II1, typename _II2>
      bool
      __lexicographical_compare<_BoolType>::
      __lc(_II1 __first1, _II1 __last1, _II2 __first2, _II2 __last2)
      {
 typedef typename iterator_traits<_II1>::iterator_category _Category1;
 typedef typename iterator_traits<_II2>::iterator_category _Category2;
 typedef std::__lc_rai<_Category1, _Category2> __rai_type;

 __last1 = __rai_type::__newlast1(__first1, __last1,
      __first2, __last2);
 for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
      ++__first1, ++__first2)
   {
     if (*__first1 < *__first2)
       return true;
     if (*__first2 < *__first1)
       return false;
   }
 return __first1 == __last1 && __first2 != __last2;
      }

  template<>
    struct __lexicographical_compare<true>
    {
      template<typename _Tp, typename _Up>
        static bool
        __lc(const _Tp* __first1, const _Tp* __last1,
      const _Up* __first2, const _Up* __last2)
 {
   const size_t __len1 = __last1 - __first1;
   const size_t __len2 = __last2 - __first2;
   const int __result = __builtin_memcmp(__first1, __first2,
      std::min(__len1, __len2));
   return __result != 0 ? __result < 0 : __len1 < __len2;
 }
    };

  template<typename _II1, typename _II2>
    inline bool
    __lexicographical_compare_aux(_II1 __first1, _II1 __last1,
      _II2 __first2, _II2 __last2)
    {
      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
      const bool __simple =
 (__is_byte<_ValueType1>::__value && __is_byte<_ValueType2>::__value
  && !__gnu_cxx::__numeric_traits<_ValueType1>::__is_signed
  && !__gnu_cxx::__numeric_traits<_ValueType2>::__is_signed
  && __is_pointer<_II1>::__value
  && __is_pointer<_II2>::__value);

      return std::__lexicographical_compare<__simple>::__lc(__first1, __last1,
           __first2, __last2);
    }

}

namespace std __attribute__ ((__visibility__ ("default"))) {
# 950 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    equal(_II1 __first1, _II1 __last1, _II2 __first2)
    {

     
     
     


      ;

      return std::__equal_aux(std::__niter_base<_II1>::__b(__first1),
         std::__niter_base<_II1>::__b(__last1),
         std::__niter_base<_II2>::__b(__first2));
    }
# 982 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    inline bool
    equal(_IIter1 __first1, _IIter1 __last1,
   _IIter2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      for (; __first1 != __last1; ++__first1, ++__first2)
 if (!bool(__binary_pred(*__first1, *__first2)))
   return false;
      return true;
    }
# 1013 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2>
    inline bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2)
    {

      typedef typename iterator_traits<_II1>::value_type _ValueType1;
      typedef typename iterator_traits<_II2>::value_type _ValueType2;
     
     
     
     
      ;
      ;

      return std::__lexicographical_compare_aux
 (std::__niter_base<_II1>::__b(__first1),
  std::__niter_base<_II1>::__b(__last1),
  std::__niter_base<_II2>::__b(__first2),
  std::__niter_base<_II2>::__b(__last2));
    }
# 1048 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _II1, typename _II2, typename _Compare>
    bool
    lexicographical_compare(_II1 __first1, _II1 __last1,
       _II2 __first2, _II2 __last2, _Compare __comp)
    {
      typedef typename iterator_traits<_II1>::iterator_category _Category1;
      typedef typename iterator_traits<_II2>::iterator_category _Category2;
      typedef std::__lc_rai<_Category1, _Category2> __rai_type;


     
     
      ;
      ;

      __last1 = __rai_type::__newlast1(__first1, __last1, __first2, __last2);
      for (; __first1 != __last1 && __rai_type::__cnd2(__first2, __last2);
    ++__first1, ++__first2)
 {
   if (__comp(*__first1, *__first2))
     return true;
   if (__comp(*__first2, *__first1))
     return false;
 }
      return __first1 == __last1 && __first2 != __last2;
    }
# 1088 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2)
    {

     
     
     


      ;

      while (__first1 != __last1 && *__first1 == *__first2)
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }
# 1125 "/usr/include/c++/4.4/bits/stl_algobase.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _BinaryPredicate>
    pair<_InputIterator1, _InputIterator2>
    mismatch(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _BinaryPredicate __binary_pred)
    {

     
     
      ;

      while (__first1 != __last1 && bool(__binary_pred(*__first1, *__first2)))
        {
   ++__first1;
   ++__first2;
        }
      return pair<_InputIterator1, _InputIterator2>(__first1, __first2);
    }

}
# 42 "/usr/include/c++/4.4/bits/char_traits.h" 2 3
# 1 "/usr/include/c++/4.4/bits/postypes.h" 1 3
# 40 "/usr/include/c++/4.4/bits/postypes.h" 3
       
# 41 "/usr/include/c++/4.4/bits/postypes.h" 3

# 1 "/usr/include/c++/4.4/cwchar" 1 3
# 41 "/usr/include/c++/4.4/cwchar" 3
       
# 42 "/usr/include/c++/4.4/cwchar" 3


# 1 "/usr/include/c++/4.4/cstddef" 1 3
# 41 "/usr/include/c++/4.4/cstddef" 3
       
# 42 "/usr/include/c++/4.4/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 45 "/usr/include/c++/4.4/cstddef" 2 3
# 45 "/usr/include/c++/4.4/cwchar" 2 3


# 1 "/usr/include/wchar.h" 1 3 4
# 37 "/usr/include/wchar.h" 3 4
# 1 "/usr/include/stdio.h" 1 3 4
# 45 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 65 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 38 "/usr/include/wchar.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 41 "/usr/include/wchar.h" 2 3 4

# 1 "/usr/include/bits/wchar.h" 1 3 4
# 43 "/usr/include/wchar.h" 2 3 4
# 52 "/usr/include/wchar.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 352 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 53 "/usr/include/wchar.h" 2 3 4
# 83 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 104 "/usr/include/wchar.h" 3 4


typedef __mbstate_t mbstate_t;



# 129 "/usr/include/wchar.h" 3 4
extern "C" {




struct tm;









extern wchar_t *wcscpy (wchar_t *__restrict __dest,
   __const wchar_t *__restrict __src) throw ();

extern wchar_t *wcsncpy (wchar_t *__restrict __dest,
    __const wchar_t *__restrict __src, size_t __n)
     throw ();


extern wchar_t *wcscat (wchar_t *__restrict __dest,
   __const wchar_t *__restrict __src) throw ();

extern wchar_t *wcsncat (wchar_t *__restrict __dest,
    __const wchar_t *__restrict __src, size_t __n)
     throw ();


extern int wcscmp (__const wchar_t *__s1, __const wchar_t *__s2)
     throw () __attribute__ ((__pure__));

extern int wcsncmp (__const wchar_t *__s1, __const wchar_t *__s2, size_t __n)
     throw () __attribute__ ((__pure__));




extern int wcscasecmp (__const wchar_t *__s1, __const wchar_t *__s2) throw ();


extern int wcsncasecmp (__const wchar_t *__s1, __const wchar_t *__s2,
   size_t __n) throw ();





extern int wcscasecmp_l (__const wchar_t *__s1, __const wchar_t *__s2,
    __locale_t __loc) throw ();

extern int wcsncasecmp_l (__const wchar_t *__s1, __const wchar_t *__s2,
     size_t __n, __locale_t __loc) throw ();





extern int wcscoll (__const wchar_t *__s1, __const wchar_t *__s2) throw ();



extern size_t wcsxfrm (wchar_t *__restrict __s1,
         __const wchar_t *__restrict __s2, size_t __n) throw ();








extern int wcscoll_l (__const wchar_t *__s1, __const wchar_t *__s2,
        __locale_t __loc) throw ();




extern size_t wcsxfrm_l (wchar_t *__s1, __const wchar_t *__s2,
    size_t __n, __locale_t __loc) throw ();


extern wchar_t *wcsdup (__const wchar_t *__s) throw () __attribute__ ((__malloc__));





extern "C++" wchar_t *wcschr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wcschr (__const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcschr") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsrchr (wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wcsrchr (__const wchar_t *__wcs, wchar_t __wc)
     throw () __asm ("wcsrchr") __attribute__ ((__pure__));









extern wchar_t *wcschrnul (__const wchar_t *__s, wchar_t __wc)
     throw () __attribute__ ((__pure__));





extern size_t wcscspn (__const wchar_t *__wcs, __const wchar_t *__reject)
     throw () __attribute__ ((__pure__));


extern size_t wcsspn (__const wchar_t *__wcs, __const wchar_t *__accept)
     throw () __attribute__ ((__pure__));


extern "C++" wchar_t *wcspbrk (wchar_t *__wcs, __const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wcspbrk (__const wchar_t *__wcs,
           __const wchar_t *__accept)
     throw () __asm ("wcspbrk") __attribute__ ((__pure__));






extern "C++" wchar_t *wcsstr (wchar_t *__haystack, __const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wcsstr (__const wchar_t *__haystack,
          __const wchar_t *__needle)
     throw () __asm ("wcsstr") __attribute__ ((__pure__));






extern wchar_t *wcstok (wchar_t *__restrict __s,
   __const wchar_t *__restrict __delim,
   wchar_t **__restrict __ptr) throw ();


extern size_t wcslen (__const wchar_t *__s) throw () __attribute__ ((__pure__));





extern "C++" wchar_t *wcswcs (wchar_t *__haystack, __const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wcswcs (__const wchar_t *__haystack,
          __const wchar_t *__needle)
     throw () __asm ("wcswcs") __attribute__ ((__pure__));
# 303 "/usr/include/wchar.h" 3 4
extern size_t wcsnlen (__const wchar_t *__s, size_t __maxlen)
     throw () __attribute__ ((__pure__));






extern "C++" wchar_t *wmemchr (wchar_t *__s, wchar_t __c, size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));
extern "C++" __const wchar_t *wmemchr (__const wchar_t *__s, wchar_t __c,
           size_t __n)
     throw () __asm ("wmemchr") __attribute__ ((__pure__));






extern int wmemcmp (__const wchar_t *__restrict __s1,
      __const wchar_t *__restrict __s2, size_t __n)
     throw () __attribute__ ((__pure__));


extern wchar_t *wmemcpy (wchar_t *__restrict __s1,
    __const wchar_t *__restrict __s2, size_t __n) throw ();



extern wchar_t *wmemmove (wchar_t *__s1, __const wchar_t *__s2, size_t __n)
     throw ();


extern wchar_t *wmemset (wchar_t *__s, wchar_t __c, size_t __n) throw ();





extern wchar_t *wmempcpy (wchar_t *__restrict __s1,
     __const wchar_t *__restrict __s2, size_t __n)
     throw ();






extern wint_t btowc (int __c) throw ();



extern int wctob (wint_t __c) throw ();



extern int mbsinit (__const mbstate_t *__ps) throw () __attribute__ ((__pure__));



extern size_t mbrtowc (wchar_t *__restrict __pwc,
         __const char *__restrict __s, size_t __n,
         mbstate_t *__p) throw ();


extern size_t wcrtomb (char *__restrict __s, wchar_t __wc,
         mbstate_t *__restrict __ps) throw ();


extern size_t __mbrlen (__const char *__restrict __s, size_t __n,
   mbstate_t *__restrict __ps) throw ();
extern size_t mbrlen (__const char *__restrict __s, size_t __n,
        mbstate_t *__restrict __ps) throw ();

# 403 "/usr/include/wchar.h" 3 4



extern size_t mbsrtowcs (wchar_t *__restrict __dst,
    __const char **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();



extern size_t wcsrtombs (char *__restrict __dst,
    __const wchar_t **__restrict __src, size_t __len,
    mbstate_t *__restrict __ps) throw ();






extern size_t mbsnrtowcs (wchar_t *__restrict __dst,
     __const char **__restrict __src, size_t __nmc,
     size_t __len, mbstate_t *__restrict __ps) throw ();



extern size_t wcsnrtombs (char *__restrict __dst,
     __const wchar_t **__restrict __src,
     size_t __nwc, size_t __len,
     mbstate_t *__restrict __ps) throw ();






extern int wcwidth (wchar_t __c) throw ();



extern int wcswidth (__const wchar_t *__s, size_t __n) throw ();






extern double wcstod (__const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr) throw ();





extern float wcstof (__const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();
extern long double wcstold (__const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr) throw ();







extern long int wcstol (__const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, int __base) throw ();



extern unsigned long int wcstoul (__const wchar_t *__restrict __nptr,
      wchar_t **__restrict __endptr, int __base)
     throw ();






__extension__
extern long long int wcstoll (__const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstoull (__const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr,
     int __base) throw ();






__extension__
extern long long int wcstoq (__const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr, int __base)
     throw ();



__extension__
extern unsigned long long int wcstouq (__const wchar_t *__restrict __nptr,
           wchar_t **__restrict __endptr,
           int __base) throw ();
# 528 "/usr/include/wchar.h" 3 4
extern long int wcstol_l (__const wchar_t *__restrict __nptr,
     wchar_t **__restrict __endptr, int __base,
     __locale_t __loc) throw ();

extern unsigned long int wcstoul_l (__const wchar_t *__restrict __nptr,
        wchar_t **__restrict __endptr,
        int __base, __locale_t __loc) throw ();

__extension__
extern long long int wcstoll_l (__const wchar_t *__restrict __nptr,
    wchar_t **__restrict __endptr,
    int __base, __locale_t __loc) throw ();

__extension__
extern unsigned long long int wcstoull_l (__const wchar_t *__restrict __nptr,
       wchar_t **__restrict __endptr,
       int __base, __locale_t __loc)
     throw ();

extern double wcstod_l (__const wchar_t *__restrict __nptr,
   wchar_t **__restrict __endptr, __locale_t __loc)
     throw ();

extern float wcstof_l (__const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr, __locale_t __loc)
     throw ();

extern long double wcstold_l (__const wchar_t *__restrict __nptr,
         wchar_t **__restrict __endptr,
         __locale_t __loc) throw ();






extern wchar_t *wcpcpy (wchar_t *__dest, __const wchar_t *__src) throw ();



extern wchar_t *wcpncpy (wchar_t *__dest, __const wchar_t *__src, size_t __n)
     throw ();
# 578 "/usr/include/wchar.h" 3 4
extern __FILE *open_wmemstream (wchar_t **__bufloc, size_t *__sizeloc) throw ();






extern int fwide (__FILE *__fp, int __mode) throw ();






extern int fwprintf (__FILE *__restrict __stream,
       __const wchar_t *__restrict __format, ...)
                                                           ;




extern int wprintf (__const wchar_t *__restrict __format, ...)
                                                           ;

extern int swprintf (wchar_t *__restrict __s, size_t __n,
       __const wchar_t *__restrict __format, ...)
     throw () ;





extern int vfwprintf (__FILE *__restrict __s,
        __const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
                                                           ;




extern int vwprintf (__const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                           ;


extern int vswprintf (wchar_t *__restrict __s, size_t __n,
        __const wchar_t *__restrict __format,
        __gnuc_va_list __arg)
     throw () ;






extern int fwscanf (__FILE *__restrict __stream,
      __const wchar_t *__restrict __format, ...)
                                                          ;




extern int wscanf (__const wchar_t *__restrict __format, ...)
                                                          ;

extern int swscanf (__const wchar_t *__restrict __s,
      __const wchar_t *__restrict __format, ...)
     throw () ;
# 678 "/usr/include/wchar.h" 3 4









extern int vfwscanf (__FILE *__restrict __s,
       __const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
                                                          ;




extern int vwscanf (__const wchar_t *__restrict __format,
      __gnuc_va_list __arg)
                                                          ;

extern int vswscanf (__const wchar_t *__restrict __s,
       __const wchar_t *__restrict __format,
       __gnuc_va_list __arg)
     throw () ;
# 734 "/usr/include/wchar.h" 3 4









extern wint_t fgetwc (__FILE *__stream);
extern wint_t getwc (__FILE *__stream);





extern wint_t getwchar (void);






extern wint_t fputwc (wchar_t __wc, __FILE *__stream);
extern wint_t putwc (wchar_t __wc, __FILE *__stream);





extern wint_t putwchar (wchar_t __wc);







extern wchar_t *fgetws (wchar_t *__restrict __ws, int __n,
   __FILE *__restrict __stream);





extern int fputws (__const wchar_t *__restrict __ws,
     __FILE *__restrict __stream);






extern wint_t ungetwc (wint_t __wc, __FILE *__stream);

# 799 "/usr/include/wchar.h" 3 4
extern wint_t getwc_unlocked (__FILE *__stream);
extern wint_t getwchar_unlocked (void);







extern wint_t fgetwc_unlocked (__FILE *__stream);







extern wint_t fputwc_unlocked (wchar_t __wc, __FILE *__stream);
# 825 "/usr/include/wchar.h" 3 4
extern wint_t putwc_unlocked (wchar_t __wc, __FILE *__stream);
extern wint_t putwchar_unlocked (wchar_t __wc);
# 835 "/usr/include/wchar.h" 3 4
extern wchar_t *fgetws_unlocked (wchar_t *__restrict __ws, int __n,
     __FILE *__restrict __stream);







extern int fputws_unlocked (__const wchar_t *__restrict __ws,
       __FILE *__restrict __stream);







extern size_t wcsftime (wchar_t *__restrict __s, size_t __maxsize,
   __const wchar_t *__restrict __format,
   __const struct tm *__restrict __tp) throw ();







extern size_t wcsftime_l (wchar_t *__restrict __s, size_t __maxsize,
     __const wchar_t *__restrict __format,
     __const struct tm *__restrict __tp,
     __locale_t __loc) throw ();
# 889 "/usr/include/wchar.h" 3 4
}
# 48 "/usr/include/c++/4.4/cwchar" 2 3
# 65 "/usr/include/c++/4.4/cwchar" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  using ::mbstate_t;

}
# 139 "/usr/include/c++/4.4/cwchar" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  using ::wint_t;

  using ::btowc;
  using ::fgetwc;
  using ::fgetws;
  using ::fputwc;
  using ::fputws;
  using ::fwide;
  using ::fwprintf;
  using ::fwscanf;
  using ::getwc;
  using ::getwchar;
  using ::mbrlen;
  using ::mbrtowc;
  using ::mbsinit;
  using ::mbsrtowcs;
  using ::putwc;
  using ::putwchar;
  using ::swprintf;
  using ::swscanf;
  using ::ungetwc;
  using ::vfwprintf;

  using ::vfwscanf;

  using ::vswprintf;

  using ::vswscanf;

  using ::vwprintf;

  using ::vwscanf;

  using ::wcrtomb;
  using ::wcscat;
  using ::wcscmp;
  using ::wcscoll;
  using ::wcscpy;
  using ::wcscspn;
  using ::wcsftime;
  using ::wcslen;
  using ::wcsncat;
  using ::wcsncmp;
  using ::wcsncpy;
  using ::wcsrtombs;
  using ::wcsspn;
  using ::wcstod;

  using ::wcstof;

  using ::wcstok;
  using ::wcstol;
  using ::wcstoul;
  using ::wcsxfrm;
  using ::wctob;
  using ::wmemcmp;
  using ::wmemcpy;
  using ::wmemmove;
  using ::wmemset;
  using ::wprintf;
  using ::wscanf;
  using ::wcschr;
  using ::wcspbrk;
  using ::wcsrchr;
  using ::wcsstr;
  using ::wmemchr;
# 230 "/usr/include/c++/4.4/cwchar" 3
}







namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {






  using ::wcstold;
# 254 "/usr/include/c++/4.4/cwchar" 3
  using ::wcstoll;
  using ::wcstoull;


}

namespace std __attribute__ ((__visibility__ ("default"))) {

  using ::__gnu_cxx::wcstold;
  using ::__gnu_cxx::wcstoll;
  using ::__gnu_cxx::wcstoull;

}
# 43 "/usr/include/c++/4.4/bits/postypes.h" 2 3
# 70 "/usr/include/c++/4.4/bits/postypes.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {
# 88 "/usr/include/c++/4.4/bits/postypes.h" 3
  typedef long streamoff;
# 98 "/usr/include/c++/4.4/bits/postypes.h" 3
  typedef ptrdiff_t streamsize;
# 111 "/usr/include/c++/4.4/bits/postypes.h" 3
  template<typename _StateT>
    class fpos
    {
    private:
      streamoff _M_off;
      _StateT _M_state;

    public:




      fpos()
      : _M_off(0), _M_state() { }
# 133 "/usr/include/c++/4.4/bits/postypes.h" 3
      fpos(streamoff __off)
      : _M_off(__off), _M_state() { }


      operator streamoff() const { return _M_off; }


      void
      state(_StateT __st)
      { _M_state = __st; }


      _StateT
      state() const
      { return _M_state; }





      fpos&
      operator+=(streamoff __off)
      {
 _M_off += __off;
 return *this;
      }





      fpos&
      operator-=(streamoff __off)
      {
 _M_off -= __off;
 return *this;
      }







      fpos
      operator+(streamoff __off) const
      {
 fpos __pos(*this);
 __pos += __off;
 return __pos;
      }







      fpos
      operator-(streamoff __off) const
      {
 fpos __pos(*this);
 __pos -= __off;
 return __pos;
      }






      streamoff
      operator-(const fpos& __other) const
      { return _M_off - __other._M_off; }
    };






  template<typename _StateT>
    inline bool
    operator==(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) == streamoff(__rhs); }

  template<typename _StateT>
    inline bool
    operator!=(const fpos<_StateT>& __lhs, const fpos<_StateT>& __rhs)
    { return streamoff(__lhs) != streamoff(__rhs); }





  typedef fpos<mbstate_t> streampos;

  typedef fpos<mbstate_t> wstreampos;
# 239 "/usr/include/c++/4.4/bits/postypes.h" 3
}
# 43 "/usr/include/c++/4.4/bits/char_traits.h" 2 3
# 1 "/usr/include/c++/4.4/cwchar" 1 3
# 41 "/usr/include/c++/4.4/cwchar" 3
       
# 42 "/usr/include/c++/4.4/cwchar" 3


# 1 "/usr/include/c++/4.4/cstddef" 1 3
# 41 "/usr/include/c++/4.4/cstddef" 3
       
# 42 "/usr/include/c++/4.4/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 45 "/usr/include/c++/4.4/cstddef" 2 3
# 45 "/usr/include/c++/4.4/cwchar" 2 3


# 1 "/usr/include/wchar.h" 1 3 4
# 48 "/usr/include/c++/4.4/cwchar" 2 3
# 44 "/usr/include/c++/4.4/bits/char_traits.h" 2 3
# 52 "/usr/include/c++/4.4/bits/char_traits.h" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {
# 64 "/usr/include/c++/4.4/bits/char_traits.h" 3
  template<typename _CharT>
    struct _Char_types
    {
      typedef unsigned long int_type;
      typedef std::streampos pos_type;
      typedef std::streamoff off_type;
      typedef std::mbstate_t state_type;
    };
# 89 "/usr/include/c++/4.4/bits/char_traits.h" 3
  template<typename _CharT>
    struct char_traits
    {
      typedef _CharT char_type;
      typedef typename _Char_types<_CharT>::int_type int_type;
      typedef typename _Char_types<_CharT>::pos_type pos_type;
      typedef typename _Char_types<_CharT>::off_type off_type;
      typedef typename _Char_types<_CharT>::state_type state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, std::size_t __n);

      static std::size_t
      length(const char_type* __s);

      static const char_type*
      find(const char_type* __s, std::size_t __n, const char_type& __a);

      static char_type*
      move(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      copy(char_type* __s1, const char_type* __s2, std::size_t __n);

      static char_type*
      assign(char_type* __s, std::size_t __n, char_type __a);

      static char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }

      static int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(__c); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>((-1)); }

      static int_type
      not_eof(const int_type& __c)
      { return !eq_int_type(__c, eof()) ? __c : to_int_type(char_type()); }
    };

  template<typename _CharT>
    int
    char_traits<_CharT>::
    compare(const char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
 if (lt(__s1[__i], __s2[__i]))
   return -1;
 else if (lt(__s2[__i], __s1[__i]))
   return 1;
      return 0;
    }

  template<typename _CharT>
    std::size_t
    char_traits<_CharT>::
    length(const char_type* __p)
    {
      std::size_t __i = 0;
      while (!eq(__p[__i], char_type()))
        ++__i;
      return __i;
    }

  template<typename _CharT>
    const typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    find(const char_type* __s, std::size_t __n, const char_type& __a)
    {
      for (std::size_t __i = 0; __i < __n; ++__i)
        if (eq(__s[__i], __a))
          return __s + __i;
      return 0;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    move(char_type* __s1, const char_type* __s2, std::size_t __n)
    {
      return static_cast<_CharT*>(__builtin_memmove(__s1, __s2,
          __n * sizeof(char_type)));
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    copy(char_type* __s1, const char_type* __s2, std::size_t __n)
    {

      std::copy(__s2, __s2 + __n, __s1);
      return __s1;
    }

  template<typename _CharT>
    typename char_traits<_CharT>::char_type*
    char_traits<_CharT>::
    assign(char_type* __s, std::size_t __n, char_type __a)
    {

      std::fill_n(__s, __n, __a);
      return __s;
    }

}

namespace std __attribute__ ((__visibility__ ("default"))) {
# 230 "/usr/include/c++/4.4/bits/char_traits.h" 3
  template<class _CharT>
    struct char_traits : public __gnu_cxx::char_traits<_CharT>
    { };



  template<>
    struct char_traits<char>
    {
      typedef char char_type;
      typedef int int_type;
      typedef streampos pos_type;
      typedef streamoff off_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return __builtin_memcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return __builtin_strlen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return static_cast<const char_type*>(__builtin_memchr(__s, __a, __n)); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memmove(__s1, __s2, __n)); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n)); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return static_cast<char_type*>(__builtin_memset(__s, __a, __n)); }

      static char_type
      to_char_type(const int_type& __c)
      { return static_cast<char_type>(__c); }



      static int_type
      to_int_type(const char_type& __c)
      { return static_cast<int_type>(static_cast<unsigned char>(__c)); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>((-1)); }

      static int_type
      not_eof(const int_type& __c)
      { return (__c == eof()) ? 0 : __c; }
  };




  template<>
    struct char_traits<wchar_t>
    {
      typedef wchar_t char_type;
      typedef wint_t int_type;
      typedef streamoff off_type;
      typedef wstreampos pos_type;
      typedef mbstate_t state_type;

      static void
      assign(char_type& __c1, const char_type& __c2)
      { __c1 = __c2; }

      static bool
      eq(const char_type& __c1, const char_type& __c2)
      { return __c1 == __c2; }

      static bool
      lt(const char_type& __c1, const char_type& __c2)
      { return __c1 < __c2; }

      static int
      compare(const char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcmp(__s1, __s2, __n); }

      static size_t
      length(const char_type* __s)
      { return wcslen(__s); }

      static const char_type*
      find(const char_type* __s, size_t __n, const char_type& __a)
      { return wmemchr(__s, __a, __n); }

      static char_type*
      move(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemmove(__s1, __s2, __n); }

      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcpy(__s1, __s2, __n); }

      static char_type*
      assign(char_type* __s, size_t __n, char_type __a)
      { return wmemset(__s, __a, __n); }

      static char_type
      to_char_type(const int_type& __c)
      { return char_type(__c); }

      static int_type
      to_int_type(const char_type& __c)
      { return int_type(__c); }

      static bool
      eq_int_type(const int_type& __c1, const int_type& __c2)
      { return __c1 == __c2; }

      static int_type
      eof()
      { return static_cast<int_type>((0xffffffffu)); }

      static int_type
      not_eof(const int_type& __c)
      { return eq_int_type(__c, eof()) ? 0 : __c; }
  };


}
# 43 "/usr/include/c++/4.4/string" 2 3
# 1 "/usr/include/c++/4.4/bits/allocator.h" 1 3
# 48 "/usr/include/c++/4.4/bits/allocator.h" 3
# 1 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++allocator.h" 1 3
# 34 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++allocator.h" 3
# 1 "/usr/include/c++/4.4/ext/new_allocator.h" 1 3
# 33 "/usr/include/c++/4.4/ext/new_allocator.h" 3
# 1 "/usr/include/c++/4.4/new" 1 3
# 39 "/usr/include/c++/4.4/new" 3
# 1 "/usr/include/c++/4.4/cstddef" 1 3
# 41 "/usr/include/c++/4.4/cstddef" 3
       
# 42 "/usr/include/c++/4.4/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 45 "/usr/include/c++/4.4/cstddef" 2 3
# 40 "/usr/include/c++/4.4/new" 2 3
# 1 "/usr/include/c++/4.4/exception" 1 3
# 35 "/usr/include/c++/4.4/exception" 3
#pragma GCC visibility push(default)



extern "C++" {

namespace std
{
# 59 "/usr/include/c++/4.4/exception" 3
  class exception
  {
  public:
    exception() throw() { }
    virtual ~exception() throw();



    virtual const char* what() const throw();
  };



  class bad_exception : public exception
  {
  public:
    bad_exception() throw() { }



    virtual ~bad_exception() throw();


    virtual const char* what() const throw();
  };


  typedef void (*terminate_handler) ();


  typedef void (*unexpected_handler) ();


  terminate_handler set_terminate(terminate_handler) throw();



  void terminate() __attribute__ ((__noreturn__));


  unexpected_handler set_unexpected(unexpected_handler) throw();



  void unexpected() __attribute__ ((__noreturn__));
# 115 "/usr/include/c++/4.4/exception" 3
  bool uncaught_exception() throw();


}

namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {
# 138 "/usr/include/c++/4.4/exception" 3
  void __verbose_terminate_handler();

}

}

#pragma GCC visibility pop
# 41 "/usr/include/c++/4.4/new" 2 3

#pragma GCC visibility push(default)

extern "C++" {

namespace std
{






  class bad_alloc : public exception
  {
  public:
    bad_alloc() throw() { }



    virtual ~bad_alloc() throw();


    virtual const char* what() const throw();
  };

  struct nothrow_t { };

  extern const nothrow_t nothrow;



  typedef void (*new_handler)();



  new_handler set_new_handler(new_handler) throw();
}
# 91 "/usr/include/c++/4.4/new" 3
void* operator new(std::size_t) throw (std::bad_alloc);
void* operator new[](std::size_t) throw (std::bad_alloc);
void operator delete(void*) throw();
void operator delete[](void*) throw();
void* operator new(std::size_t, const std::nothrow_t&) throw();
void* operator new[](std::size_t, const std::nothrow_t&) throw();
void operator delete(void*, const std::nothrow_t&) throw();
void operator delete[](void*, const std::nothrow_t&) throw();


inline void* operator new(std::size_t, void* __p) throw() { return __p; }
inline void* operator new[](std::size_t, void* __p) throw() { return __p; }


inline void operator delete (void*, void*) throw() { }
inline void operator delete[](void*, void*) throw() { }

}

#pragma GCC visibility pop
# 34 "/usr/include/c++/4.4/ext/new_allocator.h" 2 3



namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {

  using std::size_t;
  using std::ptrdiff_t;
# 50 "/usr/include/c++/4.4/ext/new_allocator.h" 3
  template<typename _Tp>
    class new_allocator
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef new_allocator<_Tp1> other; };

      new_allocator() throw() { }

      new_allocator(const new_allocator&) throw() { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) throw() { }

      ~new_allocator() throw() { }

      pointer
      address(reference __x) const { return &__x; }

      const_pointer
      address(const_reference __x) const { return &__x; }



      pointer
      allocate(size_type __n, const void* = 0)
      {
 if (__builtin_expect(__n > this->max_size(), false))
   std::__throw_bad_alloc();

 return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }


      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }

      size_type
      max_size() const throw()
      { return size_t(-1) / sizeof(_Tp); }



      void
      construct(pointer __p, const _Tp& __val)
      { ::new((void *)__p) _Tp(__val); }
# 114 "/usr/include/c++/4.4/ext/new_allocator.h" 3
      void
      destroy(pointer __p) { __p->~_Tp(); }
    };

  template<typename _Tp>
    inline bool
    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
    { return false; }

}
# 35 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++allocator.h" 2 3
# 49 "/usr/include/c++/4.4/bits/allocator.h" 2 3

namespace std __attribute__ ((__visibility__ ("default"))) {
# 59 "/usr/include/c++/4.4/bits/allocator.h" 3
  template<typename _Tp>
    class allocator;


  template<>
    class allocator<void>
    {
    public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef void* pointer;
      typedef const void* const_pointer;
      typedef void value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };
    };
# 85 "/usr/include/c++/4.4/bits/allocator.h" 3
  template<typename _Tp>
    class allocator: public __gnu_cxx::new_allocator<_Tp>
    {
   public:
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Tp* pointer;
      typedef const _Tp* const_pointer;
      typedef _Tp& reference;
      typedef const _Tp& const_reference;
      typedef _Tp value_type;

      template<typename _Tp1>
        struct rebind
        { typedef allocator<_Tp1> other; };

      allocator() throw() { }

      allocator(const allocator& __a) throw()
      : __gnu_cxx::new_allocator<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }


    };

  template<typename _T1, typename _T2>
    inline bool
    operator==(const allocator<_T1>&, const allocator<_T2>&)
    { return true; }

  template<typename _Tp>
    inline bool
    operator==(const allocator<_Tp>&, const allocator<_Tp>&)
    { return true; }

  template<typename _T1, typename _T2>
    inline bool
    operator!=(const allocator<_T1>&, const allocator<_T2>&)
    { return false; }

  template<typename _Tp>
    inline bool
    operator!=(const allocator<_Tp>&, const allocator<_Tp>&)
    { return false; }





  extern template class allocator<char>;
  extern template class allocator<wchar_t>;






  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_swap
    { static void _S_do_it(_Alloc&, _Alloc&) { } };

  template<typename _Alloc>
    struct __alloc_swap<_Alloc, false>
    {
      static void
      _S_do_it(_Alloc& __one, _Alloc& __two)
      {

 if (__one != __two)
   swap(__one, __two);
      }
    };


  template<typename _Alloc, bool = __is_empty(_Alloc)>
    struct __alloc_neq
    {
      static bool
      _S_do_it(const _Alloc&, const _Alloc&)
      { return false; }
    };

  template<typename _Alloc>
    struct __alloc_neq<_Alloc, false>
    {
      static bool
      _S_do_it(const _Alloc& __one, const _Alloc& __two)
      { return __one != __two; }
    };

}
# 44 "/usr/include/c++/4.4/string" 2 3

# 1 "/usr/include/c++/4.4/bits/localefwd.h" 1 3
# 39 "/usr/include/c++/4.4/bits/localefwd.h" 3
       
# 40 "/usr/include/c++/4.4/bits/localefwd.h" 3


# 1 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 1 3
# 40 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 3
       
# 41 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 3

# 1 "/usr/include/c++/4.4/clocale" 1 3
# 41 "/usr/include/c++/4.4/clocale" 3
       
# 42 "/usr/include/c++/4.4/clocale" 3


# 1 "/usr/include/locale.h" 1 3 4
# 29 "/usr/include/locale.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 30 "/usr/include/locale.h" 2 3 4
# 1 "/usr/include/bits/locale.h" 1 3 4
# 27 "/usr/include/bits/locale.h" 3 4
enum
{
  __LC_CTYPE = 0,
  __LC_NUMERIC = 1,
  __LC_TIME = 2,
  __LC_COLLATE = 3,
  __LC_MONETARY = 4,
  __LC_MESSAGES = 5,
  __LC_ALL = 6,
  __LC_PAPER = 7,
  __LC_NAME = 8,
  __LC_ADDRESS = 9,
  __LC_TELEPHONE = 10,
  __LC_MEASUREMENT = 11,
  __LC_IDENTIFICATION = 12
};
# 31 "/usr/include/locale.h" 2 3 4

extern "C" {
# 51 "/usr/include/locale.h" 3 4



struct lconv
{


  char *decimal_point;
  char *thousands_sep;





  char *grouping;





  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;

  char p_cs_precedes;

  char p_sep_by_space;

  char n_cs_precedes;

  char n_sep_by_space;






  char p_sign_posn;
  char n_sign_posn;


  char int_p_cs_precedes;

  char int_p_sep_by_space;

  char int_n_cs_precedes;

  char int_n_sep_by_space;






  char int_p_sign_posn;
  char int_n_sign_posn;
# 121 "/usr/include/locale.h" 3 4
};



extern char *setlocale (int __category, __const char *__locale) throw ();


extern struct lconv *localeconv (void) throw ();


# 152 "/usr/include/locale.h" 3 4
extern __locale_t newlocale (int __category_mask, __const char *__locale,
        __locale_t __base) throw ();
# 187 "/usr/include/locale.h" 3 4
extern __locale_t duplocale (__locale_t __dataset) throw ();



extern void freelocale (__locale_t __dataset) throw ();






extern __locale_t uselocale (__locale_t __dataset) throw ();







}
# 45 "/usr/include/c++/4.4/clocale" 2 3
# 53 "/usr/include/c++/4.4/clocale" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  using ::lconv;
  using ::setlocale;
  using ::localeconv;

}
# 43 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 2 3
# 1 "/usr/include/c++/4.4/cstddef" 1 3
# 41 "/usr/include/c++/4.4/cstddef" 3
       
# 42 "/usr/include/c++/4.4/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 45 "/usr/include/c++/4.4/cstddef" 2 3
# 44 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 2 3






namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {

  extern "C" __typeof(uselocale) __uselocale;

}


namespace std __attribute__ ((__visibility__ ("default"))) {

  typedef __locale_t __c_locale;





  inline int
  __convert_from_v(const __c_locale& __cloc __attribute__ ((__unused__)),
     char* __out,
     const int __size __attribute__ ((__unused__)),
     const char* __fmt, ...)
  {

    __c_locale __old = __gnu_cxx::__uselocale(__cloc);
# 85 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++locale.h" 3
    __builtin_va_list __args;
    __builtin_va_start(__args, __fmt);


    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);




    __builtin_va_end(__args);


    __gnu_cxx::__uselocale(__old);







    return __ret;
  }

}
# 43 "/usr/include/c++/4.4/bits/localefwd.h" 2 3
# 1 "/usr/include/c++/4.4/iosfwd" 1 3
# 38 "/usr/include/c++/4.4/iosfwd" 3
       
# 39 "/usr/include/c++/4.4/iosfwd" 3





namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ios;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_streambuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_istream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_iostream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
     typename _Alloc = allocator<_CharT> >
    class basic_stringbuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_istringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_ostringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT>,
    typename _Alloc = allocator<_CharT> >
    class basic_stringstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_filebuf;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ifstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_ofstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class basic_fstream;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class istreambuf_iterator;

  template<typename _CharT, typename _Traits = char_traits<_CharT> >
    class ostreambuf_iterator;



  class ios_base;
# 127 "/usr/include/c++/4.4/iosfwd" 3
  typedef basic_ios<char> ios;
  typedef basic_streambuf<char> streambuf;
  typedef basic_istream<char> istream;
  typedef basic_ostream<char> ostream;
  typedef basic_iostream<char> iostream;
  typedef basic_stringbuf<char> stringbuf;
  typedef basic_istringstream<char> istringstream;
  typedef basic_ostringstream<char> ostringstream;
  typedef basic_stringstream<char> stringstream;
  typedef basic_filebuf<char> filebuf;
  typedef basic_ifstream<char> ifstream;
  typedef basic_ofstream<char> ofstream;
  typedef basic_fstream<char> fstream;


  typedef basic_ios<wchar_t> wios;
  typedef basic_streambuf<wchar_t> wstreambuf;
  typedef basic_istream<wchar_t> wistream;
  typedef basic_ostream<wchar_t> wostream;
  typedef basic_iostream<wchar_t> wiostream;
  typedef basic_stringbuf<wchar_t> wstringbuf;
  typedef basic_istringstream<wchar_t> wistringstream;
  typedef basic_ostringstream<wchar_t> wostringstream;
  typedef basic_stringstream<wchar_t> wstringstream;
  typedef basic_filebuf<wchar_t> wfilebuf;
  typedef basic_ifstream<wchar_t> wifstream;
  typedef basic_ofstream<wchar_t> wofstream;
  typedef basic_fstream<wchar_t> wfstream;



}
# 44 "/usr/include/c++/4.4/bits/localefwd.h" 2 3
# 1 "/usr/include/c++/4.4/cctype" 1 3
# 41 "/usr/include/c++/4.4/cctype" 3
       
# 42 "/usr/include/c++/4.4/cctype" 3


# 1 "/usr/include/ctype.h" 1 3 4
# 30 "/usr/include/ctype.h" 3 4
extern "C" {
# 48 "/usr/include/ctype.h" 3 4
enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 81 "/usr/include/ctype.h" 3 4
extern __const unsigned short int **__ctype_b_loc (void)
     throw () __attribute__ ((__const));
extern __const __int32_t **__ctype_tolower_loc (void)
     throw () __attribute__ ((__const));
extern __const __int32_t **__ctype_toupper_loc (void)
     throw () __attribute__ ((__const));
# 96 "/usr/include/ctype.h" 3 4






extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();








extern int isblank (int) throw ();






extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 247 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, __locale_t) throw ();
extern int isalpha_l (int, __locale_t) throw ();
extern int iscntrl_l (int, __locale_t) throw ();
extern int isdigit_l (int, __locale_t) throw ();
extern int islower_l (int, __locale_t) throw ();
extern int isgraph_l (int, __locale_t) throw ();
extern int isprint_l (int, __locale_t) throw ();
extern int ispunct_l (int, __locale_t) throw ();
extern int isspace_l (int, __locale_t) throw ();
extern int isupper_l (int, __locale_t) throw ();
extern int isxdigit_l (int, __locale_t) throw ();

extern int isblank_l (int, __locale_t) throw ();



extern int __tolower_l (int __c, __locale_t __l) throw ();
extern int tolower_l (int __c, __locale_t __l) throw ();


extern int __toupper_l (int __c, __locale_t __l) throw ();
extern int toupper_l (int __c, __locale_t __l) throw ();
# 323 "/usr/include/ctype.h" 3 4
}
# 45 "/usr/include/c++/4.4/cctype" 2 3
# 64 "/usr/include/c++/4.4/cctype" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  using ::isalnum;
  using ::isalpha;
  using ::iscntrl;
  using ::isdigit;
  using ::isgraph;
  using ::islower;
  using ::isprint;
  using ::ispunct;
  using ::isspace;
  using ::isupper;
  using ::isxdigit;
  using ::tolower;
  using ::toupper;

}
# 45 "/usr/include/c++/4.4/bits/localefwd.h" 2 3

namespace std __attribute__ ((__visibility__ ("default"))) {


  class locale;

  template<typename _Facet>
    bool
    has_facet(const locale&) throw();

  template<typename _Facet>
    const _Facet&
    use_facet(const locale&);


  template<typename _CharT>
    bool
    isspace(_CharT, const locale&);

  template<typename _CharT>
    bool
    isprint(_CharT, const locale&);

  template<typename _CharT>
    bool
    iscntrl(_CharT, const locale&);

  template<typename _CharT>
    bool
    isupper(_CharT, const locale&);

  template<typename _CharT>
    bool
    islower(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalpha(_CharT, const locale&);

  template<typename _CharT>
    bool
    isdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    ispunct(_CharT, const locale&);

  template<typename _CharT>
    bool
    isxdigit(_CharT, const locale&);

  template<typename _CharT>
    bool
    isalnum(_CharT, const locale&);

  template<typename _CharT>
    bool
    isgraph(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    toupper(_CharT, const locale&);

  template<typename _CharT>
    _CharT
    tolower(_CharT, const locale&);


  class ctype_base;
  template<typename _CharT>
    class ctype;
  template<> class ctype<char>;

  template<> class ctype<wchar_t>;

  template<typename _CharT>
    class ctype_byname;


  class codecvt_base;
  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt;
  template<> class codecvt<char, char, mbstate_t>;

  template<> class codecvt<wchar_t, char, mbstate_t>;

  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname;



  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class num_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class num_put;

  template<typename _CharT> class numpunct;
  template<typename _CharT> class numpunct_byname;


  template<typename _CharT>
    class collate;
  template<typename _CharT> class
    collate_byname;


  class time_base;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get;
  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class time_get_byname;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class time_put_byname;


  class money_base;

  template<typename _CharT, typename _InIter = istreambuf_iterator<_CharT> >
    class money_get;
  template<typename _CharT, typename _OutIter = ostreambuf_iterator<_CharT> >
    class money_put;

  template<typename _CharT, bool _Intl = false>
    class moneypunct;
  template<typename _CharT, bool _Intl = false>
    class moneypunct_byname;


  class messages_base;
  template<typename _CharT>
    class messages;
  template<typename _CharT>
    class messages_byname;

}
# 46 "/usr/include/c++/4.4/string" 2 3
# 1 "/usr/include/c++/4.4/bits/ostream_insert.h" 1 3
# 33 "/usr/include/c++/4.4/bits/ostream_insert.h" 3
       
# 34 "/usr/include/c++/4.4/bits/ostream_insert.h" 3


# 1 "/usr/include/c++/4.4/cxxabi-forced.h" 1 3
# 29 "/usr/include/c++/4.4/cxxabi-forced.h" 3
#pragma GCC visibility push(default)


namespace __cxxabiv1
{







  class __forced_unwind
  {
    virtual ~__forced_unwind() throw();
    virtual void __pure_dummy() = 0;
  };
}


#pragma GCC visibility pop
# 37 "/usr/include/c++/4.4/bits/ostream_insert.h" 2 3

namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_write(basic_ostream<_CharT, _Traits>& __out,
      const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const streamsize __put = __out.rdbuf()->sputn(__s, __n);
      if (__put != __n)
 __out.setstate(__ios_base::badbit);
    }

  template<typename _CharT, typename _Traits>
    inline void
    __ostream_fill(basic_ostream<_CharT, _Traits>& __out, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      const _CharT __c = __out.fill();
      for (; __n > 0; --__n)
 {
   const typename _Traits::int_type __put = __out.rdbuf()->sputc(__c);
   if (_Traits::eq_int_type(__put, _Traits::eof()))
     {
       __out.setstate(__ios_base::badbit);
       break;
     }
 }
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    __ostream_insert(basic_ostream<_CharT, _Traits>& __out,
       const _CharT* __s, streamsize __n)
    {
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef typename __ostream_type::ios_base __ios_base;

      typename __ostream_type::sentry __cerb(__out);
      if (__cerb)
 {
   try
     {
       const streamsize __w = __out.width();
       if (__w > __n)
  {
    const bool __left = ((__out.flags()
     & __ios_base::adjustfield)
           == __ios_base::left);
    if (!__left)
      __ostream_fill(__out, __w - __n);
    if (__out.good())
      __ostream_write(__out, __s, __n);
    if (__left && __out.good())
      __ostream_fill(__out, __w - __n);
  }
       else
  __ostream_write(__out, __s, __n);
       __out.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(__ios_base::badbit); }
 }
      return __out;
    }





  extern template ostream& __ostream_insert(ostream&, const char*, streamsize);


  extern template wostream& __ostream_insert(wostream&, const wchar_t*,
          streamsize);



}
# 47 "/usr/include/c++/4.4/string" 2 3



# 1 "/usr/include/c++/4.4/bits/stl_function.h" 1 3
# 60 "/usr/include/c++/4.4/bits/stl_function.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {
# 99 "/usr/include/c++/4.4/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    struct unary_function
    {
      typedef _Arg argument_type;


      typedef _Result result_type;
    };




  template<typename _Arg1, typename _Arg2, typename _Result>
    struct binary_function
    {
      typedef _Arg1 first_argument_type;


      typedef _Arg2 second_argument_type;
      typedef _Result result_type;
    };
# 134 "/usr/include/c++/4.4/bits/stl_function.h" 3
  template<typename _Tp>
    struct plus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x + __y; }
    };


  template<typename _Tp>
    struct minus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x - __y; }
    };


  template<typename _Tp>
    struct multiplies : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x * __y; }
    };


  template<typename _Tp>
    struct divides : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x / __y; }
    };


  template<typename _Tp>
    struct modulus : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x % __y; }
    };


  template<typename _Tp>
    struct negate : public unary_function<_Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x) const
      { return -__x; }
    };
# 198 "/usr/include/c++/4.4/bits/stl_function.h" 3
  template<typename _Tp>
    struct equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x == __y; }
    };


  template<typename _Tp>
    struct not_equal_to : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x != __y; }
    };


  template<typename _Tp>
    struct greater : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x > __y; }
    };


  template<typename _Tp>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
    };


  template<typename _Tp>
    struct greater_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x >= __y; }
    };


  template<typename _Tp>
    struct less_equal : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x <= __y; }
    };
# 262 "/usr/include/c++/4.4/bits/stl_function.h" 3
  template<typename _Tp>
    struct logical_and : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x && __y; }
    };


  template<typename _Tp>
    struct logical_or : public binary_function<_Tp, _Tp, bool>
    {
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x || __y; }
    };


  template<typename _Tp>
    struct logical_not : public unary_function<_Tp, bool>
    {
      bool
      operator()(const _Tp& __x) const
      { return !__x; }
    };




  template<typename _Tp>
    struct bit_and : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x & __y; }
    };

  template<typename _Tp>
    struct bit_or : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x | __y; }
    };

  template<typename _Tp>
    struct bit_xor : public binary_function<_Tp, _Tp, _Tp>
    {
      _Tp
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x ^ __y; }
    };
# 345 "/usr/include/c++/4.4/bits/stl_function.h" 3
  template<typename _Predicate>
    class unary_negate
    : public unary_function<typename _Predicate::argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      unary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::argument_type& __x) const
      { return !_M_pred(__x); }
    };


  template<typename _Predicate>
    inline unary_negate<_Predicate>
    not1(const _Predicate& __pred)
    { return unary_negate<_Predicate>(__pred); }


  template<typename _Predicate>
    class binary_negate
    : public binary_function<typename _Predicate::first_argument_type,
        typename _Predicate::second_argument_type, bool>
    {
    protected:
      _Predicate _M_pred;

    public:
      explicit
      binary_negate(const _Predicate& __x) : _M_pred(__x) { }

      bool
      operator()(const typename _Predicate::first_argument_type& __x,
   const typename _Predicate::second_argument_type& __y) const
      { return !_M_pred(__x, __y); }
    };


  template<typename _Predicate>
    inline binary_negate<_Predicate>
    not2(const _Predicate& __pred)
    { return binary_negate<_Predicate>(__pred); }
# 416 "/usr/include/c++/4.4/bits/stl_function.h" 3
  template<typename _Arg, typename _Result>
    class pointer_to_unary_function : public unary_function<_Arg, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg);

    public:
      pointer_to_unary_function() { }

      explicit
      pointer_to_unary_function(_Result (*__x)(_Arg))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg __x) const
      { return _M_ptr(__x); }
    };


  template<typename _Arg, typename _Result>
    inline pointer_to_unary_function<_Arg, _Result>
    ptr_fun(_Result (*__x)(_Arg))
    { return pointer_to_unary_function<_Arg, _Result>(__x); }


  template<typename _Arg1, typename _Arg2, typename _Result>
    class pointer_to_binary_function
    : public binary_function<_Arg1, _Arg2, _Result>
    {
    protected:
      _Result (*_M_ptr)(_Arg1, _Arg2);

    public:
      pointer_to_binary_function() { }

      explicit
      pointer_to_binary_function(_Result (*__x)(_Arg1, _Arg2))
      : _M_ptr(__x) { }

      _Result
      operator()(_Arg1 __x, _Arg2 __y) const
      { return _M_ptr(__x, __y); }
    };


  template<typename _Arg1, typename _Arg2, typename _Result>
    inline pointer_to_binary_function<_Arg1, _Arg2, _Result>
    ptr_fun(_Result (*__x)(_Arg1, _Arg2))
    { return pointer_to_binary_function<_Arg1, _Arg2, _Result>(__x); }


  template<typename _Tp>
    struct _Identity : public unary_function<_Tp,_Tp>
    {
      _Tp&
      operator()(_Tp& __x) const
      { return __x; }

      const _Tp&
      operator()(const _Tp& __x) const
      { return __x; }
    };

  template<typename _Pair>
    struct _Select1st : public unary_function<_Pair,
           typename _Pair::first_type>
    {
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
    };

  template<typename _Pair>
    struct _Select2nd : public unary_function<_Pair,
           typename _Pair::second_type>
    {
      typename _Pair::second_type&
      operator()(_Pair& __x) const
      { return __x.second; }

      const typename _Pair::second_type&
      operator()(const _Pair& __x) const
      { return __x.second; }
    };
# 523 "/usr/include/c++/4.4/bits/stl_function.h" 3
  template<typename _Ret, typename _Tp>
    class mem_fun_t : public unary_function<_Tp*, _Ret>
    {
    public:
      explicit
      mem_fun_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
    };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_t : public unary_function<const _Tp*, _Ret>
    {
    public:
      explicit
      const_mem_fun_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p) const
      { return (__p->*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp>
    class mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      mem_fun_ref_t(_Ret (_Tp::*__pf)())
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)();
  };



  template<typename _Ret, typename _Tp>
    class const_mem_fun_ref_t : public unary_function<_Tp, _Ret>
    {
    public:
      explicit
      const_mem_fun_ref_t(_Ret (_Tp::*__pf)() const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r) const
      { return (__r.*_M_f)(); }

    private:
      _Ret (_Tp::*_M_f)() const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_t : public binary_function<_Tp*, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_t : public binary_function<const _Tp*, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp* __p, _Arg __x) const
      { return (__p->*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg))
      : _M_f(__pf) { }

      _Ret
      operator()(_Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg);
    };



  template<typename _Ret, typename _Tp, typename _Arg>
    class const_mem_fun1_ref_t : public binary_function<_Tp, _Arg, _Ret>
    {
    public:
      explicit
      const_mem_fun1_ref_t(_Ret (_Tp::*__pf)(_Arg) const)
      : _M_f(__pf) { }

      _Ret
      operator()(const _Tp& __r, _Arg __x) const
      { return (__r.*_M_f)(__x); }

    private:
      _Ret (_Tp::*_M_f)(_Arg) const;
    };



  template<typename _Ret, typename _Tp>
    inline mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)())
    { return mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_t<_Ret, _Tp>
    mem_fun(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)())
    { return mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp>
    inline const_mem_fun_ref_t<_Ret, _Tp>
    mem_fun_ref(_Ret (_Tp::*__f)() const)
    { return const_mem_fun_ref_t<_Ret, _Tp>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_t<_Ret, _Tp, _Arg>
    mem_fun(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg))
    { return mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }

  template<typename _Ret, typename _Tp, typename _Arg>
    inline const_mem_fun1_ref_t<_Ret, _Tp, _Arg>
    mem_fun_ref(_Ret (_Tp::*__f)(_Arg) const)
    { return const_mem_fun1_ref_t<_Ret, _Tp, _Arg>(__f); }



}


# 1 "/usr/include/c++/4.4/backward/binders.h" 1 3
# 60 "/usr/include/c++/4.4/backward/binders.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {
# 96 "/usr/include/c++/4.4/backward/binders.h" 3
  template<typename _Operation>
    class binder1st
    : public unary_function<typename _Operation::second_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::first_argument_type value;

    public:
      binder1st(const _Operation& __x,
  const typename _Operation::first_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }



      typename _Operation::result_type
      operator()(typename _Operation::second_argument_type& __x) const
      { return op(value, __x); }
    } ;


  template<typename _Operation, typename _Tp>
    inline binder1st<_Operation>
    bind1st(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::first_argument_type _Arg1_type;
      return binder1st<_Operation>(__fn, _Arg1_type(__x));
    }


  template<typename _Operation>
    class binder2nd
    : public unary_function<typename _Operation::first_argument_type,
       typename _Operation::result_type>
    {
    protected:
      _Operation op;
      typename _Operation::second_argument_type value;

    public:
      binder2nd(const _Operation& __x,
  const typename _Operation::second_argument_type& __y)
      : op(__x), value(__y) { }

      typename _Operation::result_type
      operator()(const typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }



      typename _Operation::result_type
      operator()(typename _Operation::first_argument_type& __x) const
      { return op(__x, value); }
    } ;


  template<typename _Operation, typename _Tp>
    inline binder2nd<_Operation>
    bind2nd(const _Operation& __fn, const _Tp& __x)
    {
      typedef typename _Operation::second_argument_type _Arg2_type;
      return binder2nd<_Operation>(__fn, _Arg2_type(__x));
    }


}
# 713 "/usr/include/c++/4.4/bits/stl_function.h" 2 3
# 51 "/usr/include/c++/4.4/string" 2 3


# 1 "/usr/include/c++/4.4/bits/basic_string.h" 1 3
# 39 "/usr/include/c++/4.4/bits/basic_string.h" 3
       
# 40 "/usr/include/c++/4.4/bits/basic_string.h" 3

# 1 "/usr/include/c++/4.4/ext/atomicity.h" 1 3
# 34 "/usr/include/c++/4.4/ext/atomicity.h" 3
# 1 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr.h" 1 3
# 30 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr.h" 3
#pragma GCC visibility push(default)
# 162 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr.h" 3
# 1 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 1 3
# 41 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
# 1 "/usr/include/pthread.h" 1 3 4
# 25 "/usr/include/pthread.h" 3 4
# 1 "/usr/include/sched.h" 1 3 4
# 29 "/usr/include/sched.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 30 "/usr/include/sched.h" 2 3 4


# 1 "/usr/include/time.h" 1 3 4
# 33 "/usr/include/sched.h" 2 3 4


# 1 "/usr/include/bits/sched.h" 1 3 4
# 71 "/usr/include/bits/sched.h" 3 4
struct sched_param
  {
    int __sched_priority;
  };

extern "C" {



extern int clone (int (*__fn) (void *__arg), void *__child_stack,
    int __flags, void *__arg, ...) throw ();


extern int unshare (int __flags) throw ();


extern int sched_getcpu (void) throw ();


}







struct __sched_param
  {
    int __sched_priority;
  };
# 113 "/usr/include/bits/sched.h" 3 4
typedef unsigned long int __cpu_mask;






typedef struct
{
  __cpu_mask __bits[1024 / (8 * sizeof (__cpu_mask))];
} cpu_set_t;
# 196 "/usr/include/bits/sched.h" 3 4
extern "C" {

extern int __sched_cpucount (size_t __setsize, const cpu_set_t *__setp)
  throw ();
extern cpu_set_t *__sched_cpualloc (size_t __count) throw () ;
extern void __sched_cpufree (cpu_set_t *__set) throw ();

}
# 36 "/usr/include/sched.h" 2 3 4




extern "C" {


extern int sched_setparam (__pid_t __pid, __const struct sched_param *__param)
     throw ();


extern int sched_getparam (__pid_t __pid, struct sched_param *__param) throw ();


extern int sched_setscheduler (__pid_t __pid, int __policy,
          __const struct sched_param *__param) throw ();


extern int sched_getscheduler (__pid_t __pid) throw ();


extern int sched_yield (void) throw ();


extern int sched_get_priority_max (int __algorithm) throw ();


extern int sched_get_priority_min (int __algorithm) throw ();


extern int sched_rr_get_interval (__pid_t __pid, struct timespec *__t) throw ();
# 110 "/usr/include/sched.h" 3 4
extern int sched_setaffinity (__pid_t __pid, size_t __cpusetsize,
         __const cpu_set_t *__cpuset) throw ();


extern int sched_getaffinity (__pid_t __pid, size_t __cpusetsize,
         cpu_set_t *__cpuset) throw ();


}
# 26 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/time.h" 1 3 4
# 30 "/usr/include/time.h" 3 4
extern "C" {







# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 39 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/bits/time.h" 1 3 4
# 43 "/usr/include/time.h" 2 3 4
# 131 "/usr/include/time.h" 3 4


struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  __const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;
# 180 "/usr/include/time.h" 3 4



extern clock_t clock (void) throw ();


extern time_t time (time_t *__timer) throw ();


extern double difftime (time_t __time1, time_t __time0)
     throw () __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) throw ();





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   __const char *__restrict __format,
   __const struct tm *__restrict __tp) throw ();





extern char *strptime (__const char *__restrict __s,
         __const char *__restrict __fmt, struct tm *__tp)
     throw ();







extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     __const char *__restrict __format,
     __const struct tm *__restrict __tp,
     __locale_t __loc) throw ();



extern char *strptime_l (__const char *__restrict __s,
    __const char *__restrict __fmt, struct tm *__tp,
    __locale_t __loc) throw ();






extern struct tm *gmtime (__const time_t *__timer) throw ();



extern struct tm *localtime (__const time_t *__timer) throw ();





extern struct tm *gmtime_r (__const time_t *__restrict __timer,
       struct tm *__restrict __tp) throw ();



extern struct tm *localtime_r (__const time_t *__restrict __timer,
          struct tm *__restrict __tp) throw ();





extern char *asctime (__const struct tm *__tp) throw ();


extern char *ctime (__const time_t *__timer) throw ();







extern char *asctime_r (__const struct tm *__restrict __tp,
   char *__restrict __buf) throw ();


extern char *ctime_r (__const time_t *__restrict __timer,
        char *__restrict __buf) throw ();




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) throw ();



extern int daylight;
extern long int timezone;





extern int stime (__const time_t *__when) throw ();
# 313 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) throw ();


extern time_t timelocal (struct tm *__tp) throw ();


extern int dysize (int __year) throw () __attribute__ ((__const__));
# 328 "/usr/include/time.h" 3 4
extern int nanosleep (__const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) throw ();


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) throw ();


extern int clock_settime (clockid_t __clock_id, __const struct timespec *__tp)
     throw ();






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       __const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) throw ();




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) throw ();


extern int timer_delete (timer_t __timerid) throw ();


extern int timer_settime (timer_t __timerid, int __flags,
     __const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) throw ();


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     throw ();


extern int timer_getoverrun (timer_t __timerid) throw ();
# 390 "/usr/include/time.h" 3 4
extern int getdate_err;
# 399 "/usr/include/time.h" 3 4
extern struct tm *getdate (__const char *__string);
# 413 "/usr/include/time.h" 3 4
extern int getdate_r (__const char *__restrict __string,
        struct tm *__restrict __resbufp);


}
# 27 "/usr/include/pthread.h" 2 3 4


# 1 "/usr/include/signal.h" 1 3 4
# 31 "/usr/include/signal.h" 3 4
extern "C" {

# 1 "/usr/include/bits/sigset.h" 1 3 4
# 34 "/usr/include/signal.h" 2 3 4
# 408 "/usr/include/signal.h" 3 4
}
# 30 "/usr/include/pthread.h" 2 3 4

# 1 "/usr/include/bits/setjmp.h" 1 3 4
# 27 "/usr/include/bits/setjmp.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/setjmp.h" 2 3 4




typedef long int __jmp_buf[8];
# 32 "/usr/include/pthread.h" 2 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 33 "/usr/include/pthread.h" 2 3 4



enum
{
  PTHREAD_CREATE_JOINABLE,

  PTHREAD_CREATE_DETACHED

};



enum
{
  PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_ADAPTIVE_NP

  ,
  PTHREAD_MUTEX_NORMAL = PTHREAD_MUTEX_TIMED_NP,
  PTHREAD_MUTEX_RECURSIVE = PTHREAD_MUTEX_RECURSIVE_NP,
  PTHREAD_MUTEX_ERRORCHECK = PTHREAD_MUTEX_ERRORCHECK_NP,
  PTHREAD_MUTEX_DEFAULT = PTHREAD_MUTEX_NORMAL



  , PTHREAD_MUTEX_FAST_NP = PTHREAD_MUTEX_TIMED_NP

};




enum
{
  PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_STALLED_NP = PTHREAD_MUTEX_STALLED,
  PTHREAD_MUTEX_ROBUST,
  PTHREAD_MUTEX_ROBUST_NP = PTHREAD_MUTEX_ROBUST
};





enum
{
  PTHREAD_PRIO_NONE,
  PTHREAD_PRIO_INHERIT,
  PTHREAD_PRIO_PROTECT
};
# 117 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_RWLOCK_PREFER_READER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NP,
  PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP,
  PTHREAD_RWLOCK_DEFAULT_NP = PTHREAD_RWLOCK_PREFER_READER_NP
};
# 149 "/usr/include/pthread.h" 3 4
enum
{
  PTHREAD_INHERIT_SCHED,

  PTHREAD_EXPLICIT_SCHED

};



enum
{
  PTHREAD_SCOPE_SYSTEM,

  PTHREAD_SCOPE_PROCESS

};



enum
{
  PTHREAD_PROCESS_PRIVATE,

  PTHREAD_PROCESS_SHARED

};
# 184 "/usr/include/pthread.h" 3 4
struct _pthread_cleanup_buffer
{
  void (*__routine) (void *);
  void *__arg;
  int __canceltype;
  struct _pthread_cleanup_buffer *__prev;
};


enum
{
  PTHREAD_CANCEL_ENABLE,

  PTHREAD_CANCEL_DISABLE

};
enum
{
  PTHREAD_CANCEL_DEFERRED,

  PTHREAD_CANCEL_ASYNCHRONOUS

};
# 222 "/usr/include/pthread.h" 3 4
extern "C" {




extern int pthread_create (pthread_t *__restrict __newthread,
      __const pthread_attr_t *__restrict __attr,
      void *(*__start_routine) (void *),
      void *__restrict __arg) throw () __attribute__ ((__nonnull__ (1, 3)));





extern void pthread_exit (void *__retval) __attribute__ ((__noreturn__));







extern int pthread_join (pthread_t __th, void **__thread_return);




extern int pthread_tryjoin_np (pthread_t __th, void **__thread_return) throw ();







extern int pthread_timedjoin_np (pthread_t __th, void **__thread_return,
     __const struct timespec *__abstime);






extern int pthread_detach (pthread_t __th) throw ();



extern pthread_t pthread_self (void) throw () __attribute__ ((__const__));


extern int pthread_equal (pthread_t __thread1, pthread_t __thread2) throw ();







extern int pthread_attr_init (pthread_attr_t *__attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_destroy (pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getdetachstate (__const pthread_attr_t *__attr,
     int *__detachstate)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setdetachstate (pthread_attr_t *__attr,
     int __detachstate)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getguardsize (__const pthread_attr_t *__attr,
          size_t *__guardsize)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setguardsize (pthread_attr_t *__attr,
          size_t __guardsize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getschedparam (__const pthread_attr_t *__restrict
           __attr,
           struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedparam (pthread_attr_t *__restrict __attr,
           __const struct sched_param *__restrict
           __param) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_getschedpolicy (__const pthread_attr_t *__restrict
     __attr, int *__restrict __policy)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setschedpolicy (pthread_attr_t *__attr, int __policy)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getinheritsched (__const pthread_attr_t *__restrict
      __attr, int *__restrict __inherit)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setinheritsched (pthread_attr_t *__attr,
      int __inherit)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getscope (__const pthread_attr_t *__restrict __attr,
      int *__restrict __scope)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_attr_setscope (pthread_attr_t *__attr, int __scope)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_attr_getstackaddr (__const pthread_attr_t *__restrict
          __attr, void **__restrict __stackaddr)
     throw () __attribute__ ((__nonnull__ (1, 2))) __attribute__ ((__deprecated__));





extern int pthread_attr_setstackaddr (pthread_attr_t *__attr,
          void *__stackaddr)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__));


extern int pthread_attr_getstacksize (__const pthread_attr_t *__restrict
          __attr, size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_attr_setstacksize (pthread_attr_t *__attr,
          size_t __stacksize)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_attr_getstack (__const pthread_attr_t *__restrict __attr,
      void **__restrict __stackaddr,
      size_t *__restrict __stacksize)
     throw () __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_attr_setstack (pthread_attr_t *__attr, void *__stackaddr,
      size_t __stacksize) throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_attr_setaffinity_np (pthread_attr_t *__attr,
     size_t __cpusetsize,
     __const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern int pthread_attr_getaffinity_np (__const pthread_attr_t *__attr,
     size_t __cpusetsize,
     cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (1, 3)));





extern int pthread_getattr_np (pthread_t __th, pthread_attr_t *__attr)
     throw () __attribute__ ((__nonnull__ (2)));







extern int pthread_setschedparam (pthread_t __target_thread, int __policy,
      __const struct sched_param *__param)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getschedparam (pthread_t __target_thread,
      int *__restrict __policy,
      struct sched_param *__restrict __param)
     throw () __attribute__ ((__nonnull__ (2, 3)));


extern int pthread_setschedprio (pthread_t __target_thread, int __prio)
     throw ();




extern int pthread_getconcurrency (void) throw ();


extern int pthread_setconcurrency (int __level) throw ();







extern int pthread_yield (void) throw ();




extern int pthread_setaffinity_np (pthread_t __th, size_t __cpusetsize,
       __const cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));


extern int pthread_getaffinity_np (pthread_t __th, size_t __cpusetsize,
       cpu_set_t *__cpuset)
     throw () __attribute__ ((__nonnull__ (3)));
# 468 "/usr/include/pthread.h" 3 4
extern int pthread_once (pthread_once_t *__once_control,
    void (*__init_routine) (void)) __attribute__ ((__nonnull__ (1, 2)));
# 480 "/usr/include/pthread.h" 3 4
extern int pthread_setcancelstate (int __state, int *__oldstate);



extern int pthread_setcanceltype (int __type, int *__oldtype);


extern int pthread_cancel (pthread_t __th);




extern void pthread_testcancel (void);




typedef struct
{
  struct
  {
    __jmp_buf __cancel_jmp_buf;
    int __mask_was_saved;
  } __cancel_jmp_buf[1];
  void *__pad[4];
} __pthread_unwind_buf_t __attribute__ ((__aligned__));
# 514 "/usr/include/pthread.h" 3 4
struct __pthread_cleanup_frame
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;
};




class __pthread_cleanup_class
{
  void (*__cancel_routine) (void *);
  void *__cancel_arg;
  int __do_it;
  int __cancel_type;

 public:
  __pthread_cleanup_class (void (*__fct) (void *), void *__arg)
    : __cancel_routine (__fct), __cancel_arg (__arg), __do_it (1) { }
  ~__pthread_cleanup_class () { if (__do_it) __cancel_routine (__cancel_arg); }
  void __setdoit (int __newval) { __do_it = __newval; }
  void __defer () { pthread_setcanceltype (PTHREAD_CANCEL_DEFERRED,
        &__cancel_type); }
  void __restore () const { pthread_setcanceltype (__cancel_type, 0); }
};
# 716 "/usr/include/pthread.h" 3 4
struct __jmp_buf_tag;
extern int __sigsetjmp (struct __jmp_buf_tag *__env, int __savemask) throw ();





extern int pthread_mutex_init (pthread_mutex_t *__mutex,
          __const pthread_mutexattr_t *__mutexattr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_destroy (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_trylock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutex_lock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutex_timedlock (pthread_mutex_t *__restrict __mutex,
                                    __const struct timespec *__restrict
                                    __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_unlock (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));




extern int pthread_mutex_getprioceiling (__const pthread_mutex_t *
      __restrict __mutex,
      int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutex_setprioceiling (pthread_mutex_t *__restrict __mutex,
      int __prioceiling,
      int *__restrict __old_ceiling)
     throw () __attribute__ ((__nonnull__ (1, 3)));





extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutex_consistent_np (pthread_mutex_t *__mutex)
     throw () __attribute__ ((__nonnull__ (1)));
# 782 "/usr/include/pthread.h" 3 4
extern int pthread_mutexattr_init (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_destroy (pthread_mutexattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getpshared (__const pthread_mutexattr_t *
      __restrict __attr,
      int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setpshared (pthread_mutexattr_t *__attr,
      int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_mutexattr_gettype (__const pthread_mutexattr_t *__restrict
          __attr, int *__restrict __kind)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int pthread_mutexattr_settype (pthread_mutexattr_t *__attr, int __kind)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprotocol (__const pthread_mutexattr_t *
       __restrict __attr,
       int *__restrict __protocol)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setprotocol (pthread_mutexattr_t *__attr,
       int __protocol)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_mutexattr_getprioceiling (__const pthread_mutexattr_t *
          __restrict __attr,
          int *__restrict __prioceiling)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_mutexattr_setprioceiling (pthread_mutexattr_t *__attr,
          int __prioceiling)
     throw () __attribute__ ((__nonnull__ (1)));




extern int pthread_mutexattr_getrobust (__const pthread_mutexattr_t *__attr,
     int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern int pthread_mutexattr_getrobust_np (__const pthread_mutexattr_t *__attr,
        int *__robustness)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_mutexattr_setrobust (pthread_mutexattr_t *__attr,
     int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));

extern int pthread_mutexattr_setrobust_np (pthread_mutexattr_t *__attr,
        int __robustness)
     throw () __attribute__ ((__nonnull__ (1)));
# 864 "/usr/include/pthread.h" 3 4
extern int pthread_rwlock_init (pthread_rwlock_t *__restrict __rwlock,
    __const pthread_rwlockattr_t *__restrict
    __attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_destroy (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_rdlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_tryrdlock (pthread_rwlock_t *__rwlock)
  throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedrdlock (pthread_rwlock_t *__restrict __rwlock,
           __const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_wrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlock_trywrlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_rwlock_timedwrlock (pthread_rwlock_t *__restrict __rwlock,
           __const struct timespec *__restrict
           __abstime) throw () __attribute__ ((__nonnull__ (1, 2)));



extern int pthread_rwlock_unlock (pthread_rwlock_t *__rwlock)
     throw () __attribute__ ((__nonnull__ (1)));





extern int pthread_rwlockattr_init (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_destroy (pthread_rwlockattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getpshared (__const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setpshared (pthread_rwlockattr_t *__attr,
       int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_rwlockattr_getkind_np (__const pthread_rwlockattr_t *
       __restrict __attr,
       int *__restrict __pref)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_rwlockattr_setkind_np (pthread_rwlockattr_t *__attr,
       int __pref) throw () __attribute__ ((__nonnull__ (1)));







extern int pthread_cond_init (pthread_cond_t *__restrict __cond,
         __const pthread_condattr_t *__restrict
         __cond_attr) throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_destroy (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_signal (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_cond_broadcast (pthread_cond_t *__cond)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_cond_wait (pthread_cond_t *__restrict __cond,
         pthread_mutex_t *__restrict __mutex)
     __attribute__ ((__nonnull__ (1, 2)));
# 976 "/usr/include/pthread.h" 3 4
extern int pthread_cond_timedwait (pthread_cond_t *__restrict __cond,
       pthread_mutex_t *__restrict __mutex,
       __const struct timespec *__restrict
       __abstime) __attribute__ ((__nonnull__ (1, 2, 3)));




extern int pthread_condattr_init (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_destroy (pthread_condattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_condattr_getpshared (__const pthread_condattr_t *
                                        __restrict __attr,
                                        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setpshared (pthread_condattr_t *__attr,
                                        int __pshared) throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_condattr_getclock (__const pthread_condattr_t *
          __restrict __attr,
          __clockid_t *__restrict __clock_id)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_condattr_setclock (pthread_condattr_t *__attr,
          __clockid_t __clock_id)
     throw () __attribute__ ((__nonnull__ (1)));
# 1020 "/usr/include/pthread.h" 3 4
extern int pthread_spin_init (pthread_spinlock_t *__lock, int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_destroy (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_lock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_trylock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_spin_unlock (pthread_spinlock_t *__lock)
     throw () __attribute__ ((__nonnull__ (1)));






extern int pthread_barrier_init (pthread_barrier_t *__restrict __barrier,
     __const pthread_barrierattr_t *__restrict
     __attr, unsigned int __count)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_destroy (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrier_wait (pthread_barrier_t *__barrier)
     throw () __attribute__ ((__nonnull__ (1)));



extern int pthread_barrierattr_init (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_destroy (pthread_barrierattr_t *__attr)
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_barrierattr_getpshared (__const pthread_barrierattr_t *
        __restrict __attr,
        int *__restrict __pshared)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int pthread_barrierattr_setpshared (pthread_barrierattr_t *__attr,
                                           int __pshared)
     throw () __attribute__ ((__nonnull__ (1)));
# 1087 "/usr/include/pthread.h" 3 4
extern int pthread_key_create (pthread_key_t *__key,
          void (*__destr_function) (void *))
     throw () __attribute__ ((__nonnull__ (1)));


extern int pthread_key_delete (pthread_key_t __key) throw ();


extern void *pthread_getspecific (pthread_key_t __key) throw ();


extern int pthread_setspecific (pthread_key_t __key,
    __const void *__pointer) throw () ;




extern int pthread_getcpuclockid (pthread_t __thread_id,
      __clockid_t *__clock_id)
     throw () __attribute__ ((__nonnull__ (2)));
# 1121 "/usr/include/pthread.h" 3 4
extern int pthread_atfork (void (*__prepare) (void),
      void (*__parent) (void),
      void (*__child) (void)) throw ();
# 1135 "/usr/include/pthread.h" 3 4
}
# 42 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 2 3
# 1 "/usr/include/unistd.h" 1 3 4
# 28 "/usr/include/unistd.h" 3 4
extern "C" {
# 203 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/bits/posix_opt.h" 1 3 4
# 204 "/usr/include/unistd.h" 2 3 4



# 1 "/usr/include/bits/environments.h" 1 3 4
# 23 "/usr/include/bits/environments.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 24 "/usr/include/bits/environments.h" 2 3 4
# 208 "/usr/include/unistd.h" 2 3 4
# 227 "/usr/include/unistd.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 228 "/usr/include/unistd.h" 2 3 4
# 268 "/usr/include/unistd.h" 3 4
typedef __intptr_t intptr_t;






typedef __socklen_t socklen_t;
# 288 "/usr/include/unistd.h" 3 4
extern int access (__const char *__name, int __type) throw () __attribute__ ((__nonnull__ (1)));




extern int euidaccess (__const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));


extern int eaccess (__const char *__name, int __type)
     throw () __attribute__ ((__nonnull__ (1)));






extern int faccessat (int __fd, __const char *__file, int __type, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;
# 331 "/usr/include/unistd.h" 3 4
extern __off_t lseek (int __fd, __off_t __offset, int __whence) throw ();
# 342 "/usr/include/unistd.h" 3 4
extern __off64_t lseek64 (int __fd, __off64_t __offset, int __whence)
     throw ();






extern int close (int __fd);






extern ssize_t read (int __fd, void *__buf, size_t __nbytes) ;





extern ssize_t write (int __fd, __const void *__buf, size_t __n) ;
# 373 "/usr/include/unistd.h" 3 4
extern ssize_t pread (int __fd, void *__buf, size_t __nbytes,
        __off_t __offset) ;






extern ssize_t pwrite (int __fd, __const void *__buf, size_t __n,
         __off_t __offset) ;
# 401 "/usr/include/unistd.h" 3 4
extern ssize_t pread64 (int __fd, void *__buf, size_t __nbytes,
   __off64_t __offset) ;


extern ssize_t pwrite64 (int __fd, __const void *__buf, size_t __n,
    __off64_t __offset) ;







extern int pipe (int __pipedes[2]) throw () ;




extern int pipe2 (int __pipedes[2], int __flags) throw () ;
# 429 "/usr/include/unistd.h" 3 4
extern unsigned int alarm (unsigned int __seconds) throw ();
# 441 "/usr/include/unistd.h" 3 4
extern unsigned int sleep (unsigned int __seconds);






extern __useconds_t ualarm (__useconds_t __value, __useconds_t __interval)
     throw ();






extern int usleep (__useconds_t __useconds);
# 465 "/usr/include/unistd.h" 3 4
extern int pause (void);



extern int chown (__const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchown (int __fd, __uid_t __owner, __gid_t __group) throw () ;




extern int lchown (__const char *__file, __uid_t __owner, __gid_t __group)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int fchownat (int __fd, __const char *__file, __uid_t __owner,
       __gid_t __group, int __flag)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int chdir (__const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern int fchdir (int __fd) throw () ;
# 507 "/usr/include/unistd.h" 3 4
extern char *getcwd (char *__buf, size_t __size) throw () ;





extern char *get_current_dir_name (void) throw ();






extern char *getwd (char *__buf)
     throw () __attribute__ ((__nonnull__ (1))) __attribute__ ((__deprecated__)) ;




extern int dup (int __fd) throw () ;


extern int dup2 (int __fd, int __fd2) throw ();




extern int dup3 (int __fd, int __fd2, int __flags) throw ();



extern char **__environ;

extern char **environ;





extern int execve (__const char *__path, char *__const __argv[],
     char *__const __envp[]) throw () __attribute__ ((__nonnull__ (1)));




extern int fexecve (int __fd, char *__const __argv[], char *__const __envp[])
     throw ();




extern int execv (__const char *__path, char *__const __argv[])
     throw () __attribute__ ((__nonnull__ (1)));



extern int execle (__const char *__path, __const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1)));



extern int execl (__const char *__path, __const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1)));



extern int execvp (__const char *__file, char *__const __argv[])
     throw () __attribute__ ((__nonnull__ (1)));




extern int execlp (__const char *__file, __const char *__arg, ...)
     throw () __attribute__ ((__nonnull__ (1)));




extern int execvpe (__const char *__file, char *__const __argv[],
      char *__const __envp[])
     throw () __attribute__ ((__nonnull__ (1)));





extern int nice (int __inc) throw () ;




extern void _exit (int __status) __attribute__ ((__noreturn__));





# 1 "/usr/include/bits/confname.h" 1 3 4
# 26 "/usr/include/bits/confname.h" 3 4
enum
  {
    _PC_LINK_MAX,

    _PC_MAX_CANON,

    _PC_MAX_INPUT,

    _PC_NAME_MAX,

    _PC_PATH_MAX,

    _PC_PIPE_BUF,

    _PC_CHOWN_RESTRICTED,

    _PC_NO_TRUNC,

    _PC_VDISABLE,

    _PC_SYNC_IO,

    _PC_ASYNC_IO,

    _PC_PRIO_IO,

    _PC_SOCK_MAXBUF,

    _PC_FILESIZEBITS,

    _PC_REC_INCR_XFER_SIZE,

    _PC_REC_MAX_XFER_SIZE,

    _PC_REC_MIN_XFER_SIZE,

    _PC_REC_XFER_ALIGN,

    _PC_ALLOC_SIZE_MIN,

    _PC_SYMLINK_MAX,

    _PC_2_SYMLINKS

  };


enum
  {
    _SC_ARG_MAX,

    _SC_CHILD_MAX,

    _SC_CLK_TCK,

    _SC_NGROUPS_MAX,

    _SC_OPEN_MAX,

    _SC_STREAM_MAX,

    _SC_TZNAME_MAX,

    _SC_JOB_CONTROL,

    _SC_SAVED_IDS,

    _SC_REALTIME_SIGNALS,

    _SC_PRIORITY_SCHEDULING,

    _SC_TIMERS,

    _SC_ASYNCHRONOUS_IO,

    _SC_PRIORITIZED_IO,

    _SC_SYNCHRONIZED_IO,

    _SC_FSYNC,

    _SC_MAPPED_FILES,

    _SC_MEMLOCK,

    _SC_MEMLOCK_RANGE,

    _SC_MEMORY_PROTECTION,

    _SC_MESSAGE_PASSING,

    _SC_SEMAPHORES,

    _SC_SHARED_MEMORY_OBJECTS,

    _SC_AIO_LISTIO_MAX,

    _SC_AIO_MAX,

    _SC_AIO_PRIO_DELTA_MAX,

    _SC_DELAYTIMER_MAX,

    _SC_MQ_OPEN_MAX,

    _SC_MQ_PRIO_MAX,

    _SC_VERSION,

    _SC_PAGESIZE,


    _SC_RTSIG_MAX,

    _SC_SEM_NSEMS_MAX,

    _SC_SEM_VALUE_MAX,

    _SC_SIGQUEUE_MAX,

    _SC_TIMER_MAX,




    _SC_BC_BASE_MAX,

    _SC_BC_DIM_MAX,

    _SC_BC_SCALE_MAX,

    _SC_BC_STRING_MAX,

    _SC_COLL_WEIGHTS_MAX,

    _SC_EQUIV_CLASS_MAX,

    _SC_EXPR_NEST_MAX,

    _SC_LINE_MAX,

    _SC_RE_DUP_MAX,

    _SC_CHARCLASS_NAME_MAX,


    _SC_2_VERSION,

    _SC_2_C_BIND,

    _SC_2_C_DEV,

    _SC_2_FORT_DEV,

    _SC_2_FORT_RUN,

    _SC_2_SW_DEV,

    _SC_2_LOCALEDEF,


    _SC_PII,

    _SC_PII_XTI,

    _SC_PII_SOCKET,

    _SC_PII_INTERNET,

    _SC_PII_OSI,

    _SC_POLL,

    _SC_SELECT,

    _SC_UIO_MAXIOV,

    _SC_IOV_MAX = _SC_UIO_MAXIOV,

    _SC_PII_INTERNET_STREAM,

    _SC_PII_INTERNET_DGRAM,

    _SC_PII_OSI_COTS,

    _SC_PII_OSI_CLTS,

    _SC_PII_OSI_M,

    _SC_T_IOV_MAX,



    _SC_THREADS,

    _SC_THREAD_SAFE_FUNCTIONS,

    _SC_GETGR_R_SIZE_MAX,

    _SC_GETPW_R_SIZE_MAX,

    _SC_LOGIN_NAME_MAX,

    _SC_TTY_NAME_MAX,

    _SC_THREAD_DESTRUCTOR_ITERATIONS,

    _SC_THREAD_KEYS_MAX,

    _SC_THREAD_STACK_MIN,

    _SC_THREAD_THREADS_MAX,

    _SC_THREAD_ATTR_STACKADDR,

    _SC_THREAD_ATTR_STACKSIZE,

    _SC_THREAD_PRIORITY_SCHEDULING,

    _SC_THREAD_PRIO_INHERIT,

    _SC_THREAD_PRIO_PROTECT,

    _SC_THREAD_PROCESS_SHARED,


    _SC_NPROCESSORS_CONF,

    _SC_NPROCESSORS_ONLN,

    _SC_PHYS_PAGES,

    _SC_AVPHYS_PAGES,

    _SC_ATEXIT_MAX,

    _SC_PASS_MAX,


    _SC_XOPEN_VERSION,

    _SC_XOPEN_XCU_VERSION,

    _SC_XOPEN_UNIX,

    _SC_XOPEN_CRYPT,

    _SC_XOPEN_ENH_I18N,

    _SC_XOPEN_SHM,


    _SC_2_CHAR_TERM,

    _SC_2_C_VERSION,

    _SC_2_UPE,


    _SC_XOPEN_XPG2,

    _SC_XOPEN_XPG3,

    _SC_XOPEN_XPG4,


    _SC_CHAR_BIT,

    _SC_CHAR_MAX,

    _SC_CHAR_MIN,

    _SC_INT_MAX,

    _SC_INT_MIN,

    _SC_LONG_BIT,

    _SC_WORD_BIT,

    _SC_MB_LEN_MAX,

    _SC_NZERO,

    _SC_SSIZE_MAX,

    _SC_SCHAR_MAX,

    _SC_SCHAR_MIN,

    _SC_SHRT_MAX,

    _SC_SHRT_MIN,

    _SC_UCHAR_MAX,

    _SC_UINT_MAX,

    _SC_ULONG_MAX,

    _SC_USHRT_MAX,


    _SC_NL_ARGMAX,

    _SC_NL_LANGMAX,

    _SC_NL_MSGMAX,

    _SC_NL_NMAX,

    _SC_NL_SETMAX,

    _SC_NL_TEXTMAX,


    _SC_XBS5_ILP32_OFF32,

    _SC_XBS5_ILP32_OFFBIG,

    _SC_XBS5_LP64_OFF64,

    _SC_XBS5_LPBIG_OFFBIG,


    _SC_XOPEN_LEGACY,

    _SC_XOPEN_REALTIME,

    _SC_XOPEN_REALTIME_THREADS,


    _SC_ADVISORY_INFO,

    _SC_BARRIERS,

    _SC_BASE,

    _SC_C_LANG_SUPPORT,

    _SC_C_LANG_SUPPORT_R,

    _SC_CLOCK_SELECTION,

    _SC_CPUTIME,

    _SC_THREAD_CPUTIME,

    _SC_DEVICE_IO,

    _SC_DEVICE_SPECIFIC,

    _SC_DEVICE_SPECIFIC_R,

    _SC_FD_MGMT,

    _SC_FIFO,

    _SC_PIPE,

    _SC_FILE_ATTRIBUTES,

    _SC_FILE_LOCKING,

    _SC_FILE_SYSTEM,

    _SC_MONOTONIC_CLOCK,

    _SC_MULTI_PROCESS,

    _SC_SINGLE_PROCESS,

    _SC_NETWORKING,

    _SC_READER_WRITER_LOCKS,

    _SC_SPIN_LOCKS,

    _SC_REGEXP,

    _SC_REGEX_VERSION,

    _SC_SHELL,

    _SC_SIGNALS,

    _SC_SPAWN,

    _SC_SPORADIC_SERVER,

    _SC_THREAD_SPORADIC_SERVER,

    _SC_SYSTEM_DATABASE,

    _SC_SYSTEM_DATABASE_R,

    _SC_TIMEOUTS,

    _SC_TYPED_MEMORY_OBJECTS,

    _SC_USER_GROUPS,

    _SC_USER_GROUPS_R,

    _SC_2_PBS,

    _SC_2_PBS_ACCOUNTING,

    _SC_2_PBS_LOCATE,

    _SC_2_PBS_MESSAGE,

    _SC_2_PBS_TRACK,

    _SC_SYMLOOP_MAX,

    _SC_STREAMS,

    _SC_2_PBS_CHECKPOINT,


    _SC_V6_ILP32_OFF32,

    _SC_V6_ILP32_OFFBIG,

    _SC_V6_LP64_OFF64,

    _SC_V6_LPBIG_OFFBIG,


    _SC_HOST_NAME_MAX,

    _SC_TRACE,

    _SC_TRACE_EVENT_FILTER,

    _SC_TRACE_INHERIT,

    _SC_TRACE_LOG,


    _SC_LEVEL1_ICACHE_SIZE,

    _SC_LEVEL1_ICACHE_ASSOC,

    _SC_LEVEL1_ICACHE_LINESIZE,

    _SC_LEVEL1_DCACHE_SIZE,

    _SC_LEVEL1_DCACHE_ASSOC,

    _SC_LEVEL1_DCACHE_LINESIZE,

    _SC_LEVEL2_CACHE_SIZE,

    _SC_LEVEL2_CACHE_ASSOC,

    _SC_LEVEL2_CACHE_LINESIZE,

    _SC_LEVEL3_CACHE_SIZE,

    _SC_LEVEL3_CACHE_ASSOC,

    _SC_LEVEL3_CACHE_LINESIZE,

    _SC_LEVEL4_CACHE_SIZE,

    _SC_LEVEL4_CACHE_ASSOC,

    _SC_LEVEL4_CACHE_LINESIZE,



    _SC_IPV6 = _SC_LEVEL1_ICACHE_SIZE + 50,

    _SC_RAW_SOCKETS,


    _SC_V7_ILP32_OFF32,

    _SC_V7_ILP32_OFFBIG,

    _SC_V7_LP64_OFF64,

    _SC_V7_LPBIG_OFFBIG,


    _SC_SS_REPL_MAX,


    _SC_TRACE_EVENT_NAME_MAX,

    _SC_TRACE_NAME_MAX,

    _SC_TRACE_SYS_MAX,

    _SC_TRACE_USER_EVENT_MAX,


    _SC_XOPEN_STREAMS,


    _SC_THREAD_ROBUST_PRIO_INHERIT,

    _SC_THREAD_ROBUST_PRIO_PROTECT

  };


enum
  {
    _CS_PATH,


    _CS_V6_WIDTH_RESTRICTED_ENVS,



    _CS_GNU_LIBC_VERSION,

    _CS_GNU_LIBPTHREAD_VERSION,


    _CS_V5_WIDTH_RESTRICTED_ENVS,



    _CS_V7_WIDTH_RESTRICTED_ENVS,



    _CS_LFS_CFLAGS = 1000,

    _CS_LFS_LDFLAGS,

    _CS_LFS_LIBS,

    _CS_LFS_LINTFLAGS,

    _CS_LFS64_CFLAGS,

    _CS_LFS64_LDFLAGS,

    _CS_LFS64_LIBS,

    _CS_LFS64_LINTFLAGS,


    _CS_XBS5_ILP32_OFF32_CFLAGS = 1100,

    _CS_XBS5_ILP32_OFF32_LDFLAGS,

    _CS_XBS5_ILP32_OFF32_LIBS,

    _CS_XBS5_ILP32_OFF32_LINTFLAGS,

    _CS_XBS5_ILP32_OFFBIG_CFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LDFLAGS,

    _CS_XBS5_ILP32_OFFBIG_LIBS,

    _CS_XBS5_ILP32_OFFBIG_LINTFLAGS,

    _CS_XBS5_LP64_OFF64_CFLAGS,

    _CS_XBS5_LP64_OFF64_LDFLAGS,

    _CS_XBS5_LP64_OFF64_LIBS,

    _CS_XBS5_LP64_OFF64_LINTFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_CFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LDFLAGS,

    _CS_XBS5_LPBIG_OFFBIG_LIBS,

    _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V6_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFF32_LIBS,

    _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V6_LP64_OFF64_CFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V6_LP64_OFF64_LIBS,

    _CS_POSIX_V6_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS,


    _CS_POSIX_V7_ILP32_OFF32_CFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFF32_LIBS,

    _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_ILP32_OFFBIG_LIBS,

    _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS,

    _CS_POSIX_V7_LP64_OFF64_CFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LDFLAGS,

    _CS_POSIX_V7_LP64_OFF64_LIBS,

    _CS_POSIX_V7_LP64_OFF64_LINTFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LIBS,

    _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS

  };
# 605 "/usr/include/unistd.h" 2 3 4


extern long int pathconf (__const char *__path, int __name)
     throw () __attribute__ ((__nonnull__ (1)));


extern long int fpathconf (int __fd, int __name) throw ();


extern long int sysconf (int __name) throw ();



extern size_t confstr (int __name, char *__buf, size_t __len) throw ();




extern __pid_t getpid (void) throw ();


extern __pid_t getppid (void) throw ();




extern __pid_t getpgrp (void) throw ();
# 641 "/usr/include/unistd.h" 3 4
extern __pid_t __getpgid (__pid_t __pid) throw ();

extern __pid_t getpgid (__pid_t __pid) throw ();






extern int setpgid (__pid_t __pid, __pid_t __pgid) throw ();
# 667 "/usr/include/unistd.h" 3 4
extern int setpgrp (void) throw ();
# 684 "/usr/include/unistd.h" 3 4
extern __pid_t setsid (void) throw ();



extern __pid_t getsid (__pid_t __pid) throw ();



extern __uid_t getuid (void) throw ();


extern __uid_t geteuid (void) throw ();


extern __gid_t getgid (void) throw ();


extern __gid_t getegid (void) throw ();




extern int getgroups (int __size, __gid_t __list[]) throw () ;



extern int group_member (__gid_t __gid) throw ();






extern int setuid (__uid_t __uid) throw ();




extern int setreuid (__uid_t __ruid, __uid_t __euid) throw ();




extern int seteuid (__uid_t __uid) throw ();






extern int setgid (__gid_t __gid) throw ();




extern int setregid (__gid_t __rgid, __gid_t __egid) throw ();




extern int setegid (__gid_t __gid) throw ();





extern int getresuid (__uid_t *__ruid, __uid_t *__euid, __uid_t *__suid)
     throw ();



extern int getresgid (__gid_t *__rgid, __gid_t *__egid, __gid_t *__sgid)
     throw ();



extern int setresuid (__uid_t __ruid, __uid_t __euid, __uid_t __suid)
     throw ();



extern int setresgid (__gid_t __rgid, __gid_t __egid, __gid_t __sgid)
     throw ();






extern __pid_t fork (void) throw ();






extern __pid_t vfork (void) throw ();





extern char *ttyname (int __fd) throw ();



extern int ttyname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;



extern int isatty (int __fd) throw ();





extern int ttyslot (void) throw ();




extern int link (__const char *__from, __const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int linkat (int __fromfd, __const char *__from, int __tofd,
     __const char *__to, int __flags)
     throw () __attribute__ ((__nonnull__ (2, 4))) ;




extern int symlink (__const char *__from, __const char *__to)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern ssize_t readlink (__const char *__restrict __path,
    char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (1, 2))) ;




extern int symlinkat (__const char *__from, int __tofd,
        __const char *__to) throw () __attribute__ ((__nonnull__ (1, 3))) ;


extern ssize_t readlinkat (int __fd, __const char *__restrict __path,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (2, 3))) ;



extern int unlink (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));



extern int unlinkat (int __fd, __const char *__name, int __flag)
     throw () __attribute__ ((__nonnull__ (2)));



extern int rmdir (__const char *__path) throw () __attribute__ ((__nonnull__ (1)));



extern __pid_t tcgetpgrp (int __fd) throw ();


extern int tcsetpgrp (int __fd, __pid_t __pgrp_id) throw ();






extern char *getlogin (void);







extern int getlogin_r (char *__name, size_t __name_len) __attribute__ ((__nonnull__ (1)));




extern int setlogin (__const char *__name) throw () __attribute__ ((__nonnull__ (1)));
# 887 "/usr/include/unistd.h" 3 4
# 1 "/usr/include/getopt.h" 1 3 4
# 50 "/usr/include/getopt.h" 3 4
extern "C" {
# 59 "/usr/include/getopt.h" 3 4
extern char *optarg;
# 73 "/usr/include/getopt.h" 3 4
extern int optind;




extern int opterr;



extern int optopt;
# 152 "/usr/include/getopt.h" 3 4
extern int getopt (int ___argc, char *const *___argv, const char *__shortopts)
       throw ();
# 187 "/usr/include/getopt.h" 3 4
}
# 888 "/usr/include/unistd.h" 2 3 4







extern int gethostname (char *__name, size_t __len) throw () __attribute__ ((__nonnull__ (1)));






extern int sethostname (__const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;



extern int sethostid (long int __id) throw () ;





extern int getdomainname (char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;
extern int setdomainname (__const char *__name, size_t __len)
     throw () __attribute__ ((__nonnull__ (1))) ;





extern int vhangup (void) throw ();


extern int revoke (__const char *__file) throw () __attribute__ ((__nonnull__ (1))) ;







extern int profil (unsigned short int *__sample_buffer, size_t __size,
     size_t __offset, unsigned int __scale)
     throw () __attribute__ ((__nonnull__ (1)));





extern int acct (__const char *__name) throw ();



extern char *getusershell (void) throw ();
extern void endusershell (void) throw ();
extern void setusershell (void) throw ();





extern int daemon (int __nochdir, int __noclose) throw () ;






extern int chroot (__const char *__path) throw () __attribute__ ((__nonnull__ (1))) ;



extern char *getpass (__const char *__prompt) __attribute__ ((__nonnull__ (1)));
# 973 "/usr/include/unistd.h" 3 4
extern int fsync (int __fd);






extern long int gethostid (void);


extern void sync (void) throw ();




extern int getpagesize (void) throw () __attribute__ ((__const__));




extern int getdtablesize (void) throw ();




extern int truncate (__const char *__file, __off_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1010 "/usr/include/unistd.h" 3 4
extern int truncate64 (__const char *__file, __off64_t __length)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 1020 "/usr/include/unistd.h" 3 4
extern int ftruncate (int __fd, __off_t __length) throw () ;
# 1030 "/usr/include/unistd.h" 3 4
extern int ftruncate64 (int __fd, __off64_t __length) throw () ;
# 1040 "/usr/include/unistd.h" 3 4
extern int brk (void *__addr) throw () ;





extern void *sbrk (intptr_t __delta) throw ();
# 1061 "/usr/include/unistd.h" 3 4
extern long int syscall (long int __sysno, ...) throw ();
# 1084 "/usr/include/unistd.h" 3 4
extern int lockf (int __fd, int __cmd, __off_t __len) ;
# 1094 "/usr/include/unistd.h" 3 4
extern int lockf64 (int __fd, int __cmd, __off64_t __len) ;
# 1115 "/usr/include/unistd.h" 3 4
extern int fdatasync (int __fildes);







extern char *crypt (__const char *__key, __const char *__salt)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern void encrypt (char *__block, int __edflag) throw () __attribute__ ((__nonnull__ (1)));






extern void swab (__const void *__restrict __from, void *__restrict __to,
    ssize_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));







extern char *ctermid (char *__s) throw ();
# 1153 "/usr/include/unistd.h" 3 4
}
# 43 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 2 3

typedef pthread_t __gthread_t;
typedef pthread_key_t __gthread_key_t;
typedef pthread_once_t __gthread_once_t;
typedef pthread_mutex_t __gthread_mutex_t;
typedef pthread_mutex_t __gthread_recursive_mutex_t;
typedef pthread_cond_t __gthread_cond_t;
typedef struct timespec __gthread_time_t;
# 118 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static __typeof(pthread_once) __gthrw_pthread_once __attribute__ ((__weakref__("pthread_once")));
static __typeof(pthread_getspecific) __gthrw_pthread_getspecific __attribute__ ((__weakref__("pthread_getspecific")));
static __typeof(pthread_setspecific) __gthrw_pthread_setspecific __attribute__ ((__weakref__("pthread_setspecific")));

static __typeof(pthread_create) __gthrw_pthread_create __attribute__ ((__weakref__("pthread_create")));
static __typeof(pthread_join) __gthrw_pthread_join __attribute__ ((__weakref__("pthread_join")));
static __typeof(pthread_equal) __gthrw_pthread_equal __attribute__ ((__weakref__("pthread_equal")));
static __typeof(pthread_self) __gthrw_pthread_self __attribute__ ((__weakref__("pthread_self")));
static __typeof(pthread_detach) __gthrw_pthread_detach __attribute__ ((__weakref__("pthread_detach")));
static __typeof(pthread_cancel) __gthrw_pthread_cancel __attribute__ ((__weakref__("pthread_cancel")));
static __typeof(sched_yield) __gthrw_sched_yield __attribute__ ((__weakref__("sched_yield")));

static __typeof(pthread_mutex_lock) __gthrw_pthread_mutex_lock __attribute__ ((__weakref__("pthread_mutex_lock")));
static __typeof(pthread_mutex_trylock) __gthrw_pthread_mutex_trylock __attribute__ ((__weakref__("pthread_mutex_trylock")));


static __typeof(pthread_mutex_timedlock) __gthrw_pthread_mutex_timedlock __attribute__ ((__weakref__("pthread_mutex_timedlock")));


static __typeof(pthread_mutex_unlock) __gthrw_pthread_mutex_unlock __attribute__ ((__weakref__("pthread_mutex_unlock")));
static __typeof(pthread_mutex_init) __gthrw_pthread_mutex_init __attribute__ ((__weakref__("pthread_mutex_init")));
static __typeof(pthread_mutex_destroy) __gthrw_pthread_mutex_destroy __attribute__ ((__weakref__("pthread_mutex_destroy")));

static __typeof(pthread_cond_broadcast) __gthrw_pthread_cond_broadcast __attribute__ ((__weakref__("pthread_cond_broadcast")));
static __typeof(pthread_cond_signal) __gthrw_pthread_cond_signal __attribute__ ((__weakref__("pthread_cond_signal")));
static __typeof(pthread_cond_wait) __gthrw_pthread_cond_wait __attribute__ ((__weakref__("pthread_cond_wait")));
static __typeof(pthread_cond_timedwait) __gthrw_pthread_cond_timedwait __attribute__ ((__weakref__("pthread_cond_timedwait")));
static __typeof(pthread_cond_destroy) __gthrw_pthread_cond_destroy __attribute__ ((__weakref__("pthread_cond_destroy")));


static __typeof(pthread_key_create) __gthrw_pthread_key_create __attribute__ ((__weakref__("pthread_key_create")));
static __typeof(pthread_key_delete) __gthrw_pthread_key_delete __attribute__ ((__weakref__("pthread_key_delete")));
static __typeof(pthread_mutexattr_init) __gthrw_pthread_mutexattr_init __attribute__ ((__weakref__("pthread_mutexattr_init")));
static __typeof(pthread_mutexattr_settype) __gthrw_pthread_mutexattr_settype __attribute__ ((__weakref__("pthread_mutexattr_settype")));
static __typeof(pthread_mutexattr_destroy) __gthrw_pthread_mutexattr_destroy __attribute__ ((__weakref__("pthread_mutexattr_destroy")));
# 237 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_active_p (void)
{
  static void *const __gthread_active_ptr
    = __extension__ (void *) &__gthrw_pthread_cancel;
  return __gthread_active_ptr != 0;
}
# 675 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_create (__gthread_t *__threadid, void *(*__func) (void*),
    void *__args)
{
  return __gthrw_pthread_create (__threadid, __null, __func, __args);
}

static inline int
__gthread_join (__gthread_t __threadid, void **__value_ptr)
{
  return __gthrw_pthread_join (__threadid, __value_ptr);
}

static inline int
__gthread_detach (__gthread_t __threadid)
{
  return __gthrw_pthread_detach (__threadid);
}

static inline int
__gthread_equal (__gthread_t __t1, __gthread_t __t2)
{
  return __gthrw_pthread_equal (__t1, __t2);
}

static inline __gthread_t
__gthread_self (void)
{
  return __gthrw_pthread_self ();
}

static inline int
__gthread_yield (void)
{
  return __gthrw_sched_yield ();
}

static inline int
__gthread_once (__gthread_once_t *__once, void (*__func) (void))
{
  if (__gthread_active_p ())
    return __gthrw_pthread_once (__once, __func);
  else
    return -1;
}

static inline int
__gthread_key_create (__gthread_key_t *__key, void (*__dtor) (void *))
{
  return __gthrw_pthread_key_create (__key, __dtor);
}

static inline int
__gthread_key_delete (__gthread_key_t __key)
{
  return __gthrw_pthread_key_delete (__key);
}

static inline void *
__gthread_getspecific (__gthread_key_t __key)
{
  return __gthrw_pthread_getspecific (__key);
}

static inline int
__gthread_setspecific (__gthread_key_t __key, const void *__ptr)
{
  return __gthrw_pthread_setspecific (__key, __ptr);
}

static inline int
__gthread_mutex_destroy (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_destroy (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_lock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_lock (__mutex);
  else
    return 0;
}

static inline int
__gthread_mutex_trylock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_trylock (__mutex);
  else
    return 0;
}



static inline int
__gthread_mutex_timedlock (__gthread_mutex_t *__mutex,
      const __gthread_time_t *__abs_timeout)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_timedlock (__mutex, __abs_timeout);
  else
    return 0;
}



static inline int
__gthread_mutex_unlock (__gthread_mutex_t *__mutex)
{
  if (__gthread_active_p ())
    return __gthrw_pthread_mutex_unlock (__mutex);
  else
    return 0;
}
# 818 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr-default.h" 3
static inline int
__gthread_recursive_mutex_lock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_lock (__mutex);
}

static inline int
__gthread_recursive_mutex_trylock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_trylock (__mutex);
}



static inline int
__gthread_recursive_mutex_timedlock (__gthread_recursive_mutex_t *__mutex,
         const __gthread_time_t *__abs_timeout)
{
  return __gthread_mutex_timedlock (__mutex, __abs_timeout);
}



static inline int
__gthread_recursive_mutex_unlock (__gthread_recursive_mutex_t *__mutex)
{
  return __gthread_mutex_unlock (__mutex);
}

static inline int
__gthread_cond_broadcast (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_broadcast (__cond);
}

static inline int
__gthread_cond_signal (__gthread_cond_t *__cond)
{
  return __gthrw_pthread_cond_signal (__cond);
}

static inline int
__gthread_cond_wait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex)
{
  return __gthrw_pthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait (__gthread_cond_t *__cond, __gthread_mutex_t *__mutex,
     const __gthread_time_t *__abs_timeout)
{
  return __gthrw_pthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_wait_recursive (__gthread_cond_t *__cond,
          __gthread_recursive_mutex_t *__mutex)
{
  return __gthread_cond_wait (__cond, __mutex);
}

static inline int
__gthread_cond_timedwait_recursive (__gthread_cond_t *__cond,
        __gthread_recursive_mutex_t *__mutex,
        const __gthread_time_t *__abs_timeout)
{
  return __gthread_cond_timedwait (__cond, __mutex, __abs_timeout);
}

static inline int
__gthread_cond_destroy (__gthread_cond_t* __cond)
{
  return __gthrw_pthread_cond_destroy (__cond);
}
# 163 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/gthr.h" 2 3







#pragma GCC visibility pop
# 35 "/usr/include/c++/4.4/ext/atomicity.h" 2 3
# 1 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/atomic_word.h" 1 3
# 32 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/atomic_word.h" 3
typedef int _Atomic_word;
# 36 "/usr/include/c++/4.4/ext/atomicity.h" 2 3

namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {






  static inline _Atomic_word
  __exchange_and_add(volatile _Atomic_word* __mem, int __val)
  { return __sync_fetch_and_add(__mem, __val); }

  static inline void
  __atomic_add(volatile _Atomic_word* __mem, int __val)
  { __sync_fetch_and_add(__mem, __val); }
# 61 "/usr/include/c++/4.4/ext/atomicity.h" 3
  static inline _Atomic_word
  __exchange_and_add_single(_Atomic_word* __mem, int __val)
  {
    _Atomic_word __result = *__mem;
    *__mem += __val;
    return __result;
  }

  static inline void
  __atomic_add_single(_Atomic_word* __mem, int __val)
  { *__mem += __val; }

  static inline _Atomic_word
  __attribute__ ((__unused__))
  __exchange_and_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      return __exchange_and_add(__mem, __val);
    else
      return __exchange_and_add_single(__mem, __val);



  }

  static inline void
  __attribute__ ((__unused__))
  __atomic_add_dispatch(_Atomic_word* __mem, int __val)
  {

    if (__gthread_active_p())
      __atomic_add(__mem, __val);
    else
      __atomic_add_single(__mem, __val);



  }

}
# 42 "/usr/include/c++/4.4/bits/basic_string.h" 2 3

# 1 "/usr/include/c++/4.4/initializer_list" 1 3
# 44 "/usr/include/c++/4.4/bits/basic_string.h" 2 3

namespace std __attribute__ ((__visibility__ ("default"))) {
# 103 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_string
    {
      typedef typename _Alloc::template rebind<_CharT>::other _CharT_alloc_type;


    public:
      typedef _Traits traits_type;
      typedef typename _Traits::char_type value_type;
      typedef _Alloc allocator_type;
      typedef typename _CharT_alloc_type::size_type size_type;
      typedef typename _CharT_alloc_type::difference_type difference_type;
      typedef typename _CharT_alloc_type::reference reference;
      typedef typename _CharT_alloc_type::const_reference const_reference;
      typedef typename _CharT_alloc_type::pointer pointer;
      typedef typename _CharT_alloc_type::const_pointer const_pointer;
      typedef __gnu_cxx::__normal_iterator<pointer, basic_string> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, basic_string>
                                                            const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;

    private:
# 140 "/usr/include/c++/4.4/bits/basic_string.h" 3
      struct _Rep_base
      {
 size_type _M_length;
 size_type _M_capacity;
 _Atomic_word _M_refcount;
      };

      struct _Rep : _Rep_base
      {

 typedef typename _Alloc::template rebind<char>::other _Raw_bytes_alloc;
# 165 "/usr/include/c++/4.4/bits/basic_string.h" 3
 static const size_type _S_max_size;
 static const _CharT _S_terminal;



        static size_type _S_empty_rep_storage[];

        static _Rep&
        _S_empty_rep()
        {



   void* __p = reinterpret_cast<void*>(&_S_empty_rep_storage);
   return *reinterpret_cast<_Rep*>(__p);
 }

        bool
 _M_is_leaked() const
        { return this->_M_refcount < 0; }

        bool
 _M_is_shared() const
        { return this->_M_refcount > 0; }

        void
 _M_set_leaked()
        { this->_M_refcount = -1; }

        void
 _M_set_sharable()
        { this->_M_refcount = 0; }

 void
 _M_set_length_and_sharable(size_type __n)
 {
   this->_M_set_sharable();
   this->_M_length = __n;
   traits_type::assign(this->_M_refdata()[__n], _S_terminal);


 }

 _CharT*
 _M_refdata() throw()
 { return reinterpret_cast<_CharT*>(this + 1); }

 _CharT*
 _M_grab(const _Alloc& __alloc1, const _Alloc& __alloc2)
 {
   return (!_M_is_leaked() && __alloc1 == __alloc2)
           ? _M_refcopy() : _M_clone(__alloc1);
 }


 static _Rep*
 _S_create(size_type, size_type, const _Alloc&);

 void
 _M_dispose(const _Alloc& __a)
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

     if (__gnu_cxx::__exchange_and_add_dispatch(&this->_M_refcount,
             -1) <= 0)
       _M_destroy(__a);
 }

 void
 _M_destroy(const _Alloc&) throw();

 _CharT*
 _M_refcopy() throw()
 {

   if (__builtin_expect(this != &_S_empty_rep(), false))

            __gnu_cxx::__atomic_add_dispatch(&this->_M_refcount, 1);
   return _M_refdata();
 }

 _CharT*
 _M_clone(const _Alloc&, size_type __res = 0);
      };


      struct _Alloc_hider : _Alloc
      {
 _Alloc_hider(_CharT* __dat, const _Alloc& __a)
 : _Alloc(__a), _M_p(__dat) { }

 _CharT* _M_p;
      };

    public:




      static const size_type npos = static_cast<size_type>(-1);

    private:

      mutable _Alloc_hider _M_dataplus;

      _CharT*
      _M_data() const
      { return _M_dataplus._M_p; }

      _CharT*
      _M_data(_CharT* __p)
      { return (_M_dataplus._M_p = __p); }

      _Rep*
      _M_rep() const
      { return &((reinterpret_cast<_Rep*> (_M_data()))[-1]); }



      iterator
      _M_ibegin() const
      { return iterator(_M_data()); }

      iterator
      _M_iend() const
      { return iterator(_M_data() + this->size()); }

      void
      _M_leak()
      {
 if (!_M_rep()->_M_is_leaked())
   _M_leak_hard();
      }

      size_type
      _M_check(size_type __pos, const char* __s) const
      {
 if (__pos > this->size())
   __throw_out_of_range((__s));
 return __pos;
      }

      void
      _M_check_length(size_type __n1, size_type __n2, const char* __s) const
      {
 if (this->max_size() - (this->size() - __n1) < __n2)
   __throw_length_error((__s));
      }


      size_type
      _M_limit(size_type __pos, size_type __off) const
      {
 const bool __testoff = __off < this->size() - __pos;
 return __testoff ? __off : this->size() - __pos;
      }


      bool
      _M_disjunct(const _CharT* __s) const
      {
 return (less<const _CharT*>()(__s, _M_data())
  || less<const _CharT*>()(_M_data() + this->size(), __s));
      }



      static void
      _M_copy(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::copy(__d, __s, __n);
      }

      static void
      _M_move(_CharT* __d, const _CharT* __s, size_type __n)
      {
 if (__n == 1)
   traits_type::assign(*__d, *__s);
 else
   traits_type::move(__d, __s, __n);
      }

      static void
      _M_assign(_CharT* __d, size_type __n, _CharT __c)
      {
 if (__n == 1)
   traits_type::assign(*__d, __c);
 else
   traits_type::assign(__d, __n, __c);
      }



      template<class _Iterator>
        static void
        _S_copy_chars(_CharT* __p, _Iterator __k1, _Iterator __k2)
        {
   for (; __k1 != __k2; ++__k1, ++__p)
     traits_type::assign(*__p, *__k1);
 }

      static void
      _S_copy_chars(_CharT* __p, iterator __k1, iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, const_iterator __k1, const_iterator __k2)
      { _S_copy_chars(__p, __k1.base(), __k2.base()); }

      static void
      _S_copy_chars(_CharT* __p, _CharT* __k1, _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static void
      _S_copy_chars(_CharT* __p, const _CharT* __k1, const _CharT* __k2)
      { _M_copy(__p, __k1, __k2 - __k1); }

      static int
      _S_compare(size_type __n1, size_type __n2)
      {
 const difference_type __d = difference_type(__n1 - __n2);

 if (__d > __gnu_cxx::__numeric_traits<int>::__max)
   return __gnu_cxx::__numeric_traits<int>::__max;
 else if (__d < __gnu_cxx::__numeric_traits<int>::__min)
   return __gnu_cxx::__numeric_traits<int>::__min;
 else
   return int(__d);
      }

      void
      _M_mutate(size_type __pos, size_type __len1, size_type __len2);

      void
      _M_leak_hard();

      static _Rep&
      _S_empty_rep()
      { return _Rep::_S_empty_rep(); }

    public:







      inline
      basic_string();




      explicit
      basic_string(const _Alloc& __a);






      basic_string(const basic_string& __str);






      basic_string(const basic_string& __str, size_type __pos,
     size_type __n = npos);







      basic_string(const basic_string& __str, size_type __pos,
     size_type __n, const _Alloc& __a);
# 459 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string(const _CharT* __s, size_type __n,
     const _Alloc& __a = _Alloc());





      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc());






      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc());
# 490 "/usr/include/c++/4.4/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string(_InputIterator __beg, _InputIterator __end,
       const _Alloc& __a = _Alloc());




      ~basic_string()
      { _M_rep()->_M_dispose(this->get_allocator()); }





      basic_string&
      operator=(const basic_string& __str)
      { return this->assign(__str); }





      basic_string&
      operator=(const _CharT* __s)
      { return this->assign(__s); }
# 523 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      operator=(_CharT __c)
      {
 this->assign(1, __c);
 return *this;
      }
# 548 "/usr/include/c++/4.4/bits/basic_string.h" 3
      iterator
      begin()
      {
 _M_leak();
 return iterator(_M_data());
      }





      const_iterator
      begin() const
      { return const_iterator(_M_data()); }





      iterator
      end()
      {
 _M_leak();
 return iterator(_M_data() + this->size());
      }





      const_iterator
      end() const
      { return const_iterator(_M_data() + this->size()); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(this->end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(this->end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(this->begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(this->begin()); }

    public:



      size_type
      size() const
      { return _M_rep()->_M_length; }



      size_type
      length() const
      { return _M_rep()->_M_length; }


      size_type
      max_size() const
      { return _Rep::_S_max_size; }
# 647 "/usr/include/c++/4.4/bits/basic_string.h" 3
      void
      resize(size_type __n, _CharT __c);
# 660 "/usr/include/c++/4.4/bits/basic_string.h" 3
      void
      resize(size_type __n)
      { this->resize(__n, _CharT()); }





      size_type
      capacity() const
      { return _M_rep()->_M_capacity; }
# 689 "/usr/include/c++/4.4/bits/basic_string.h" 3
      void
      reserve(size_type __res_arg = 0);




      void
      clear()
      { _M_mutate(0, this->size(), 0); }




      bool
      empty() const
      { return this->size() == 0; }
# 717 "/usr/include/c++/4.4/bits/basic_string.h" 3
      const_reference
      operator[] (size_type __pos) const
      {
 ;
 return _M_data()[__pos];
      }
# 734 "/usr/include/c++/4.4/bits/basic_string.h" 3
      reference
      operator[](size_type __pos)
      {

 ;

 ;
 _M_leak();
 return _M_data()[__pos];
      }
# 755 "/usr/include/c++/4.4/bits/basic_string.h" 3
      const_reference
      at(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range(("basic_string::at"));
 return _M_data()[__n];
      }
# 774 "/usr/include/c++/4.4/bits/basic_string.h" 3
      reference
      at(size_type __n)
      {
 if (__n >= size())
   __throw_out_of_range(("basic_string::at"));
 _M_leak();
 return _M_data()[__n];
      }







      basic_string&
      operator+=(const basic_string& __str)
      { return this->append(__str); }






      basic_string&
      operator+=(const _CharT* __s)
      { return this->append(__s); }






      basic_string&
      operator+=(_CharT __c)
      {
 this->push_back(__c);
 return *this;
      }
# 830 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str);
# 845 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      append(const basic_string& __str, size_type __pos, size_type __n);







      basic_string&
      append(const _CharT* __s, size_type __n);






      basic_string&
      append(const _CharT* __s)
      {
 ;
 return this->append(__s, traits_type::length(__s));
      }
# 877 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      append(size_type __n, _CharT __c);
# 899 "/usr/include/c++/4.4/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        append(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_iend(), _M_iend(), __first, __last); }





      void
      push_back(_CharT __c)
      {
 const size_type __len = 1 + this->size();
 if (__len > this->capacity() || _M_rep()->_M_is_shared())
   this->reserve(__len);
 traits_type::assign(_M_data()[this->size()], __c);
 _M_rep()->_M_set_length_and_sharable(__len);
      }






      basic_string&
      assign(const basic_string& __str);
# 938 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      assign(const basic_string& __str, size_type __pos, size_type __n)
      { return this->assign(__str._M_data()
       + __str._M_check(__pos, "basic_string::assign"),
       __str._M_limit(__pos, __n)); }
# 954 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s, size_type __n);
# 966 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      assign(const _CharT* __s)
      {
 ;
 return this->assign(__s, traits_type::length(__s));
      }
# 982 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      assign(size_type __n, _CharT __c)
      { return _M_replace_aux(size_type(0), this->size(), __n, __c); }
# 994 "/usr/include/c++/4.4/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        assign(_InputIterator __first, _InputIterator __last)
        { return this->replace(_M_ibegin(), _M_iend(), __first, __last); }
# 1022 "/usr/include/c++/4.4/bits/basic_string.h" 3
      void
      insert(iterator __p, size_type __n, _CharT __c)
      { this->replace(__p, __p, __n, __c); }
# 1037 "/usr/include/c++/4.4/bits/basic_string.h" 3
      template<class _InputIterator>
        void
        insert(iterator __p, _InputIterator __beg, _InputIterator __end)
        { this->replace(__p, __p, __beg, __end); }
# 1065 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str)
      { return this->insert(__pos1, __str, size_type(0), __str.size()); }
# 1087 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos1, const basic_string& __str,
      size_type __pos2, size_type __n)
      { return this->insert(__pos1, __str._M_data()
       + __str._M_check(__pos2, "basic_string::insert"),
       __str._M_limit(__pos2, __n)); }
# 1110 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s, size_type __n);
# 1128 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, const _CharT* __s)
      {
 ;
 return this->insert(__pos, __s, traits_type::length(__s));
      }
# 1151 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      insert(size_type __pos, size_type __n, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::insert"),
         size_type(0), __n, __c); }
# 1168 "/usr/include/c++/4.4/bits/basic_string.h" 3
      iterator
      insert(iterator __p, _CharT __c)
      {
 ;
 const size_type __pos = __p - _M_ibegin();
 _M_replace_aux(__pos, size_type(0), size_type(1), __c);
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1192 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      erase(size_type __pos = 0, size_type __n = npos)
      {
 _M_mutate(_M_check(__pos, "basic_string::erase"),
    _M_limit(__pos, __n), size_type(0));
 return *this;
      }
# 1208 "/usr/include/c++/4.4/bits/basic_string.h" 3
      iterator
      erase(iterator __position)
      {
 ;

 const size_type __pos = __position - _M_ibegin();
 _M_mutate(__pos, size_type(1), size_type(0));
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1228 "/usr/include/c++/4.4/bits/basic_string.h" 3
      iterator
      erase(iterator __first, iterator __last)
      {
 ;

        const size_type __pos = __first - _M_ibegin();
 _M_mutate(__pos, __last - __first, size_type(0));
 _M_rep()->_M_set_leaked();
 return iterator(_M_data() + __pos);
      }
# 1255 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n, const basic_string& __str)
      { return this->replace(__pos, __n, __str._M_data(), __str.size()); }
# 1277 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2)
      { return this->replace(__pos1, __n1, __str._M_data()
        + __str._M_check(__pos2, "basic_string::replace"),
        __str._M_limit(__pos2, __n2)); }
# 1301 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2);
# 1320 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, const _CharT* __s)
      {
 ;
 return this->replace(__pos, __n1, __s, traits_type::length(__s));
      }
# 1343 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      replace(size_type __pos, size_type __n1, size_type __n2, _CharT __c)
      { return _M_replace_aux(_M_check(__pos, "basic_string::replace"),
         _M_limit(__pos, __n1), __n2, __c); }
# 1361 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const basic_string& __str)
      { return this->replace(__i1, __i2, __str._M_data(), __str.size()); }
# 1379 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s, size_type __n)
      {
 ;

 return this->replace(__i1 - _M_ibegin(), __i2 - __i1, __s, __n);
      }
# 1400 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, const _CharT* __s)
      {
 ;
 return this->replace(__i1, __i2, __s, traits_type::length(__s));
      }
# 1421 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string&
      replace(iterator __i1, iterator __i2, size_type __n, _CharT __c)
      {
 ;

 return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __c);
      }
# 1443 "/usr/include/c++/4.4/bits/basic_string.h" 3
      template<class _InputIterator>
        basic_string&
        replace(iterator __i1, iterator __i2,
  _InputIterator __k1, _InputIterator __k2)
        {
   ;

   ;
   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   return _M_replace_dispatch(__i1, __i2, __k1, __k2, _Integral());
 }



      basic_string&
      replace(iterator __i1, iterator __i2, _CharT* __k1, _CharT* __k2)
      {
 ;

 ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const _CharT* __k1, const _CharT* __k2)
      {
 ;

 ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1, __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2, iterator __k1, iterator __k2)
      {
 ;

 ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }

      basic_string&
      replace(iterator __i1, iterator __i2,
       const_iterator __k1, const_iterator __k2)
      {
 ;

 ;
 return this->replace(__i1 - _M_ibegin(), __i2 - __i1,
        __k1.base(), __k2 - __k1);
      }
# 1518 "/usr/include/c++/4.4/bits/basic_string.h" 3
    private:
      template<class _Integer>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _Integer __n,
       _Integer __val, __true_type)
        { return _M_replace_aux(__i1 - _M_ibegin(), __i2 - __i1, __n, __val); }

      template<class _InputIterator>
 basic_string&
 _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
       _InputIterator __k2, __false_type);

      basic_string&
      _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
       _CharT __c);

      basic_string&
      _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
        size_type __n2);



      template<class _InIterator>
        static _CharT*
        _S_construct_aux(_InIterator __beg, _InIterator __end,
    const _Alloc& __a, __false_type)
 {
          typedef typename iterator_traits<_InIterator>::iterator_category _Tag;
          return _S_construct(__beg, __end, __a, _Tag());
 }



      template<class _Integer>
        static _CharT*
        _S_construct_aux(_Integer __beg, _Integer __end,
    const _Alloc& __a, __true_type)
        { return _S_construct(static_cast<size_type>(__beg), __end, __a); }

      template<class _InIterator>
        static _CharT*
        _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a)
 {
   typedef typename std::__is_integer<_InIterator>::__type _Integral;
   return _S_construct_aux(__beg, __end, __a, _Integral());
        }


      template<class _InIterator>
        static _CharT*
         _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
        input_iterator_tag);



      template<class _FwdIterator>
        static _CharT*
        _S_construct(_FwdIterator __beg, _FwdIterator __end, const _Alloc& __a,
       forward_iterator_tag);

      static _CharT*
      _S_construct(size_type __req, _CharT __c, const _Alloc& __a);

    public:
# 1594 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      copy(_CharT* __s, size_type __n, size_type __pos = 0) const;
# 1604 "/usr/include/c++/4.4/bits/basic_string.h" 3
      void
      swap(basic_string& __s);
# 1614 "/usr/include/c++/4.4/bits/basic_string.h" 3
      const _CharT*
      c_str() const
      { return _M_data(); }







      const _CharT*
      data() const
      { return _M_data(); }




      allocator_type
      get_allocator() const
      { return _M_dataplus; }
# 1646 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos, size_type __n) const;
# 1659 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find(const basic_string& __str, size_type __pos = 0) const
      { return this->find(__str.data(), __pos, __str.size()); }
# 1673 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find(const _CharT* __s, size_type __pos = 0) const
      {
 ;
 return this->find(__s, __pos, traits_type::length(__s));
      }
# 1690 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find(_CharT __c, size_type __pos = 0) const;
# 1703 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      rfind(const basic_string& __str, size_type __pos = npos) const
      { return this->rfind(__str.data(), __pos, __str.size()); }
# 1718 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos, size_type __n) const;
# 1731 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      rfind(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->rfind(__s, __pos, traits_type::length(__s));
      }
# 1748 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      rfind(_CharT __c, size_type __pos = npos) const;
# 1761 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_of(__str.data(), __pos, __str.size()); }
# 1776 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 1789 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_of(const _CharT* __s, size_type __pos = 0) const
      {
 ;
 return this->find_first_of(__s, __pos, traits_type::length(__s));
      }
# 1808 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_of(_CharT __c, size_type __pos = 0) const
      { return this->find(__c, __pos); }
# 1822 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_of(__str.data(), __pos, __str.size()); }
# 1837 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos, size_type __n) const;
# 1850 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_of(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->find_last_of(__s, __pos, traits_type::length(__s));
      }
# 1869 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_of(_CharT __c, size_type __pos = npos) const
      { return this->rfind(__c, __pos); }
# 1883 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_not_of(const basic_string& __str, size_type __pos = 0) const
      { return this->find_first_not_of(__str.data(), __pos, __str.size()); }
# 1898 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos,
   size_type __n) const;
# 1912 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_not_of(const _CharT* __s, size_type __pos = 0) const
      {
 ;
 return this->find_first_not_of(__s, __pos, traits_type::length(__s));
      }
# 1929 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_first_not_of(_CharT __c, size_type __pos = 0) const;
# 1942 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_not_of(const basic_string& __str, size_type __pos = npos) const
      { return this->find_last_not_of(__str.data(), __pos, __str.size()); }
# 1958 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos,
         size_type __n) const;
# 1971 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_not_of(const _CharT* __s, size_type __pos = npos) const
      {
 ;
 return this->find_last_not_of(__s, __pos, traits_type::length(__s));
      }
# 1988 "/usr/include/c++/4.4/bits/basic_string.h" 3
      size_type
      find_last_not_of(_CharT __c, size_type __pos = npos) const;
# 2003 "/usr/include/c++/4.4/bits/basic_string.h" 3
      basic_string
      substr(size_type __pos = 0, size_type __n = npos) const
      { return basic_string(*this,
       _M_check(__pos, "basic_string::substr"), __n); }
# 2021 "/usr/include/c++/4.4/bits/basic_string.h" 3
      int
      compare(const basic_string& __str) const
      {
 const size_type __size = this->size();
 const size_type __osize = __str.size();
 const size_type __len = std::min(__size, __osize);

 int __r = traits_type::compare(_M_data(), __str.data(), __len);
 if (!__r)
   __r = _S_compare(__size, __osize);
 return __r;
      }
# 2051 "/usr/include/c++/4.4/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n, const basic_string& __str) const;
# 2075 "/usr/include/c++/4.4/bits/basic_string.h" 3
      int
      compare(size_type __pos1, size_type __n1, const basic_string& __str,
       size_type __pos2, size_type __n2) const;
# 2093 "/usr/include/c++/4.4/bits/basic_string.h" 3
      int
      compare(const _CharT* __s) const;
# 2116 "/usr/include/c++/4.4/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s) const;
# 2141 "/usr/include/c++/4.4/bits/basic_string.h" 3
      int
      compare(size_type __pos, size_type __n1, const _CharT* __s,
       size_type __n2) const;
  };

  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>::
    basic_string()

    : _M_dataplus(_S_empty_rep()._M_refdata(), _Alloc()) { }
# 2162 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT,_Traits,_Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT,_Traits,_Alloc>& __rhs);







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
      const _CharT* __rhs)
    {
      basic_string<_CharT, _Traits, _Alloc> __str(__lhs);
      __str.append(__rhs);
      return __str;
    }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str(__lhs);
      __str.append(__size_type(1), __rhs);
      return __str;
    }
# 2233 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) == 0; }

  template<typename _CharT>
    inline
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value, bool>::__type
    operator==(const basic_string<_CharT>& __lhs,
        const basic_string<_CharT>& __rhs)
    { return (__lhs.size() == __rhs.size()
       && !std::char_traits<_CharT>::compare(__lhs.data(), __rhs.data(),
          __lhs.size())); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) == 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
# 2279 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return !(__lhs == __rhs); }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator!=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return !(__lhs == __rhs); }
# 2316 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) < 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) > 0; }
# 2353 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
       const _CharT* __rhs)
    { return __lhs.compare(__rhs) > 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) < 0; }
# 2390 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) <= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator<=(const _CharT* __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) >= 0; }
# 2427 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
        const _CharT* __rhs)
    { return __lhs.compare(__rhs) >= 0; }







  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator>=(const _CharT* __lhs,
      const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { return __rhs.compare(__lhs) <= 0; }
# 2464 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline void
    swap(basic_string<_CharT, _Traits, _Alloc>& __lhs,
  basic_string<_CharT, _Traits, _Alloc>& __rhs)
    { __lhs.swap(__rhs); }
# 2481 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __is,
        basic_string<_CharT, _Traits, _Alloc>& __str);

  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __is, basic_string<char>& __str);
# 2499 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __os,
        const basic_string<_CharT, _Traits, _Alloc>& __str)
    {


      return __ostream_insert(__os, __str.data(), __str.size());
    }
# 2522 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim);
# 2539 "/usr/include/c++/4.4/bits/basic_string.h" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __is,
     basic_string<_CharT, _Traits, _Alloc>& __str)
    { return getline(__is, __str, __is.widen('\n')); }

  template<>
    basic_istream<char>&
    getline(basic_istream<char>& __in, basic_string<char>& __str,
     char __delim);


  template<>
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>& __in, basic_string<wchar_t>& __str,
     wchar_t __delim);


}
# 54 "/usr/include/c++/4.4/string" 2 3


# 1 "/usr/include/c++/4.4/bits/basic_string.tcc" 1 3
# 42 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
       
# 43 "/usr/include/c++/4.4/bits/basic_string.tcc" 3



namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_max_size = (((npos - sizeof(_Rep_base))/sizeof(_CharT)) - 1) / 4;

  template<typename _CharT, typename _Traits, typename _Alloc>
    const _CharT
    basic_string<_CharT, _Traits, _Alloc>::
    _Rep::_S_terminal = _CharT();

  template<typename _CharT, typename _Traits, typename _Alloc>
    const typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::npos;



  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::_Rep::_S_empty_rep_storage[
    (sizeof(_Rep_base) + sizeof(_CharT) + sizeof(size_type) - 1) /
      sizeof(size_type)];





  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     input_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 _CharT __buf[128];
 size_type __len = 0;
 while (__beg != __end && __len < sizeof(__buf) / sizeof(_CharT))
   {
     __buf[__len++] = *__beg;
     ++__beg;
   }
 _Rep* __r = _Rep::_S_create(__len, size_type(0), __a);
 _M_copy(__r->_M_refdata(), __buf, __len);
 try
   {
     while (__beg != __end)
       {
  if (__len == __r->_M_capacity)
    {

      _Rep* __another = _Rep::_S_create(__len + 1, __len, __a);
      _M_copy(__another->_M_refdata(), __r->_M_refdata(), __len);
      __r->_M_destroy(__a);
      __r = __another;
    }
  __r->_M_refdata()[__len++] = *__beg;
  ++__beg;
       }
   }
 catch(...)
   {
     __r->_M_destroy(__a);
     throw;
   }
 __r->_M_set_length_and_sharable(__len);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template <typename _InIterator>
      _CharT*
      basic_string<_CharT, _Traits, _Alloc>::
      _S_construct(_InIterator __beg, _InIterator __end, const _Alloc& __a,
     forward_iterator_tag)
      {

 if (__beg == __end && __a == _Alloc())
   return _S_empty_rep()._M_refdata();


 if (__builtin_expect(__gnu_cxx::__is_null_pointer(__beg)
        && __beg != __end, 0))
   __throw_logic_error(("basic_string::_S_construct NULL not valid"));

 const size_type __dnew = static_cast<size_type>(std::distance(__beg,
              __end));

 _Rep* __r = _Rep::_S_create(__dnew, size_type(0), __a);
 try
   { _S_copy_chars(__r->_M_refdata(), __beg, __end); }
 catch(...)
   {
     __r->_M_destroy(__a);
     throw;
   }
 __r->_M_set_length_and_sharable(__dnew);
 return __r->_M_refdata();
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::
    _S_construct(size_type __n, _CharT __c, const _Alloc& __a)
    {

      if (__n == 0 && __a == _Alloc())
 return _S_empty_rep()._M_refdata();


      _Rep* __r = _Rep::_S_create(__n, size_type(0), __a);
      if (__n)
 _M_assign(__r->_M_refdata(), __n, __c);

      __r->_M_set_length_and_sharable(__n);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str)
    : _M_dataplus(__str._M_rep()->_M_grab(_Alloc(__str.get_allocator()),
       __str.get_allocator()),
    __str.get_allocator())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _Alloc& __a)
    : _M_dataplus(_S_construct(size_type(), _CharT(), __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos, size_type __n)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, _Alloc()), _Alloc())
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const basic_string& __str, size_type __pos,
   size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__str._M_data()
          + __str._M_check(__pos,
      "basic_string::basic_string"),
          __str._M_data() + __str._M_limit(__pos, __n)
          + __pos, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, size_type __n, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s + __n, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(const _CharT* __s, const _Alloc& __a)
    : _M_dataplus(_S_construct(__s, __s ? __s + traits_type::length(__s) :
          __s + npos, __a), __a)
    { }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(size_type __n, _CharT __c, const _Alloc& __a)
    : _M_dataplus(_S_construct(__n, __c, __a), __a)
    { }


  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
    basic_string<_CharT, _Traits, _Alloc>::
    basic_string(_InputIterator __beg, _InputIterator __end, const _Alloc& __a)
    : _M_dataplus(_S_construct(__beg, __end, __a), __a)
    { }
# 241 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const basic_string& __str)
    {
      if (_M_rep() != __str._M_rep())
 {

   const allocator_type __a = this->get_allocator();
   _CharT* __tmp = __str._M_rep()->_M_grab(__a, __str.get_allocator());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    assign(const _CharT* __s, size_type __n)
    {
      ;
      _M_check_length(this->size(), __n, "basic_string::assign");
      if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
 return _M_replace_safe(size_type(0), this->size(), __s, __n);
      else
 {

   const size_type __pos = __s - _M_data();
   if (__pos >= __n)
     _M_copy(_M_data(), __s, __n);
   else if (__pos)
     _M_move(_M_data(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__n);
   return *this;
 }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(size_type __n, _CharT __c)
    {
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_assign(_M_data() + this->size(), __n, __c);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const _CharT* __s, size_type __n)
    {
      ;
      if (__n)
 {
   _M_check_length(size_type(0), __n, "basic_string::append");
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     {
       if (_M_disjunct(__s))
  this->reserve(__len);
       else
  {
    const size_type __off = __s - _M_data();
    this->reserve(__len);
    __s = _M_data() + __off;
  }
     }
   _M_copy(_M_data() + this->size(), __s, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str)
    {
      const size_type __size = __str.size();
      if (__size)
 {
   const size_type __len = __size + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data(), __size);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    append(const basic_string& __str, size_type __pos, size_type __n)
    {
      __str._M_check(__pos, "basic_string::append");
      __n = __str._M_limit(__pos, __n);
      if (__n)
 {
   const size_type __len = __n + this->size();
   if (__len > this->capacity() || _M_rep()->_M_is_shared())
     this->reserve(__len);
   _M_copy(_M_data() + this->size(), __str._M_data() + __pos, __n);
   _M_rep()->_M_set_length_and_sharable(__len);
 }
      return *this;
    }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     insert(size_type __pos, const _CharT* __s, size_type __n)
     {
       ;
       _M_check(__pos, "basic_string::insert");
       _M_check_length(size_type(0), __n, "basic_string::insert");
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, size_type(0), __s, __n);
       else
         {

           const size_type __off = __s - _M_data();
           _M_mutate(__pos, 0, __n);
           __s = _M_data() + __off;
           _CharT* __p = _M_data() + __pos;
           if (__s + __n <= __p)
             _M_copy(__p, __s, __n);
           else if (__s >= __p)
             _M_copy(__p, __s + __n, __n);
           else
             {
        const size_type __nleft = __p - __s;
               _M_copy(__p, __s, __nleft);
               _M_copy(__p + __nleft, __p + __n, __n - __nleft);
             }
           return *this;
         }
     }

   template<typename _CharT, typename _Traits, typename _Alloc>
     basic_string<_CharT, _Traits, _Alloc>&
     basic_string<_CharT, _Traits, _Alloc>::
     replace(size_type __pos, size_type __n1, const _CharT* __s,
      size_type __n2)
     {
       ;
       _M_check(__pos, "basic_string::replace");
       __n1 = _M_limit(__pos, __n1);
       _M_check_length(__n1, __n2, "basic_string::replace");
       bool __left;
       if (_M_disjunct(__s) || _M_rep()->_M_is_shared())
         return _M_replace_safe(__pos, __n1, __s, __n2);
       else if ((__left = __s + __n2 <= _M_data() + __pos)
  || _M_data() + __pos + __n1 <= __s)
  {

    size_type __off = __s - _M_data();
    __left ? __off : (__off += __n2 - __n1);
    _M_mutate(__pos, __n1, __n2);
    _M_copy(_M_data() + __pos, _M_data() + __off, __n2);
    return *this;
  }
       else
  {

    const basic_string __tmp(__s, __n2);
    return _M_replace_safe(__pos, __n1, __tmp._M_data(), __n2);
  }
     }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_destroy(const _Alloc& __a) throw ()
    {
      const size_type __size = sizeof(_Rep_base) +
                        (this->_M_capacity + 1) * sizeof(_CharT);
      _Raw_bytes_alloc(__a).deallocate(reinterpret_cast<char*>(this), __size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_leak_hard()
    {

      if (_M_rep() == &_S_empty_rep())
 return;

      if (_M_rep()->_M_is_shared())
 _M_mutate(0, 0, 0);
      _M_rep()->_M_set_leaked();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    _M_mutate(size_type __pos, size_type __len1, size_type __len2)
    {
      const size_type __old_size = this->size();
      const size_type __new_size = __old_size + __len2 - __len1;
      const size_type __how_much = __old_size - __pos - __len1;

      if (__new_size > this->capacity() || _M_rep()->_M_is_shared())
 {

   const allocator_type __a = get_allocator();
   _Rep* __r = _Rep::_S_create(__new_size, this->capacity(), __a);

   if (__pos)
     _M_copy(__r->_M_refdata(), _M_data(), __pos);
   if (__how_much)
     _M_copy(__r->_M_refdata() + __pos + __len2,
      _M_data() + __pos + __len1, __how_much);

   _M_rep()->_M_dispose(__a);
   _M_data(__r->_M_refdata());
 }
      else if (__how_much && __len1 != __len2)
 {

   _M_move(_M_data() + __pos + __len2,
    _M_data() + __pos + __len1, __how_much);
 }
      _M_rep()->_M_set_length_and_sharable(__new_size);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    reserve(size_type __res)
    {
      if (__res != this->capacity() || _M_rep()->_M_is_shared())
        {

   if (__res < this->size())
     __res = this->size();
   const allocator_type __a = get_allocator();
   _CharT* __tmp = _M_rep()->_M_clone(__a, __res - this->size());
   _M_rep()->_M_dispose(__a);
   _M_data(__tmp);
        }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    swap(basic_string& __s)
    {
      if (_M_rep()->_M_is_leaked())
 _M_rep()->_M_set_sharable();
      if (__s._M_rep()->_M_is_leaked())
 __s._M_rep()->_M_set_sharable();
      if (this->get_allocator() == __s.get_allocator())
 {
   _CharT* __tmp = _M_data();
   _M_data(__s._M_data());
   __s._M_data(__tmp);
 }

      else
 {
   const basic_string __tmp1(_M_ibegin(), _M_iend(),
        __s.get_allocator());
   const basic_string __tmp2(__s._M_ibegin(), __s._M_iend(),
        this->get_allocator());
   *this = __tmp2;
   __s = __tmp1;
 }
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::_Rep*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _S_create(size_type __capacity, size_type __old_capacity,
       const _Alloc& __alloc)
    {


      if (__capacity > _S_max_size)
 __throw_length_error(("basic_string::_S_create"));
# 555 "/usr/include/c++/4.4/bits/basic_string.tcc" 3
      const size_type __pagesize = 4096;
      const size_type __malloc_header_size = 4 * sizeof(void*);







      if (__capacity > __old_capacity && __capacity < 2 * __old_capacity)
 __capacity = 2 * __old_capacity;




      size_type __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);

      const size_type __adj_size = __size + __malloc_header_size;
      if (__adj_size > __pagesize && __capacity > __old_capacity)
 {
   const size_type __extra = __pagesize - __adj_size % __pagesize;
   __capacity += __extra / sizeof(_CharT);

   if (__capacity > _S_max_size)
     __capacity = _S_max_size;
   __size = (__capacity + 1) * sizeof(_CharT) + sizeof(_Rep);
 }



      void* __place = _Raw_bytes_alloc(__alloc).allocate(__size);
      _Rep *__p = new (__place) _Rep;
      __p->_M_capacity = __capacity;







      __p->_M_set_sharable();
      return __p;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    _CharT*
    basic_string<_CharT, _Traits, _Alloc>::_Rep::
    _M_clone(const _Alloc& __alloc, size_type __res)
    {

      const size_type __requested_cap = this->_M_length + __res;
      _Rep* __r = _Rep::_S_create(__requested_cap, this->_M_capacity,
      __alloc);
      if (this->_M_length)
 _M_copy(__r->_M_refdata(), _M_refdata(), this->_M_length);

      __r->_M_set_length_and_sharable(this->_M_length);
      return __r->_M_refdata();
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    void
    basic_string<_CharT, _Traits, _Alloc>::
    resize(size_type __n, _CharT __c)
    {
      const size_type __size = this->size();
      _M_check_length(__size, __n, "basic_string::resize");
      if (__size < __n)
 this->append(__n - __size, __c);
      else if (__n < __size)
 this->erase(__n);

    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    template<typename _InputIterator>
      basic_string<_CharT, _Traits, _Alloc>&
      basic_string<_CharT, _Traits, _Alloc>::
      _M_replace_dispatch(iterator __i1, iterator __i2, _InputIterator __k1,
     _InputIterator __k2, __false_type)
      {
 const basic_string __s(__k1, __k2);
 const size_type __n1 = __i2 - __i1;
 _M_check_length(__n1, __s.size(), "basic_string::_M_replace_dispatch");
 return _M_replace_safe(__i1 - _M_ibegin(), __n1, __s._M_data(),
          __s.size());
      }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_aux(size_type __pos1, size_type __n1, size_type __n2,
     _CharT __c)
    {
      _M_check_length(__n1, __n2, "basic_string::_M_replace_aux");
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_assign(_M_data() + __pos1, __n2, __c);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>&
    basic_string<_CharT, _Traits, _Alloc>::
    _M_replace_safe(size_type __pos1, size_type __n1, const _CharT* __s,
      size_type __n2)
    {
      _M_mutate(__pos1, __n1, __n2);
      if (__n2)
 _M_copy(_M_data() + __pos1, __s, __n2);
      return *this;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
       const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      ;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      const __size_type __len = _Traits::length(__lhs);
      __string_type __str;
      __str.reserve(__len + __rhs.size());
      __str.append(__lhs, __len);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_string<_CharT, _Traits, _Alloc>
    operator+(_CharT __lhs, const basic_string<_CharT, _Traits, _Alloc>& __rhs)
    {
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;
      __string_type __str;
      const __size_type __len = __rhs.size();
      __str.reserve(__len + 1);
      __str.append(__size_type(1), __lhs);
      __str.append(__rhs);
      return __str;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    copy(_CharT* __s, size_type __n, size_type __pos) const
    {
      _M_check(__pos, "basic_string::copy");
      __n = _M_limit(__pos, __n);
      ;
      if (__n)
 _M_copy(__s, _M_data() + __pos, __n);

      return __n;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      const size_type __size = this->size();
      const _CharT* __data = _M_data();

      if (__n == 0)
 return __pos <= __size ? __pos : npos;

      if (__n <= __size)
 {
   for (; __pos <= __size - __n; ++__pos)
     if (traits_type::eq(__data[__pos], __s[0])
  && traits_type::compare(__data + __pos + 1,
     __s + 1, __n - 1) == 0)
       return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find(_CharT __c, size_type __pos) const
    {
      size_type __ret = npos;
      const size_type __size = this->size();
      if (__pos < __size)
 {
   const _CharT* __data = _M_data();
   const size_type __n = __size - __pos;
   const _CharT* __p = traits_type::find(__data + __pos, __n, __c);
   if (__p)
     __ret = __p - __data;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      const size_type __size = this->size();
      if (__n <= __size)
 {
   __pos = std::min(size_type(__size - __n), __pos);
   const _CharT* __data = _M_data();
   do
     {
       if (traits_type::compare(__data + __pos, __s, __n) == 0)
  return __pos;
     }
   while (__pos-- > 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    rfind(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   for (++__size; __size-- > 0; )
     if (traits_type::eq(_M_data()[__size], __c))
       return __size;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      for (; __n && __pos < this->size(); ++__pos)
 {
   const _CharT* __p = traits_type::find(__s, __n, _M_data()[__pos]);
   if (__p)
     return __pos;
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      size_type __size = this->size();
      if (__size && __n)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size-- != 0);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::find(__s, __n, _M_data()[__pos]))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_first_not_of(_CharT __c, size_type __pos) const
    {
      for (; __pos < this->size(); ++__pos)
 if (!traits_type::eq(_M_data()[__pos], __c))
   return __pos;
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(const _CharT* __s, size_type __pos, size_type __n) const
    {
      ;
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::find(__s, __n, _M_data()[__size]))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    typename basic_string<_CharT, _Traits, _Alloc>::size_type
    basic_string<_CharT, _Traits, _Alloc>::
    find_last_not_of(_CharT __c, size_type __pos) const
    {
      size_type __size = this->size();
      if (__size)
 {
   if (--__size > __pos)
     __size = __pos;
   do
     {
       if (!traits_type::eq(_M_data()[__size], __c))
  return __size;
     }
   while (__size--);
 }
      return npos;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n, const basic_string& __str) const
    {
      _M_check(__pos, "basic_string::compare");
      __n = _M_limit(__pos, __n);
      const size_type __osize = __str.size();
      const size_type __len = std::min(__n, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __str.data(), __len);
      if (!__r)
 __r = _S_compare(__n, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(size_type __pos1, size_type __n1, const basic_string& __str,
     size_type __pos2, size_type __n2) const
    {
      _M_check(__pos1, "basic_string::compare");
      __str._M_check(__pos2, "basic_string::compare");
      __n1 = _M_limit(__pos1, __n1);
      __n2 = __str._M_limit(__pos2, __n2);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos1,
         __str.data() + __pos2, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string<_CharT, _Traits, _Alloc>::
    compare(const _CharT* __s) const
    {
      ;
      const size_type __size = this->size();
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__size, __osize);
      int __r = traits_type::compare(_M_data(), __s, __len);
      if (!__r)
 __r = _S_compare(__size, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __osize = traits_type::length(__s);
      const size_type __len = std::min(__n1, __osize);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __osize);
      return __r;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    int
    basic_string <_CharT, _Traits, _Alloc>::
    compare(size_type __pos, size_type __n1, const _CharT* __s,
     size_type __n2) const
    {
      ;
      _M_check(__pos, "basic_string::compare");
      __n1 = _M_limit(__pos, __n1);
      const size_type __len = std::min(__n1, __n2);
      int __r = traits_type::compare(_M_data() + __pos, __s, __len);
      if (!__r)
 __r = _S_compare(__n1, __n2);
      return __r;
    }


  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in,
        basic_string<_CharT, _Traits, _Alloc>& __str)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;
      typedef ctype<_CharT> __ctype_type;
      typedef typename __ctype_type::ctype_base __ctype_base;

      __size_type __extracted = 0;
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       __str.erase();
       _CharT __buf[128];
       __size_type __len = 0;
       const streamsize __w = __in.width();
       const __size_type __n = __w > 0 ? static_cast<__size_type>(__w)
                                : __str.max_size();
       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(__ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    if (__len == sizeof(__buf) / sizeof(_CharT))
      {
        __str.append(__buf, sizeof(__buf) / sizeof(_CharT));
        __len = 0;
      }
    __buf[__len++] = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }
       __str.append(__buf, __len);

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }

      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    basic_istream<_CharT, _Traits>&
    getline(basic_istream<_CharT, _Traits>& __in,
     basic_string<_CharT, _Traits, _Alloc>& __str, _CharT __delim)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __istream_type::ios_base __ios_base;
      typedef typename __istream_type::int_type __int_type;
      typedef typename __string_type::size_type __size_type;

      __size_type __extracted = 0;
      const __size_type __n = __str.max_size();
      typename __ios_base::iostate __err = __ios_base::goodbit;
      typename __istream_type::sentry __cerb(__in, true);
      if (__cerb)
 {
   try
     {
       __str.erase();
       const __int_type __idelim = _Traits::to_int_type(__delim);
       const __int_type __eof = _Traits::eof();
       __int_type __c = __in.rdbuf()->sgetc();

       while (__extracted < __n
       && !_Traits::eq_int_type(__c, __eof)
       && !_Traits::eq_int_type(__c, __idelim))
  {
    __str += _Traits::to_char_type(__c);
    ++__extracted;
    __c = __in.rdbuf()->snextc();
  }

       if (_Traits::eq_int_type(__c, __eof))
  __err |= __ios_base::eofbit;
       else if (_Traits::eq_int_type(__c, __idelim))
  {
    ++__extracted;
    __in.rdbuf()->sbumpc();
  }
       else
  __err |= __ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(__ios_base::badbit);
       throw;
     }
   catch(...)
     {



       __in._M_setstate(__ios_base::badbit);
     }
 }
      if (!__extracted)
 __err |= __ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }





  extern template class basic_string<char>;
  extern template
    basic_istream<char>&
    operator>>(basic_istream<char>&, string&);
  extern template
    basic_ostream<char>&
    operator<<(basic_ostream<char>&, const string&);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&, char);
  extern template
    basic_istream<char>&
    getline(basic_istream<char>&, string&);


  extern template class basic_string<wchar_t>;
  extern template
    basic_istream<wchar_t>&
    operator>>(basic_istream<wchar_t>&, wstring&);
  extern template
    basic_ostream<wchar_t>&
    operator<<(basic_ostream<wchar_t>&, const wstring&);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&, wchar_t);
  extern template
    basic_istream<wchar_t>&
    getline(basic_istream<wchar_t>&, wstring&);



}
# 57 "/usr/include/c++/4.4/string" 2 3
# 6 "/home/neil/vlab-4.4.0/include/lintrfc.h" 2
# 1 "/usr/include/c++/4.4/iostream" 1 3
# 37 "/usr/include/c++/4.4/iostream" 3
       
# 38 "/usr/include/c++/4.4/iostream" 3


# 1 "/usr/include/c++/4.4/ostream" 1 3
# 38 "/usr/include/c++/4.4/ostream" 3
       
# 39 "/usr/include/c++/4.4/ostream" 3

# 1 "/usr/include/c++/4.4/ios" 1 3
# 37 "/usr/include/c++/4.4/ios" 3
       
# 38 "/usr/include/c++/4.4/ios" 3





# 1 "/usr/include/c++/4.4/bits/ios_base.h" 1 3
# 39 "/usr/include/c++/4.4/bits/ios_base.h" 3
       
# 40 "/usr/include/c++/4.4/bits/ios_base.h" 3



# 1 "/usr/include/c++/4.4/bits/locale_classes.h" 1 3
# 39 "/usr/include/c++/4.4/bits/locale_classes.h" 3
       
# 40 "/usr/include/c++/4.4/bits/locale_classes.h" 3





namespace std __attribute__ ((__visibility__ ("default"))) {
# 61 "/usr/include/c++/4.4/bits/locale_classes.h" 3
  class locale
  {
  public:


    typedef int category;


    class facet;
    class id;
    class _Impl;

    friend class facet;
    friend class _Impl;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;
# 97 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    static const category none = 0;
    static const category ctype = 1L << 0;
    static const category numeric = 1L << 1;
    static const category collate = 1L << 2;
    static const category time = 1L << 3;
    static const category monetary = 1L << 4;
    static const category messages = 1L << 5;
    static const category all = (ctype | numeric | collate |
        time | monetary | messages);
# 116 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    locale() throw();
# 125 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    locale(const locale& __other) throw();
# 135 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    explicit
    locale(const char* __s);
# 150 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    locale(const locale& __base, const char* __s, category __cat);
# 163 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    locale(const locale& __base, const locale& __add, category __cat);
# 175 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    template<typename _Facet>
      locale(const locale& __other, _Facet* __f);


    ~locale() throw();
# 189 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    const locale&
    operator=(const locale& __other) throw();
# 204 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    template<typename _Facet>
      locale
      combine(const locale& __other) const;






    string
    name() const;
# 223 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    bool
    operator==(const locale& __other) const throw ();







    bool
    operator!=(const locale& __other) const throw ()
    { return !(this->operator==(__other)); }
# 251 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    template<typename _Char, typename _Traits, typename _Alloc>
      bool
      operator()(const basic_string<_Char, _Traits, _Alloc>& __s1,
   const basic_string<_Char, _Traits, _Alloc>& __s2) const;
# 267 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    static locale
    global(const locale&);




    static const locale&
    classic();

  private:

    _Impl* _M_impl;


    static _Impl* _S_classic;


    static _Impl* _S_global;





    static const char* const* const _S_categories;
# 302 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    enum { _S_categories_size = 6 + 6 };


    static __gthread_once_t _S_once;


    explicit
    locale(_Impl*) throw();

    static void
    _S_initialize();

    static void
    _S_initialize_once();

    static category
    _S_normalize_category(category);

    void
    _M_coalesce(const locale& __base, const locale& __add, category __cat);
  };
# 335 "/usr/include/c++/4.4/bits/locale_classes.h" 3
  class locale::facet
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    mutable _Atomic_word _M_refcount;


    static __c_locale _S_c_locale;


    static const char _S_c_name[2];


    static __gthread_once_t _S_once;


    static void
    _S_initialize_once();

  protected:
# 366 "/usr/include/c++/4.4/bits/locale_classes.h" 3
    explicit
    facet(size_t __refs = 0) throw() : _M_refcount(__refs ? 1 : 0)
    { }


    virtual
    ~facet();

    static void
    _S_create_c_locale(__c_locale& __cloc, const char* __s,
         __c_locale __old = 0);

    static __c_locale
    _S_clone_c_locale(__c_locale& __cloc);

    static void
    _S_destroy_c_locale(__c_locale& __cloc);



    static __c_locale
    _S_get_c_locale();

    static const char*
    _S_get_c_name();

  private:
    void
    _M_add_reference() const throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() const throw()
    {
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    facet(const facet&);

    facet&
    operator=(const facet&);
  };
# 426 "/usr/include/c++/4.4/bits/locale_classes.h" 3
  class locale::id
  {
  private:
    friend class locale;
    friend class locale::_Impl;

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw ();




    mutable size_t _M_index;


    static _Atomic_word _S_refcount;

    void
    operator=(const id&);

    id(const id&);

  public:



    id() { }

    size_t
    _M_id() const;
  };



  class locale::_Impl
  {
  public:

    friend class locale;
    friend class locale::facet;

    template<typename _Facet>
      friend bool
      has_facet(const locale&) throw();

    template<typename _Facet>
      friend const _Facet&
      use_facet(const locale&);

    template<typename _Cache>
      friend struct __use_cache;

  private:

    _Atomic_word _M_refcount;
    const facet** _M_facets;
    size_t _M_facets_size;
    const facet** _M_caches;
    char** _M_names;
    static const locale::id* const _S_id_ctype[];
    static const locale::id* const _S_id_numeric[];
    static const locale::id* const _S_id_collate[];
    static const locale::id* const _S_id_time[];
    static const locale::id* const _S_id_monetary[];
    static const locale::id* const _S_id_messages[];
    static const locale::id* const* const _S_facet_categories[];

    void
    _M_add_reference() throw()
    { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }

    void
    _M_remove_reference() throw()
    {
      if (__gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1) == 1)
 {
   try
     { delete this; }
   catch(...)
     { }
 }
    }

    _Impl(const _Impl&, size_t);
    _Impl(const char*, size_t);
    _Impl(size_t) throw();

   ~_Impl() throw();

    _Impl(const _Impl&);

    void
    operator=(const _Impl&);

    bool
    _M_check_same_name()
    {
      bool __ret = true;
      if (_M_names[1])

 for (size_t __i = 0; __ret && __i < _S_categories_size - 1; ++__i)
   __ret = __builtin_strcmp(_M_names[__i], _M_names[__i + 1]) == 0;
      return __ret;
    }

    void
    _M_replace_categories(const _Impl*, category);

    void
    _M_replace_category(const _Impl*, const locale::id* const*);

    void
    _M_replace_facet(const _Impl*, const locale::id*);

    void
    _M_install_facet(const locale::id*, const facet*);

    template<typename _Facet>
      void
      _M_init_facet(_Facet* __facet)
      { _M_install_facet(&_Facet::id, __facet); }

    void
    _M_install_cache(const facet*, size_t);
  };
# 569 "/usr/include/c++/4.4/bits/locale_classes.h" 3
  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw();
# 586 "/usr/include/c++/4.4/bits/locale_classes.h" 3
  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc);
# 603 "/usr/include/c++/4.4/bits/locale_classes.h" 3
  template<typename _CharT>
    class collate : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


    protected:


      __c_locale _M_c_locale_collate;

    public:

      static locale::id id;
# 630 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      explicit
      collate(size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_get_c_locale())
      { }
# 644 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      explicit
      collate(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_c_locale_collate(_S_clone_c_locale(__cloc))
      { }
# 661 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      int
      compare(const _CharT* __lo1, const _CharT* __hi1,
       const _CharT* __lo2, const _CharT* __hi2) const
      { return this->do_compare(__lo1, __hi1, __lo2, __hi2); }
# 680 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      string_type
      transform(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_transform(__lo, __hi); }
# 694 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      long
      hash(const _CharT* __lo, const _CharT* __hi) const
      { return this->do_hash(__lo, __hi); }


      int
      _M_compare(const _CharT*, const _CharT*) const;

      size_t
      _M_transform(_CharT*, const _CharT*, size_t) const;

  protected:

      virtual
      ~collate()
      { _S_destroy_c_locale(_M_c_locale_collate); }
# 723 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      virtual int
      do_compare(const _CharT* __lo1, const _CharT* __hi1,
   const _CharT* __lo2, const _CharT* __hi2) const;
# 739 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      virtual string_type
      do_transform(const _CharT* __lo, const _CharT* __hi) const;
# 752 "/usr/include/c++/4.4/bits/locale_classes.h" 3
      virtual long
      do_hash(const _CharT* __lo, const _CharT* __hi) const;
    };

  template<typename _CharT>
    locale::id collate<_CharT>::id;


  template<>
    int
    collate<char>::_M_compare(const char*, const char*) const;

  template<>
    size_t
    collate<char>::_M_transform(char*, const char*, size_t) const;


  template<>
    int
    collate<wchar_t>::_M_compare(const wchar_t*, const wchar_t*) const;

  template<>
    size_t
    collate<wchar_t>::_M_transform(wchar_t*, const wchar_t*, size_t) const;



  template<typename _CharT>
    class collate_byname : public collate<_CharT>
    {
    public:


      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;


      explicit
      collate_byname(const char* __s, size_t __refs = 0)
      : collate<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_collate);
     this->_S_create_c_locale(this->_M_c_locale_collate, __s);
   }
      }

    protected:
      virtual
      ~collate_byname() { }
    };

}


# 1 "/usr/include/c++/4.4/bits/locale_classes.tcc" 1 3
# 37 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3
       
# 38 "/usr/include/c++/4.4/bits/locale_classes.tcc" 3

namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _Facet>
    locale::
    locale(const locale& __other, _Facet* __f)
    {
      _M_impl = new _Impl(*__other._M_impl, 1);

      try
 { _M_impl->_M_install_facet(&_Facet::id, __f); }
      catch(...)
 {
   _M_impl->_M_remove_reference();
   throw;
 }
      delete [] _M_impl->_M_names[0];
      _M_impl->_M_names[0] = 0;
    }

  template<typename _Facet>
    locale
    locale::
    combine(const locale& __other) const
    {
      _Impl* __tmp = new _Impl(*_M_impl, 1);
      try
 {
   __tmp->_M_replace_facet(__other._M_impl, &_Facet::id);
 }
      catch(...)
 {
   __tmp->_M_remove_reference();
   throw;
 }
      return locale(__tmp);
    }

  template<typename _CharT, typename _Traits, typename _Alloc>
    bool
    locale::
    operator()(const basic_string<_CharT, _Traits, _Alloc>& __s1,
        const basic_string<_CharT, _Traits, _Alloc>& __s2) const
    {
      typedef std::collate<_CharT> __collate_type;
      const __collate_type& __collate = use_facet<__collate_type>(*this);
      return (__collate.compare(__s1.data(), __s1.data() + __s1.length(),
    __s2.data(), __s2.data() + __s2.length()) < 0);
    }


  template<typename _Facet>
    bool
    has_facet(const locale& __loc) throw()
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      return (__i < __loc._M_impl->_M_facets_size

       && dynamic_cast<const _Facet*>(__facets[__i]));



    }

  template<typename _Facet>
    const _Facet&
    use_facet(const locale& __loc)
    {
      const size_t __i = _Facet::id._M_id();
      const locale::facet** __facets = __loc._M_impl->_M_facets;
      if (__i >= __loc._M_impl->_M_facets_size || !__facets[__i])
        __throw_bad_cast();

      return dynamic_cast<const _Facet&>(*__facets[__i]);



    }



  template<typename _CharT>
    int
    collate<_CharT>::_M_compare(const _CharT*, const _CharT*) const
    { return 0; }


  template<typename _CharT>
    size_t
    collate<_CharT>::_M_transform(_CharT*, const _CharT*, size_t) const
    { return 0; }

  template<typename _CharT>
    int
    collate<_CharT>::
    do_compare(const _CharT* __lo1, const _CharT* __hi1,
        const _CharT* __lo2, const _CharT* __hi2) const
    {


      const string_type __one(__lo1, __hi1);
      const string_type __two(__lo2, __hi2);

      const _CharT* __p = __one.c_str();
      const _CharT* __pend = __one.data() + __one.length();
      const _CharT* __q = __two.c_str();
      const _CharT* __qend = __two.data() + __two.length();




      for (;;)
 {
   const int __res = _M_compare(__p, __q);
   if (__res)
     return __res;

   __p += char_traits<_CharT>::length(__p);
   __q += char_traits<_CharT>::length(__q);
   if (__p == __pend && __q == __qend)
     return 0;
   else if (__p == __pend)
     return -1;
   else if (__q == __qend)
     return 1;

   __p++;
   __q++;
 }
    }

  template<typename _CharT>
    typename collate<_CharT>::string_type
    collate<_CharT>::
    do_transform(const _CharT* __lo, const _CharT* __hi) const
    {
      string_type __ret;


      const string_type __str(__lo, __hi);

      const _CharT* __p = __str.c_str();
      const _CharT* __pend = __str.data() + __str.length();

      size_t __len = (__hi - __lo) * 2;

      _CharT* __c = new _CharT[__len];

      try
 {



   for (;;)
     {

       size_t __res = _M_transform(__c, __p, __len);


       if (__res >= __len)
  {
    __len = __res + 1;
    delete [] __c, __c = 0;
    __c = new _CharT[__len];
    __res = _M_transform(__c, __p, __len);
  }

       __ret.append(__c, __res);
       __p += char_traits<_CharT>::length(__p);
       if (__p == __pend)
  break;

       __p++;
       __ret.push_back(_CharT());
     }
 }
      catch(...)
 {
   delete [] __c;
   throw;
 }

      delete [] __c;

      return __ret;
    }

  template<typename _CharT>
    long
    collate<_CharT>::
    do_hash(const _CharT* __lo, const _CharT* __hi) const
    {
      unsigned long __val = 0;
      for (; __lo < __hi; ++__lo)
 __val =
   *__lo + ((__val << 7)
     | (__val >> (__gnu_cxx::__numeric_traits<unsigned long>::
    __digits - 7)));
      return static_cast<long>(__val);
    }





  extern template class collate<char>;
  extern template class collate_byname<char>;

  extern template
    const collate<char>&
    use_facet<collate<char> >(const locale&);

  extern template
    bool
    has_facet<collate<char> >(const locale&);


  extern template class collate<wchar_t>;
  extern template class collate_byname<wchar_t>;

  extern template
    const collate<wchar_t>&
    use_facet<collate<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<collate<wchar_t> >(const locale&);



}
# 810 "/usr/include/c++/4.4/bits/locale_classes.h" 2 3
# 44 "/usr/include/c++/4.4/bits/ios_base.h" 2 3
# 54 "/usr/include/c++/4.4/bits/ios_base.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {





  enum _Ios_Fmtflags
    {
      _S_boolalpha = 1L << 0,
      _S_dec = 1L << 1,
      _S_fixed = 1L << 2,
      _S_hex = 1L << 3,
      _S_internal = 1L << 4,
      _S_left = 1L << 5,
      _S_oct = 1L << 6,
      _S_right = 1L << 7,
      _S_scientific = 1L << 8,
      _S_showbase = 1L << 9,
      _S_showpoint = 1L << 10,
      _S_showpos = 1L << 11,
      _S_skipws = 1L << 12,
      _S_unitbuf = 1L << 13,
      _S_uppercase = 1L << 14,
      _S_adjustfield = _S_left | _S_right | _S_internal,
      _S_basefield = _S_dec | _S_oct | _S_hex,
      _S_floatfield = _S_scientific | _S_fixed,
      _S_ios_fmtflags_end = 1L << 16
    };

  inline _Ios_Fmtflags
  operator&(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator|(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Fmtflags
  operator^(_Ios_Fmtflags __a, _Ios_Fmtflags __b)
  { return _Ios_Fmtflags(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Fmtflags&
  operator|=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a | __b; }

  inline _Ios_Fmtflags&
  operator&=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a & __b; }

  inline _Ios_Fmtflags&
  operator^=(_Ios_Fmtflags& __a, _Ios_Fmtflags __b)
  { return __a = __a ^ __b; }

  inline _Ios_Fmtflags
  operator~(_Ios_Fmtflags __a)
  { return _Ios_Fmtflags(~static_cast<int>(__a)); }


  enum _Ios_Openmode
    {
      _S_app = 1L << 0,
      _S_ate = 1L << 1,
      _S_bin = 1L << 2,
      _S_in = 1L << 3,
      _S_out = 1L << 4,
      _S_trunc = 1L << 5,
      _S_ios_openmode_end = 1L << 16
    };

  inline _Ios_Openmode
  operator&(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator|(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Openmode
  operator^(_Ios_Openmode __a, _Ios_Openmode __b)
  { return _Ios_Openmode(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Openmode&
  operator|=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a | __b; }

  inline _Ios_Openmode&
  operator&=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a & __b; }

  inline _Ios_Openmode&
  operator^=(_Ios_Openmode& __a, _Ios_Openmode __b)
  { return __a = __a ^ __b; }

  inline _Ios_Openmode
  operator~(_Ios_Openmode __a)
  { return _Ios_Openmode(~static_cast<int>(__a)); }


  enum _Ios_Iostate
    {
      _S_goodbit = 0,
      _S_badbit = 1L << 0,
      _S_eofbit = 1L << 1,
      _S_failbit = 1L << 2,
      _S_ios_iostate_end = 1L << 16
    };

  inline _Ios_Iostate
  operator&(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) & static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator|(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) | static_cast<int>(__b)); }

  inline _Ios_Iostate
  operator^(_Ios_Iostate __a, _Ios_Iostate __b)
  { return _Ios_Iostate(static_cast<int>(__a) ^ static_cast<int>(__b)); }

  inline _Ios_Iostate&
  operator|=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a | __b; }

  inline _Ios_Iostate&
  operator&=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a & __b; }

  inline _Ios_Iostate&
  operator^=(_Ios_Iostate& __a, _Ios_Iostate __b)
  { return __a = __a ^ __b; }

  inline _Ios_Iostate
  operator~(_Ios_Iostate __a)
  { return _Ios_Iostate(~static_cast<int>(__a)); }

  enum _Ios_Seekdir
    {
      _S_beg = 0,
      _S_cur = 1,
      _S_end = 2,
      _S_ios_seekdir_end = 1L << 16
    };
# 207 "/usr/include/c++/4.4/bits/ios_base.h" 3
  class ios_base
  {
  public:







    class failure : public exception
    {
    public:


      explicit
      failure(const string& __str) throw();



      virtual
      ~failure() throw();

      virtual const char*
      what() const throw();

    private:
      string _M_msg;
    };
# 263 "/usr/include/c++/4.4/bits/ios_base.h" 3
    typedef _Ios_Fmtflags fmtflags;


    static const fmtflags boolalpha = _S_boolalpha;


    static const fmtflags dec = _S_dec;


    static const fmtflags fixed = _S_fixed;


    static const fmtflags hex = _S_hex;




    static const fmtflags internal = _S_internal;



    static const fmtflags left = _S_left;


    static const fmtflags oct = _S_oct;



    static const fmtflags right = _S_right;


    static const fmtflags scientific = _S_scientific;



    static const fmtflags showbase = _S_showbase;



    static const fmtflags showpoint = _S_showpoint;


    static const fmtflags showpos = _S_showpos;


    static const fmtflags skipws = _S_skipws;


    static const fmtflags unitbuf = _S_unitbuf;



    static const fmtflags uppercase = _S_uppercase;


    static const fmtflags adjustfield = _S_adjustfield;


    static const fmtflags basefield = _S_basefield;


    static const fmtflags floatfield = _S_floatfield;
# 338 "/usr/include/c++/4.4/bits/ios_base.h" 3
    typedef _Ios_Iostate iostate;



    static const iostate badbit = _S_badbit;


    static const iostate eofbit = _S_eofbit;




    static const iostate failbit = _S_failbit;


    static const iostate goodbit = _S_goodbit;
# 369 "/usr/include/c++/4.4/bits/ios_base.h" 3
    typedef _Ios_Openmode openmode;


    static const openmode app = _S_app;


    static const openmode ate = _S_ate;




    static const openmode binary = _S_bin;


    static const openmode in = _S_in;


    static const openmode out = _S_out;


    static const openmode trunc = _S_trunc;
# 401 "/usr/include/c++/4.4/bits/ios_base.h" 3
    typedef _Ios_Seekdir seekdir;


    static const seekdir beg = _S_beg;


    static const seekdir cur = _S_cur;


    static const seekdir end = _S_end;


    typedef int io_state;
    typedef int open_mode;
    typedef int seek_dir;

    typedef std::streampos streampos;
    typedef std::streamoff streamoff;
# 427 "/usr/include/c++/4.4/bits/ios_base.h" 3
    enum event
    {
      erase_event,
      imbue_event,
      copyfmt_event
    };
# 444 "/usr/include/c++/4.4/bits/ios_base.h" 3
    typedef void (*event_callback) (event, ios_base&, int);
# 456 "/usr/include/c++/4.4/bits/ios_base.h" 3
    void
    register_callback(event_callback __fn, int __index);

  protected:




    streamsize _M_precision;
    streamsize _M_width;
    fmtflags _M_flags;
    iostate _M_exception;
    iostate _M_streambuf_state;




    struct _Callback_list
    {

      _Callback_list* _M_next;
      ios_base::event_callback _M_fn;
      int _M_index;
      _Atomic_word _M_refcount;

      _Callback_list(ios_base::event_callback __fn, int __index,
       _Callback_list* __cb)
      : _M_next(__cb), _M_fn(__fn), _M_index(__index), _M_refcount(0) { }

      void
      _M_add_reference() { __gnu_cxx::__atomic_add_dispatch(&_M_refcount, 1); }


      int
      _M_remove_reference()
      { return __gnu_cxx::__exchange_and_add_dispatch(&_M_refcount, -1); }
    };

     _Callback_list* _M_callbacks;

    void
    _M_call_callbacks(event __ev) throw();

    void
    _M_dispose_callbacks(void);


    struct _Words
    {
      void* _M_pword;
      long _M_iword;
      _Words() : _M_pword(0), _M_iword(0) { }
    };


    _Words _M_word_zero;



    enum { _S_local_word_size = 8 };
    _Words _M_local_word[_S_local_word_size];


    int _M_word_size;
    _Words* _M_word;

    _Words&
    _M_grow_words(int __index, bool __iword);


    locale _M_ios_locale;

    void
    _M_init();

  public:





    class Init
    {
      friend class ios_base;
    public:
      Init();
      ~Init();

    private:
      static _Atomic_word _S_refcount;
      static bool _S_synced_with_stdio;
    };






    fmtflags
    flags() const
    { return _M_flags; }
# 565 "/usr/include/c++/4.4/bits/ios_base.h" 3
    fmtflags
    flags(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags = __fmtfl;
      return __old;
    }
# 581 "/usr/include/c++/4.4/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl)
    {
      fmtflags __old = _M_flags;
      _M_flags |= __fmtfl;
      return __old;
    }
# 598 "/usr/include/c++/4.4/bits/ios_base.h" 3
    fmtflags
    setf(fmtflags __fmtfl, fmtflags __mask)
    {
      fmtflags __old = _M_flags;
      _M_flags &= ~__mask;
      _M_flags |= (__fmtfl & __mask);
      return __old;
    }







    void
    unsetf(fmtflags __mask)
    { _M_flags &= ~__mask; }
# 624 "/usr/include/c++/4.4/bits/ios_base.h" 3
    streamsize
    precision() const
    { return _M_precision; }






    streamsize
    precision(streamsize __prec)
    {
      streamsize __old = _M_precision;
      _M_precision = __prec;
      return __old;
    }







    streamsize
    width() const
    { return _M_width; }






    streamsize
    width(streamsize __wide)
    {
      streamsize __old = _M_width;
      _M_width = __wide;
      return __old;
    }
# 675 "/usr/include/c++/4.4/bits/ios_base.h" 3
    static bool
    sync_with_stdio(bool __sync = true);
# 687 "/usr/include/c++/4.4/bits/ios_base.h" 3
    locale
    imbue(const locale& __loc);
# 698 "/usr/include/c++/4.4/bits/ios_base.h" 3
    locale
    getloc() const
    { return _M_ios_locale; }
# 709 "/usr/include/c++/4.4/bits/ios_base.h" 3
    const locale&
    _M_getloc() const
    { return _M_ios_locale; }
# 728 "/usr/include/c++/4.4/bits/ios_base.h" 3
    static int
    xalloc() throw();
# 744 "/usr/include/c++/4.4/bits/ios_base.h" 3
    long&
    iword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, true);
      return __word._M_iword;
    }
# 765 "/usr/include/c++/4.4/bits/ios_base.h" 3
    void*&
    pword(int __ix)
    {
      _Words& __word = (__ix < _M_word_size)
   ? _M_word[__ix] : _M_grow_words(__ix, false);
      return __word._M_pword;
    }
# 782 "/usr/include/c++/4.4/bits/ios_base.h" 3
    virtual ~ios_base();

  protected:
    ios_base();



  private:
    ios_base(const ios_base&);

    ios_base&
    operator=(const ios_base&);
  };



  inline ios_base&
  boolalpha(ios_base& __base)
  {
    __base.setf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  noboolalpha(ios_base& __base)
  {
    __base.unsetf(ios_base::boolalpha);
    return __base;
  }


  inline ios_base&
  showbase(ios_base& __base)
  {
    __base.setf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  noshowbase(ios_base& __base)
  {
    __base.unsetf(ios_base::showbase);
    return __base;
  }


  inline ios_base&
  showpoint(ios_base& __base)
  {
    __base.setf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  noshowpoint(ios_base& __base)
  {
    __base.unsetf(ios_base::showpoint);
    return __base;
  }


  inline ios_base&
  showpos(ios_base& __base)
  {
    __base.setf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  noshowpos(ios_base& __base)
  {
    __base.unsetf(ios_base::showpos);
    return __base;
  }


  inline ios_base&
  skipws(ios_base& __base)
  {
    __base.setf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  noskipws(ios_base& __base)
  {
    __base.unsetf(ios_base::skipws);
    return __base;
  }


  inline ios_base&
  uppercase(ios_base& __base)
  {
    __base.setf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  nouppercase(ios_base& __base)
  {
    __base.unsetf(ios_base::uppercase);
    return __base;
  }


  inline ios_base&
  unitbuf(ios_base& __base)
  {
     __base.setf(ios_base::unitbuf);
     return __base;
  }


  inline ios_base&
  nounitbuf(ios_base& __base)
  {
     __base.unsetf(ios_base::unitbuf);
     return __base;
  }



  inline ios_base&
  internal(ios_base& __base)
  {
     __base.setf(ios_base::internal, ios_base::adjustfield);
     return __base;
  }


  inline ios_base&
  left(ios_base& __base)
  {
    __base.setf(ios_base::left, ios_base::adjustfield);
    return __base;
  }


  inline ios_base&
  right(ios_base& __base)
  {
    __base.setf(ios_base::right, ios_base::adjustfield);
    return __base;
  }



  inline ios_base&
  dec(ios_base& __base)
  {
    __base.setf(ios_base::dec, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  hex(ios_base& __base)
  {
    __base.setf(ios_base::hex, ios_base::basefield);
    return __base;
  }


  inline ios_base&
  oct(ios_base& __base)
  {
    __base.setf(ios_base::oct, ios_base::basefield);
    return __base;
  }



  inline ios_base&
  fixed(ios_base& __base)
  {
    __base.setf(ios_base::fixed, ios_base::floatfield);
    return __base;
  }


  inline ios_base&
  scientific(ios_base& __base)
  {
    __base.setf(ios_base::scientific, ios_base::floatfield);
    return __base;
  }

}
# 44 "/usr/include/c++/4.4/ios" 2 3
# 1 "/usr/include/c++/4.4/streambuf" 1 3
# 37 "/usr/include/c++/4.4/streambuf" 3
       
# 38 "/usr/include/c++/4.4/streambuf" 3
# 46 "/usr/include/c++/4.4/streambuf" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>*,
     basic_streambuf<_CharT, _Traits>*, bool&);
# 113 "/usr/include/c++/4.4/streambuf" 3
  template<typename _CharT, typename _Traits>
    class basic_streambuf
    {
    public:






      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;




      typedef basic_streambuf<char_type, traits_type> __streambuf_type;


      friend class basic_ios<char_type, traits_type>;
      friend class basic_istream<char_type, traits_type>;
      friend class basic_ostream<char_type, traits_type>;
      friend class istreambuf_iterator<char_type, traits_type>;
      friend class ostreambuf_iterator<char_type, traits_type>;

      friend streamsize
      __copy_streambufs_eof<>(__streambuf_type*, __streambuf_type*, bool&);

      template<bool _IsMove, typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
        __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
        friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
      istreambuf_iterator<_CharT2> >::__type
        find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

      template<typename _CharT2, typename _Traits2>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&, _CharT2*);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        operator>>(basic_istream<_CharT2, _Traits2>&,
     basic_string<_CharT2, _Traits2, _Alloc>&);

      template<typename _CharT2, typename _Traits2, typename _Alloc>
        friend basic_istream<_CharT2, _Traits2>&
        getline(basic_istream<_CharT2, _Traits2>&,
  basic_string<_CharT2, _Traits2, _Alloc>&, _CharT2);

    protected:
# 179 "/usr/include/c++/4.4/streambuf" 3
      char_type* _M_in_beg;
      char_type* _M_in_cur;
      char_type* _M_in_end;
      char_type* _M_out_beg;
      char_type* _M_out_cur;
      char_type* _M_out_end;


      locale _M_buf_locale;

  public:

      virtual
      ~basic_streambuf()
      { }
# 203 "/usr/include/c++/4.4/streambuf" 3
      locale
      pubimbue(const locale &__loc)
      {
 locale __tmp(this->getloc());
 this->imbue(__loc);
 _M_buf_locale = __loc;
 return __tmp;
      }
# 220 "/usr/include/c++/4.4/streambuf" 3
      locale
      getloc() const
      { return _M_buf_locale; }
# 233 "/usr/include/c++/4.4/streambuf" 3
      __streambuf_type*
      pubsetbuf(char_type* __s, streamsize __n)
      { return this->setbuf(__s, __n); }

      pos_type
      pubseekoff(off_type __off, ios_base::seekdir __way,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekoff(__off, __way, __mode); }

      pos_type
      pubseekpos(pos_type __sp,
   ios_base::openmode __mode = ios_base::in | ios_base::out)
      { return this->seekpos(__sp, __mode); }

      int
      pubsync() { return this->sync(); }
# 260 "/usr/include/c++/4.4/streambuf" 3
      streamsize
      in_avail()
      {
 const streamsize __ret = this->egptr() - this->gptr();
 return __ret ? __ret : this->showmanyc();
      }
# 274 "/usr/include/c++/4.4/streambuf" 3
      int_type
      snextc()
      {
 int_type __ret = traits_type::eof();
 if (__builtin_expect(!traits_type::eq_int_type(this->sbumpc(),
             __ret), true))
   __ret = this->sgetc();
 return __ret;
      }
# 292 "/usr/include/c++/4.4/streambuf" 3
      int_type
      sbumpc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 else
   __ret = this->uflow();
 return __ret;
      }
# 314 "/usr/include/c++/4.4/streambuf" 3
      int_type
      sgetc()
      {
 int_type __ret;
 if (__builtin_expect(this->gptr() < this->egptr(), true))
   __ret = traits_type::to_int_type(*this->gptr());
 else
   __ret = this->underflow();
 return __ret;
      }
# 333 "/usr/include/c++/4.4/streambuf" 3
      streamsize
      sgetn(char_type* __s, streamsize __n)
      { return this->xsgetn(__s, __n); }
# 347 "/usr/include/c++/4.4/streambuf" 3
      int_type
      sputbackc(char_type __c)
      {
 int_type __ret;
 const bool __testpos = this->eback() < this->gptr();
 if (__builtin_expect(!__testpos ||
        !traits_type::eq(__c, this->gptr()[-1]), false))
   __ret = this->pbackfail(traits_type::to_int_type(__c));
 else
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 return __ret;
      }
# 372 "/usr/include/c++/4.4/streambuf" 3
      int_type
      sungetc()
      {
 int_type __ret;
 if (__builtin_expect(this->eback() < this->gptr(), true))
   {
     this->gbump(-1);
     __ret = traits_type::to_int_type(*this->gptr());
   }
 else
   __ret = this->pbackfail();
 return __ret;
      }
# 399 "/usr/include/c++/4.4/streambuf" 3
      int_type
      sputc(char_type __c)
      {
 int_type __ret;
 if (__builtin_expect(this->pptr() < this->epptr(), true))
   {
     *this->pptr() = __c;
     this->pbump(1);
     __ret = traits_type::to_int_type(__c);
   }
 else
   __ret = this->overflow(traits_type::to_int_type(__c));
 return __ret;
      }
# 425 "/usr/include/c++/4.4/streambuf" 3
      streamsize
      sputn(const char_type* __s, streamsize __n)
      { return this->xsputn(__s, __n); }

    protected:
# 439 "/usr/include/c++/4.4/streambuf" 3
      basic_streambuf()
      : _M_in_beg(0), _M_in_cur(0), _M_in_end(0),
      _M_out_beg(0), _M_out_cur(0), _M_out_end(0),
      _M_buf_locale(locale())
      { }
# 457 "/usr/include/c++/4.4/streambuf" 3
      char_type*
      eback() const { return _M_in_beg; }

      char_type*
      gptr() const { return _M_in_cur; }

      char_type*
      egptr() const { return _M_in_end; }
# 473 "/usr/include/c++/4.4/streambuf" 3
      void
      gbump(int __n) { _M_in_cur += __n; }
# 484 "/usr/include/c++/4.4/streambuf" 3
      void
      setg(char_type* __gbeg, char_type* __gnext, char_type* __gend)
      {
 _M_in_beg = __gbeg;
 _M_in_cur = __gnext;
 _M_in_end = __gend;
      }
# 504 "/usr/include/c++/4.4/streambuf" 3
      char_type*
      pbase() const { return _M_out_beg; }

      char_type*
      pptr() const { return _M_out_cur; }

      char_type*
      epptr() const { return _M_out_end; }
# 520 "/usr/include/c++/4.4/streambuf" 3
      void
      pbump(int __n) { _M_out_cur += __n; }
# 530 "/usr/include/c++/4.4/streambuf" 3
      void
      setp(char_type* __pbeg, char_type* __pend)
      {
 _M_out_beg = _M_out_cur = __pbeg;
 _M_out_end = __pend;
      }
# 551 "/usr/include/c++/4.4/streambuf" 3
      virtual void
      imbue(const locale&)
      { }
# 566 "/usr/include/c++/4.4/streambuf" 3
      virtual basic_streambuf<char_type,_Traits>*
      setbuf(char_type*, streamsize)
      { return this; }
# 577 "/usr/include/c++/4.4/streambuf" 3
      virtual pos_type
      seekoff(off_type, ios_base::seekdir,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 589 "/usr/include/c++/4.4/streambuf" 3
      virtual pos_type
      seekpos(pos_type,
       ios_base::openmode = ios_base::in | ios_base::out)
      { return pos_type(off_type(-1)); }
# 602 "/usr/include/c++/4.4/streambuf" 3
      virtual int
      sync() { return 0; }
# 624 "/usr/include/c++/4.4/streambuf" 3
      virtual streamsize
      showmanyc() { return 0; }
# 640 "/usr/include/c++/4.4/streambuf" 3
      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);
# 662 "/usr/include/c++/4.4/streambuf" 3
      virtual int_type
      underflow()
      { return traits_type::eof(); }
# 675 "/usr/include/c++/4.4/streambuf" 3
      virtual int_type
      uflow()
      {
 int_type __ret = traits_type::eof();
 const bool __testeof = traits_type::eq_int_type(this->underflow(),
       __ret);
 if (!__testeof)
   {
     __ret = traits_type::to_int_type(*this->gptr());
     this->gbump(1);
   }
 return __ret;
      }
# 699 "/usr/include/c++/4.4/streambuf" 3
      virtual int_type
      pbackfail(int_type = traits_type::eof())
      { return traits_type::eof(); }
# 717 "/usr/include/c++/4.4/streambuf" 3
      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);
# 742 "/usr/include/c++/4.4/streambuf" 3
      virtual int_type
      overflow(int_type = traits_type::eof())
      { return traits_type::eof(); }



    public:
# 757 "/usr/include/c++/4.4/streambuf" 3
      void
      stossc()
      {
 if (this->gptr() < this->egptr())
   this->gbump(1);
 else
   this->uflow();
      }


    private:


      basic_streambuf(const __streambuf_type& __sb)
      : _M_in_beg(__sb._M_in_beg), _M_in_cur(__sb._M_in_cur),
      _M_in_end(__sb._M_in_end), _M_out_beg(__sb._M_out_beg),
      _M_out_cur(__sb._M_out_cur), _M_out_end(__sb._M_out_cur),
      _M_buf_locale(__sb._M_buf_locale)
      { }

      __streambuf_type&
      operator=(const __streambuf_type&) { return *this; };
    };


  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>* __sbin,
     basic_streambuf<char>* __sbout, bool& __ineof);

  template<>
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>* __sbin,
     basic_streambuf<wchar_t>* __sbout, bool& __ineof);


}


# 1 "/usr/include/c++/4.4/bits/streambuf.tcc" 1 3
# 38 "/usr/include/c++/4.4/bits/streambuf.tcc" 3
       
# 39 "/usr/include/c++/4.4/bits/streambuf.tcc" 3

namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsgetn(char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->egptr() - this->gptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(__s, this->gptr(), __len);
       __ret += __len;
       __s += __len;
       this->gbump(__len);
     }

   if (__ret < __n)
     {
       const int_type __c = this->uflow();
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    traits_type::assign(*__s++, traits_type::to_char_type(__c));
    ++__ret;
  }
       else
  break;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_streambuf<_CharT, _Traits>::
    xsputn(const char_type* __s, streamsize __n)
    {
      streamsize __ret = 0;
      while (__ret < __n)
 {
   const streamsize __buf_len = this->epptr() - this->pptr();
   if (__buf_len)
     {
       const streamsize __remaining = __n - __ret;
       const streamsize __len = std::min(__buf_len, __remaining);
       traits_type::copy(this->pptr(), __s, __len);
       __ret += __len;
       __s += __len;
       this->pbump(__len);
     }

   if (__ret < __n)
     {
       int_type __c = this->overflow(traits_type::to_int_type(*__s));
       if (!traits_type::eq_int_type(__c, traits_type::eof()))
  {
    ++__ret;
    ++__s;
  }
       else
  break;
     }
 }
      return __ret;
    }




  template<typename _CharT, typename _Traits>
    streamsize
    __copy_streambufs_eof(basic_streambuf<_CharT, _Traits>* __sbin,
     basic_streambuf<_CharT, _Traits>* __sbout,
     bool& __ineof)
    {
      streamsize __ret = 0;
      __ineof = true;
      typename _Traits::int_type __c = __sbin->sgetc();
      while (!_Traits::eq_int_type(__c, _Traits::eof()))
 {
   __c = __sbout->sputc(_Traits::to_char_type(__c));
   if (_Traits::eq_int_type(__c, _Traits::eof()))
     {
       __ineof = false;
       break;
     }
   ++__ret;
   __c = __sbin->snextc();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    inline streamsize
    __copy_streambufs(basic_streambuf<_CharT, _Traits>* __sbin,
        basic_streambuf<_CharT, _Traits>* __sbout)
    {
      bool __ineof;
      return __copy_streambufs_eof(__sbin, __sbout, __ineof);
    }





  extern template class basic_streambuf<char>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<char>*,
        basic_streambuf<char>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<char>*,
     basic_streambuf<char>*, bool&);


  extern template class basic_streambuf<wchar_t>;
  extern template
    streamsize
    __copy_streambufs(basic_streambuf<wchar_t>*,
        basic_streambuf<wchar_t>*);
  extern template
    streamsize
    __copy_streambufs_eof(basic_streambuf<wchar_t>*,
     basic_streambuf<wchar_t>*, bool&);



}
# 797 "/usr/include/c++/4.4/streambuf" 2 3
# 45 "/usr/include/c++/4.4/ios" 2 3
# 1 "/usr/include/c++/4.4/bits/basic_ios.h" 1 3
# 35 "/usr/include/c++/4.4/bits/basic_ios.h" 3
       
# 36 "/usr/include/c++/4.4/bits/basic_ios.h" 3



# 1 "/usr/include/c++/4.4/bits/locale_facets.h" 1 3
# 39 "/usr/include/c++/4.4/bits/locale_facets.h" 3
       
# 40 "/usr/include/c++/4.4/bits/locale_facets.h" 3

# 1 "/usr/include/c++/4.4/cwctype" 1 3
# 41 "/usr/include/c++/4.4/cwctype" 3
       
# 42 "/usr/include/c++/4.4/cwctype" 3




# 1 "/usr/include/wctype.h" 1 3 4
# 34 "/usr/include/wctype.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 35 "/usr/include/wctype.h" 2 3 4
# 50 "/usr/include/wctype.h" 3 4



typedef unsigned long int wctype_t;

# 72 "/usr/include/wctype.h" 3 4
enum
{
  __ISwupper = 0,
  __ISwlower = 1,
  __ISwalpha = 2,
  __ISwdigit = 3,
  __ISwxdigit = 4,
  __ISwspace = 5,
  __ISwprint = 6,
  __ISwgraph = 7,
  __ISwblank = 8,
  __ISwcntrl = 9,
  __ISwpunct = 10,
  __ISwalnum = 11,

  _ISwupper = ((__ISwupper) < 8 ? (int) ((1UL << (__ISwupper)) << 24) : ((__ISwupper) < 16 ? (int) ((1UL << (__ISwupper)) << 8) : ((__ISwupper) < 24 ? (int) ((1UL << (__ISwupper)) >> 8) : (int) ((1UL << (__ISwupper)) >> 24)))),
  _ISwlower = ((__ISwlower) < 8 ? (int) ((1UL << (__ISwlower)) << 24) : ((__ISwlower) < 16 ? (int) ((1UL << (__ISwlower)) << 8) : ((__ISwlower) < 24 ? (int) ((1UL << (__ISwlower)) >> 8) : (int) ((1UL << (__ISwlower)) >> 24)))),
  _ISwalpha = ((__ISwalpha) < 8 ? (int) ((1UL << (__ISwalpha)) << 24) : ((__ISwalpha) < 16 ? (int) ((1UL << (__ISwalpha)) << 8) : ((__ISwalpha) < 24 ? (int) ((1UL << (__ISwalpha)) >> 8) : (int) ((1UL << (__ISwalpha)) >> 24)))),
  _ISwdigit = ((__ISwdigit) < 8 ? (int) ((1UL << (__ISwdigit)) << 24) : ((__ISwdigit) < 16 ? (int) ((1UL << (__ISwdigit)) << 8) : ((__ISwdigit) < 24 ? (int) ((1UL << (__ISwdigit)) >> 8) : (int) ((1UL << (__ISwdigit)) >> 24)))),
  _ISwxdigit = ((__ISwxdigit) < 8 ? (int) ((1UL << (__ISwxdigit)) << 24) : ((__ISwxdigit) < 16 ? (int) ((1UL << (__ISwxdigit)) << 8) : ((__ISwxdigit) < 24 ? (int) ((1UL << (__ISwxdigit)) >> 8) : (int) ((1UL << (__ISwxdigit)) >> 24)))),
  _ISwspace = ((__ISwspace) < 8 ? (int) ((1UL << (__ISwspace)) << 24) : ((__ISwspace) < 16 ? (int) ((1UL << (__ISwspace)) << 8) : ((__ISwspace) < 24 ? (int) ((1UL << (__ISwspace)) >> 8) : (int) ((1UL << (__ISwspace)) >> 24)))),
  _ISwprint = ((__ISwprint) < 8 ? (int) ((1UL << (__ISwprint)) << 24) : ((__ISwprint) < 16 ? (int) ((1UL << (__ISwprint)) << 8) : ((__ISwprint) < 24 ? (int) ((1UL << (__ISwprint)) >> 8) : (int) ((1UL << (__ISwprint)) >> 24)))),
  _ISwgraph = ((__ISwgraph) < 8 ? (int) ((1UL << (__ISwgraph)) << 24) : ((__ISwgraph) < 16 ? (int) ((1UL << (__ISwgraph)) << 8) : ((__ISwgraph) < 24 ? (int) ((1UL << (__ISwgraph)) >> 8) : (int) ((1UL << (__ISwgraph)) >> 24)))),
  _ISwblank = ((__ISwblank) < 8 ? (int) ((1UL << (__ISwblank)) << 24) : ((__ISwblank) < 16 ? (int) ((1UL << (__ISwblank)) << 8) : ((__ISwblank) < 24 ? (int) ((1UL << (__ISwblank)) >> 8) : (int) ((1UL << (__ISwblank)) >> 24)))),
  _ISwcntrl = ((__ISwcntrl) < 8 ? (int) ((1UL << (__ISwcntrl)) << 24) : ((__ISwcntrl) < 16 ? (int) ((1UL << (__ISwcntrl)) << 8) : ((__ISwcntrl) < 24 ? (int) ((1UL << (__ISwcntrl)) >> 8) : (int) ((1UL << (__ISwcntrl)) >> 24)))),
  _ISwpunct = ((__ISwpunct) < 8 ? (int) ((1UL << (__ISwpunct)) << 24) : ((__ISwpunct) < 16 ? (int) ((1UL << (__ISwpunct)) << 8) : ((__ISwpunct) < 24 ? (int) ((1UL << (__ISwpunct)) >> 8) : (int) ((1UL << (__ISwpunct)) >> 24)))),
  _ISwalnum = ((__ISwalnum) < 8 ? (int) ((1UL << (__ISwalnum)) << 24) : ((__ISwalnum) < 16 ? (int) ((1UL << (__ISwalnum)) << 8) : ((__ISwalnum) < 24 ? (int) ((1UL << (__ISwalnum)) >> 8) : (int) ((1UL << (__ISwalnum)) >> 24))))
};



extern "C" {








extern int iswalnum (wint_t __wc) throw ();





extern int iswalpha (wint_t __wc) throw ();


extern int iswcntrl (wint_t __wc) throw ();



extern int iswdigit (wint_t __wc) throw ();



extern int iswgraph (wint_t __wc) throw ();




extern int iswlower (wint_t __wc) throw ();


extern int iswprint (wint_t __wc) throw ();




extern int iswpunct (wint_t __wc) throw ();




extern int iswspace (wint_t __wc) throw ();




extern int iswupper (wint_t __wc) throw ();




extern int iswxdigit (wint_t __wc) throw ();





extern int iswblank (wint_t __wc) throw ();
# 172 "/usr/include/wctype.h" 3 4
extern wctype_t wctype (__const char *__property) throw ();



extern int iswctype (wint_t __wc, wctype_t __desc) throw ();










typedef __const __int32_t *wctrans_t;







extern wint_t towlower (wint_t __wc) throw ();


extern wint_t towupper (wint_t __wc) throw ();


}
# 214 "/usr/include/wctype.h" 3 4
extern "C" {




extern wctrans_t wctrans (__const char *__property) throw ();


extern wint_t towctrans (wint_t __wc, wctrans_t __desc) throw ();








extern int iswalnum_l (wint_t __wc, __locale_t __locale) throw ();





extern int iswalpha_l (wint_t __wc, __locale_t __locale) throw ();


extern int iswcntrl_l (wint_t __wc, __locale_t __locale) throw ();



extern int iswdigit_l (wint_t __wc, __locale_t __locale) throw ();



extern int iswgraph_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswlower_l (wint_t __wc, __locale_t __locale) throw ();


extern int iswprint_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswpunct_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswspace_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswupper_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswxdigit_l (wint_t __wc, __locale_t __locale) throw ();




extern int iswblank_l (wint_t __wc, __locale_t __locale) throw ();



extern wctype_t wctype_l (__const char *__property, __locale_t __locale)
     throw ();



extern int iswctype_l (wint_t __wc, wctype_t __desc, __locale_t __locale)
     throw ();







extern wint_t towlower_l (wint_t __wc, __locale_t __locale) throw ();


extern wint_t towupper_l (wint_t __wc, __locale_t __locale) throw ();



extern wctrans_t wctrans_l (__const char *__property, __locale_t __locale)
     throw ();


extern wint_t towctrans_l (wint_t __wc, wctrans_t __desc,
      __locale_t __locale) throw ();



}
# 47 "/usr/include/c++/4.4/cwctype" 2 3
# 76 "/usr/include/c++/4.4/cwctype" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  using ::wctrans_t;
  using ::wctype_t;
  using ::wint_t;

  using ::iswalnum;
  using ::iswalpha;

  using ::iswblank;

  using ::iswcntrl;
  using ::iswctype;
  using ::iswdigit;
  using ::iswgraph;
  using ::iswlower;
  using ::iswprint;
  using ::iswpunct;
  using ::iswspace;
  using ::iswupper;
  using ::iswxdigit;
  using ::towctrans;
  using ::towlower;
  using ::towupper;
  using ::wctrans;
  using ::wctype;

}
# 42 "/usr/include/c++/4.4/bits/locale_facets.h" 2 3
# 1 "/usr/include/c++/4.4/cctype" 1 3
# 41 "/usr/include/c++/4.4/cctype" 3
       
# 42 "/usr/include/c++/4.4/cctype" 3
# 43 "/usr/include/c++/4.4/bits/locale_facets.h" 2 3
# 1 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_base.h" 1 3
# 37 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_base.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {


  struct ctype_base
  {

    typedef const int* __to_type;



    typedef unsigned short mask;
    static const mask upper = _ISupper;
    static const mask lower = _ISlower;
    static const mask alpha = _ISalpha;
    static const mask digit = _ISdigit;
    static const mask xdigit = _ISxdigit;
    static const mask space = _ISspace;
    static const mask print = _ISprint;
    static const mask graph = _ISalpha | _ISdigit | _ISpunct;
    static const mask cntrl = _IScntrl;
    static const mask punct = _ISpunct;
    static const mask alnum = _ISalpha | _ISdigit;
  };

}
# 44 "/usr/include/c++/4.4/bits/locale_facets.h" 2 3






# 1 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 1 3
# 35 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3
       
# 36 "/usr/include/c++/4.4/bits/streambuf_iterator.h" 3




namespace std __attribute__ ((__visibility__ ("default"))) {



  template<typename _CharT, typename _Traits>
    class istreambuf_iterator
    : public iterator<input_iterator_tag, _CharT, typename _Traits::off_type,
        _CharT*, _CharT&>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename _Traits::int_type int_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_istream<_CharT, _Traits> istream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

      template<bool _IsMove, typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
            _CharT2*>::__type
 __copy_move_a2(istreambuf_iterator<_CharT2>,
         istreambuf_iterator<_CharT2>, _CharT2*);

      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
               istreambuf_iterator<_CharT2> >::__type
 find(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      const _CharT2&);

    private:







      mutable streambuf_type* _M_sbuf;
      mutable int_type _M_c;

    public:

      istreambuf_iterator() throw()
      : _M_sbuf(0), _M_c(traits_type::eof()) { }


      istreambuf_iterator(istream_type& __s) throw()
      : _M_sbuf(__s.rdbuf()), _M_c(traits_type::eof()) { }


      istreambuf_iterator(streambuf_type* __s) throw()
      : _M_sbuf(__s), _M_c(traits_type::eof()) { }




      char_type
      operator*() const
      {







 return traits_type::to_char_type(_M_get());
      }


      istreambuf_iterator&
      operator++()
      {
 ;


 if (_M_sbuf)
   {
     _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return *this;
      }


      istreambuf_iterator
      operator++(int)
      {
 ;



 istreambuf_iterator __old = *this;
 if (_M_sbuf)
   {
     __old._M_c = _M_sbuf->sbumpc();
     _M_c = traits_type::eof();
   }
 return __old;
      }





      bool
      equal(const istreambuf_iterator& __b) const
      { return _M_at_eof() == __b._M_at_eof(); }

    private:
      int_type
      _M_get() const
      {
 const int_type __eof = traits_type::eof();
 int_type __ret = __eof;
 if (_M_sbuf)
   {
     if (!traits_type::eq_int_type(_M_c, __eof))
       __ret = _M_c;
     else if (!traits_type::eq_int_type((__ret = _M_sbuf->sgetc()),
            __eof))
       _M_c = __ret;
     else
       _M_sbuf = 0;
   }
 return __ret;
      }

      bool
      _M_at_eof() const
      {
 const int_type __eof = traits_type::eof();
 return traits_type::eq_int_type(_M_get(), __eof);
      }
    };

  template<typename _CharT, typename _Traits>
    inline bool
    operator==(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return __a.equal(__b); }

  template<typename _CharT, typename _Traits>
    inline bool
    operator!=(const istreambuf_iterator<_CharT, _Traits>& __a,
        const istreambuf_iterator<_CharT, _Traits>& __b)
    { return !__a.equal(__b); }


  template<typename _CharT, typename _Traits>
    class ostreambuf_iterator
    : public iterator<output_iterator_tag, void, void, void, void>
    {
    public:



      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> streambuf_type;
      typedef basic_ostream<_CharT, _Traits> ostream_type;


      template<typename _CharT2>
 friend typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value,
                      ostreambuf_iterator<_CharT2> >::__type
 copy(istreambuf_iterator<_CharT2>, istreambuf_iterator<_CharT2>,
      ostreambuf_iterator<_CharT2>);

    private:
      streambuf_type* _M_sbuf;
      bool _M_failed;

    public:

      ostreambuf_iterator(ostream_type& __s) throw ()
      : _M_sbuf(__s.rdbuf()), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator(streambuf_type* __s) throw ()
      : _M_sbuf(__s), _M_failed(!_M_sbuf) { }


      ostreambuf_iterator&
      operator=(_CharT __c)
      {
 if (!_M_failed &&
     _Traits::eq_int_type(_M_sbuf->sputc(__c), _Traits::eof()))
   _M_failed = true;
 return *this;
      }


      ostreambuf_iterator&
      operator*()
      { return *this; }


      ostreambuf_iterator&
      operator++(int)
      { return *this; }


      ostreambuf_iterator&
      operator++()
      { return *this; }


      bool
      failed() const throw()
      { return _M_failed; }

      ostreambuf_iterator&
      _M_put(const _CharT* __ws, streamsize __len)
      {
 if (__builtin_expect(!_M_failed, true)
     && __builtin_expect(this->_M_sbuf->sputn(__ws, __len) != __len,
    false))
   _M_failed = true;
 return *this;
      }
    };


  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
                           ostreambuf_iterator<_CharT> >::__type
    copy(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last,
  ostreambuf_iterator<_CharT> __result)
    {
      if (__first._M_sbuf && !__last._M_sbuf && !__result._M_failed)
 {
   bool __ineof;
   __copy_streambufs_eof(__first._M_sbuf, __result._M_sbuf, __ineof);
   if (!__ineof)
     __result._M_failed = true;
 }
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(_CharT* __first, _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
        ostreambuf_iterator<_CharT> >::__type
    __copy_move_a2(const _CharT* __first, const _CharT* __last,
     ostreambuf_iterator<_CharT> __result)
    {
      const streamsize __num = __last - __first;
      if (__num > 0)
 __result._M_put(__first, __num);
      return __result;
    }

  template<bool _IsMove, typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
            _CharT*>::__type
    __copy_move_a2(istreambuf_iterator<_CharT> __first,
     istreambuf_iterator<_CharT> __last, _CharT* __result)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof()))
     {
       const streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    traits_type::copy(__result, __sb->gptr(), __n);
    __sb->gbump(__n);
    __result += __n;
    __c = __sb->underflow();
  }
       else
  {
    *__result++ = traits_type::to_char_type(__c);
    __c = __sb->snextc();
  }
     }
 }
      return __result;
    }

  template<typename _CharT>
    typename __gnu_cxx::__enable_if<__is_char<_CharT>::__value,
          istreambuf_iterator<_CharT> >::__type
    find(istreambuf_iterator<_CharT> __first,
  istreambuf_iterator<_CharT> __last, const _CharT& __val)
    {
      typedef istreambuf_iterator<_CharT> __is_iterator_type;
      typedef typename __is_iterator_type::traits_type traits_type;
      typedef typename __is_iterator_type::streambuf_type streambuf_type;
      typedef typename traits_type::int_type int_type;

      if (__first._M_sbuf && !__last._M_sbuf)
 {
   const int_type __ival = traits_type::to_int_type(__val);
   streambuf_type* __sb = __first._M_sbuf;
   int_type __c = __sb->sgetc();
   while (!traits_type::eq_int_type(__c, traits_type::eof())
   && !traits_type::eq_int_type(__c, __ival))
     {
       streamsize __n = __sb->egptr() - __sb->gptr();
       if (__n > 1)
  {
    const _CharT* __p = traits_type::find(__sb->gptr(),
       __n, __val);
    if (__p)
      __n = __p - __sb->gptr();
    __sb->gbump(__n);
    __c = __sb->sgetc();
  }
       else
  __c = __sb->snextc();
     }

   if (!traits_type::eq_int_type(__c, traits_type::eof()))
     __first._M_c = __c;
   else
     __first._M_sbuf = 0;
 }
      return __first;
    }

}
# 51 "/usr/include/c++/4.4/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default"))) {
# 64 "/usr/include/c++/4.4/bits/locale_facets.h" 3
  template<typename _Tv>
    void
    __convert_to_v(const char* __in, _Tv& __out, ios_base::iostate& __err,
     const __c_locale& __cloc);


  template<>
    void
    __convert_to_v(const char*, float&, ios_base::iostate&,
     const __c_locale&);

  template<>
    void
    __convert_to_v(const char*, double&, ios_base::iostate&,
     const __c_locale&);

  template<>
    void
    __convert_to_v(const char*, long double&, ios_base::iostate&,
     const __c_locale&);



  template<typename _CharT, typename _Traits>
    struct __pad
    {
      static void
      _S_pad(ios_base& __io, _CharT __fill, _CharT* __news,
      const _CharT* __olds, streamsize __newlen, streamsize __oldlen);
    };






  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last);




  template<typename _CharT>
    inline
    ostreambuf_iterator<_CharT>
    __write(ostreambuf_iterator<_CharT> __s, const _CharT* __ws, int __len)
    {
      __s._M_put(__ws, __len);
      return __s;
    }


  template<typename _CharT, typename _OutIter>
    inline
    _OutIter
    __write(_OutIter __s, const _CharT* __ws, int __len)
    {
      for (int __j = 0; __j < __len; __j++, ++__s)
 *__s = __ws[__j];
      return __s;
    }
# 143 "/usr/include/c++/4.4/bits/locale_facets.h" 3
  template<typename _CharT>
    class __ctype_abstract_base : public locale::facet, public ctype_base
    {
    public:


      typedef _CharT char_type;
# 161 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      bool
      is(mask __m, char_type __c) const
      { return this->do_is(__m, __c); }
# 178 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type*
      is(const char_type *__lo, const char_type *__hi, mask *__vec) const
      { return this->do_is(__lo, __hi, __vec); }
# 194 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type*
      scan_is(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_is(__m, __lo, __hi); }
# 210 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type*
      scan_not(mask __m, const char_type* __lo, const char_type* __hi) const
      { return this->do_scan_not(__m, __lo, __hi); }
# 224 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 239 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 253 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 268 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 285 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      { return this->do_widen(__c); }
# 304 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      { return this->do_widen(__lo, __hi, __to); }
# 323 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return this->do_narrow(__c, __dfault); }
# 345 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
       char __dfault, char *__to) const
      { return this->do_narrow(__lo, __hi, __dfault, __to); }

    protected:
      explicit
      __ctype_abstract_base(size_t __refs = 0): facet(__refs) { }

      virtual
      ~__ctype_abstract_base() { }
# 370 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const = 0;
# 389 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi,
     mask* __vec) const = 0;
# 408 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo,
   const char_type* __hi) const = 0;
# 427 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const = 0;
# 445 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const = 0;
# 462 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const = 0;
# 478 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const = 0;
# 495 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const = 0;
# 514 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char) const = 0;
# 535 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi,
        char_type* __dest) const = 0;
# 557 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type, char __dfault) const = 0;
# 581 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const = 0;
    };
# 604 "/usr/include/c++/4.4/bits/locale_facets.h" 3
  template<typename _CharT>
    class ctype : public __ctype_abstract_base<_CharT>
    {
    public:

      typedef _CharT char_type;
      typedef typename __ctype_abstract_base<_CharT>::mask mask;


      static locale::id id;

      explicit
      ctype(size_t __refs = 0) : __ctype_abstract_base<_CharT>(__refs) { }

   protected:
      virtual
      ~ctype();

      virtual bool
      do_is(mask __m, char_type __c) const;

      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;

      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;

      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;

      virtual char_type
      do_toupper(char_type __c) const;

      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_tolower(char_type __c) const;

      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;

      virtual char_type
      do_widen(char __c) const;

      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;

      virtual char
      do_narrow(char_type, char __dfault) const;

      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;
    };

  template<typename _CharT>
    locale::id ctype<_CharT>::id;
# 673 "/usr/include/c++/4.4/bits/locale_facets.h" 3
  template<>
    class ctype<char> : public locale::facet, public ctype_base
    {
    public:


      typedef char char_type;

    protected:

      __c_locale _M_c_locale_ctype;
      bool _M_del;
      __to_type _M_toupper;
      __to_type _M_tolower;
      const mask* _M_table;
      mutable char _M_widen_ok;
      mutable char _M_widen[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow[1 + static_cast<unsigned char>(-1)];
      mutable char _M_narrow_ok;


    public:

      static locale::id id;

      static const size_t table_size = 1 + static_cast<unsigned char>(-1);
# 710 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      explicit
      ctype(const mask* __table = 0, bool __del = false, size_t __refs = 0);
# 723 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, const mask* __table = 0, bool __del = false,
     size_t __refs = 0);
# 736 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      inline bool
      is(mask __m, char __c) const;
# 751 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      inline const char*
      is(const char* __lo, const char* __hi, mask* __vec) const;
# 765 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      inline const char*
      scan_is(mask __m, const char* __lo, const char* __hi) const;
# 779 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      inline const char*
      scan_not(mask __m, const char* __lo, const char* __hi) const;
# 794 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      toupper(char_type __c) const
      { return this->do_toupper(__c); }
# 811 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type*
      toupper(char_type *__lo, const char_type* __hi) const
      { return this->do_toupper(__lo, __hi); }
# 827 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      tolower(char_type __c) const
      { return this->do_tolower(__c); }
# 844 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type*
      tolower(char_type* __lo, const char_type* __hi) const
      { return this->do_tolower(__lo, __hi); }
# 864 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      widen(char __c) const
      {
 if (_M_widen_ok)
   return _M_widen[static_cast<unsigned char>(__c)];
 this->_M_widen_init();
 return this->do_widen(__c);
      }
# 891 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char*
      widen(const char* __lo, const char* __hi, char_type* __to) const
      {
 if (_M_widen_ok == 1)
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_widen_ok)
   _M_widen_init();
 return this->do_widen(__lo, __hi, __to);
      }
# 922 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char
      narrow(char_type __c, char __dfault) const
      {
 if (_M_narrow[static_cast<unsigned char>(__c)])
   return _M_narrow[static_cast<unsigned char>(__c)];
 const char __t = do_narrow(__c, __dfault);
 if (__t != __dfault)
   _M_narrow[static_cast<unsigned char>(__c)] = __t;
 return __t;
      }
# 955 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      const char_type*
      narrow(const char_type* __lo, const char_type* __hi,
      char __dfault, char *__to) const
      {
 if (__builtin_expect(_M_narrow_ok == 1, true))
   {
     __builtin_memcpy(__to, __lo, __hi - __lo);
     return __hi;
   }
 if (!_M_narrow_ok)
   _M_narrow_init();
 return this->do_narrow(__lo, __hi, __dfault, __to);
      }





      const mask*
      table() const throw()
      { return _M_table; }


      static const mask*
      classic_table() throw();
    protected:







      virtual
      ~ctype();
# 1004 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const;
# 1021 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1037 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const;
# 1054 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1074 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char __c) const
      { return __c; }
# 1097 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const
      {
 __builtin_memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }
# 1123 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type __c, char) const
      { return __c; }
# 1149 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char, char* __dest) const
      {
 __builtin_memcpy(__dest, __lo, __hi - __lo);
 return __hi;
      }

    private:
      void _M_narrow_init() const;
      void _M_widen_init() const;
    };
# 1174 "/usr/include/c++/4.4/bits/locale_facets.h" 3
  template<>
    class ctype<wchar_t> : public __ctype_abstract_base<wchar_t>
    {
    public:


      typedef wchar_t char_type;
      typedef wctype_t __wmask_type;

    protected:
      __c_locale _M_c_locale_ctype;


      bool _M_narrow_ok;
      char _M_narrow[128];
      wint_t _M_widen[1 + static_cast<unsigned char>(-1)];


      mask _M_bit[16];
      __wmask_type _M_wmask[16];

    public:


      static locale::id id;
# 1207 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      explicit
      ctype(size_t __refs = 0);
# 1218 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      explicit
      ctype(__c_locale __cloc, size_t __refs = 0);

    protected:
      __wmask_type
      _M_convert_to_wmask(const mask __m) const;


      virtual
      ~ctype();
# 1242 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual bool
      do_is(mask __m, char_type __c) const;
# 1261 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_is(const char_type* __lo, const char_type* __hi, mask* __vec) const;
# 1279 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_is(mask __m, const char_type* __lo, const char_type* __hi) const;
# 1297 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_scan_not(mask __m, const char_type* __lo,
    const char_type* __hi) const;
# 1314 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_toupper(char_type) const;
# 1331 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_toupper(char_type* __lo, const char_type* __hi) const;
# 1347 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_tolower(char_type) const;
# 1364 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_tolower(char_type* __lo, const char_type* __hi) const;
# 1384 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_widen(char) const;
# 1406 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char*
      do_widen(const char* __lo, const char* __hi, char_type* __dest) const;
# 1429 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char
      do_narrow(char_type, char __dfault) const;
# 1455 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual const char_type*
      do_narrow(const char_type* __lo, const char_type* __hi,
  char __dfault, char* __dest) const;


      void
      _M_initialize_ctype();
    };



  template<typename _CharT>
    class ctype_byname : public ctype<_CharT>
    {
    public:
      typedef typename ctype<_CharT>::mask mask;

      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname() { };
    };


  template<>
    class ctype_byname<char> : public ctype<char>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };


  template<>
    class ctype_byname<wchar_t> : public ctype<wchar_t>
    {
    public:
      explicit
      ctype_byname(const char* __s, size_t __refs = 0);

    protected:
      virtual
      ~ctype_byname();
    };


}


# 1 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 1 3
# 37 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/ctype_inline.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  bool
  ctype<char>::
  is(mask __m, char __c) const
  { return _M_table[static_cast<unsigned char>(__c)] & __m; }

  const char*
  ctype<char>::
  is(const char* __low, const char* __high, mask* __vec) const
  {
    while (__low < __high)
      *__vec++ = _M_table[static_cast<unsigned char>(*__low++)];
    return __high;
  }

  const char*
  ctype<char>::
  scan_is(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && !(_M_table[static_cast<unsigned char>(*__low)] & __m))
      ++__low;
    return __low;
  }

  const char*
  ctype<char>::
  scan_not(mask __m, const char* __low, const char* __high) const
  {
    while (__low < __high
    && (_M_table[static_cast<unsigned char>(*__low)] & __m) != 0)
      ++__low;
    return __low;
  }

}
# 1511 "/usr/include/c++/4.4/bits/locale_facets.h" 2 3

namespace std __attribute__ ((__visibility__ ("default"))) {


  class __num_base
  {
  public:


    enum
      {
        _S_ominus,
        _S_oplus,
        _S_ox,
        _S_oX,
        _S_odigits,
        _S_odigits_end = _S_odigits + 16,
        _S_oudigits = _S_odigits_end,
        _S_oudigits_end = _S_oudigits + 16,
        _S_oe = _S_odigits + 14,
        _S_oE = _S_oudigits + 14,
 _S_oend = _S_oudigits_end
      };






    static const char* _S_atoms_out;



    static const char* _S_atoms_in;

    enum
    {
      _S_iminus,
      _S_iplus,
      _S_ix,
      _S_iX,
      _S_izero,
      _S_ie = _S_izero + 14,
      _S_iE = _S_izero + 20,
      _S_iend = 26
    };



    static void
    _S_format_float(const ios_base& __io, char* __fptr, char __mod);
  };

  template<typename _CharT>
    struct __numpunct_cache : public locale::facet
    {
      const char* _M_grouping;
      size_t _M_grouping_size;
      bool _M_use_grouping;
      const _CharT* _M_truename;
      size_t _M_truename_size;
      const _CharT* _M_falsename;
      size_t _M_falsename_size;
      _CharT _M_decimal_point;
      _CharT _M_thousands_sep;





      _CharT _M_atoms_out[__num_base::_S_oend];





      _CharT _M_atoms_in[__num_base::_S_iend];

      bool _M_allocated;

      __numpunct_cache(size_t __refs = 0) : facet(__refs),
      _M_grouping(__null), _M_grouping_size(0), _M_use_grouping(false),
      _M_truename(__null), _M_truename_size(0), _M_falsename(__null),
      _M_falsename_size(0), _M_decimal_point(_CharT()),
      _M_thousands_sep(_CharT()), _M_allocated(false)
      { }

      ~__numpunct_cache();

      void
      _M_cache(const locale& __loc);

    private:
      __numpunct_cache&
      operator=(const __numpunct_cache&);

      explicit
      __numpunct_cache(const __numpunct_cache&);
    };

  template<typename _CharT>
    __numpunct_cache<_CharT>::~__numpunct_cache()
    {
      if (_M_allocated)
 {
   delete [] _M_grouping;
   delete [] _M_truename;
   delete [] _M_falsename;
 }
    }
# 1635 "/usr/include/c++/4.4/bits/locale_facets.h" 3
  template<typename _CharT>
    class numpunct : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      typedef __numpunct_cache<_CharT> __cache_type;

    protected:
      __cache_type* _M_data;

    public:

      static locale::id id;






      explicit
      numpunct(size_t __refs = 0) : facet(__refs), _M_data(__null)
      { _M_initialize_numpunct(); }
# 1672 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      explicit
      numpunct(__cache_type* __cache, size_t __refs = 0)
      : facet(__refs), _M_data(__cache)
      { _M_initialize_numpunct(); }
# 1686 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      explicit
      numpunct(__c_locale __cloc, size_t __refs = 0)
      : facet(__refs), _M_data(__null)
      { _M_initialize_numpunct(__cloc); }
# 1700 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      decimal_point() const
      { return this->do_decimal_point(); }
# 1713 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      char_type
      thousands_sep() const
      { return this->do_thousands_sep(); }
# 1744 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      string
      grouping() const
      { return this->do_grouping(); }
# 1757 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      string_type
      truename() const
      { return this->do_truename(); }
# 1770 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      string_type
      falsename() const
      { return this->do_falsename(); }

    protected:

      virtual
      ~numpunct();
# 1787 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_decimal_point() const
      { return _M_data->_M_decimal_point; }
# 1799 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual char_type
      do_thousands_sep() const
      { return _M_data->_M_thousands_sep; }
# 1812 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual string
      do_grouping() const
      { return _M_data->_M_grouping; }
# 1825 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual string_type
      do_truename() const
      { return _M_data->_M_truename; }
# 1838 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual string_type
      do_falsename() const
      { return _M_data->_M_falsename; }


      void
      _M_initialize_numpunct(__c_locale __cloc = __null);
    };

  template<typename _CharT>
    locale::id numpunct<_CharT>::id;

  template<>
    numpunct<char>::~numpunct();

  template<>
    void
    numpunct<char>::_M_initialize_numpunct(__c_locale __cloc);


  template<>
    numpunct<wchar_t>::~numpunct();

  template<>
    void
    numpunct<wchar_t>::_M_initialize_numpunct(__c_locale __cloc);



  template<typename _CharT>
    class numpunct_byname : public numpunct<_CharT>
    {
    public:
      typedef _CharT char_type;
      typedef basic_string<_CharT> string_type;

      explicit
      numpunct_byname(const char* __s, size_t __refs = 0)
      : numpunct<_CharT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     __c_locale __tmp;
     this->_S_create_c_locale(__tmp, __s);
     this->_M_initialize_numpunct(__tmp);
     this->_S_destroy_c_locale(__tmp);
   }
      }

    protected:
      virtual
      ~numpunct_byname() { }
    };


# 1907 "/usr/include/c++/4.4/bits/locale_facets.h" 3
  template<typename _CharT, typename _InIter>
    class num_get : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _InIter iter_type;



      static locale::id id;
# 1928 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      explicit
      num_get(size_t __refs = 0) : facet(__refs) { }
# 1954 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, bool& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 1990 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned short& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned int& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }


      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, unsigned long long& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2049 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, float& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, long double& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }
# 2091 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      get(iter_type __in, iter_type __end, ios_base& __io,
   ios_base::iostate& __err, void*& __v) const
      { return this->do_get(__in, __end, __io, __err, __v); }

    protected:

      virtual ~num_get() { }

      iter_type
      _M_extract_float(iter_type, iter_type, ios_base&, ios_base::iostate&,
         string&) const;

      template<typename _ValueT>
        iter_type
        _M_extract_int(iter_type, iter_type, ios_base&, ios_base::iostate&,
         _ValueT&) const;

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<__is_char<_CharT2>::__value, int>::__type
        _M_find(const _CharT2*, size_t __len, _CharT2 __c) const
        {
   int __ret = -1;
   if (__len <= 10)
     {
       if (__c >= _CharT2('0') && __c < _CharT2(_CharT2('0') + __len))
  __ret = __c - _CharT2('0');
     }
   else
     {
       if (__c >= _CharT2('0') && __c <= _CharT2('9'))
  __ret = __c - _CharT2('0');
       else if (__c >= _CharT2('a') && __c <= _CharT2('f'))
  __ret = 10 + (__c - _CharT2('a'));
       else if (__c >= _CharT2('A') && __c <= _CharT2('F'))
  __ret = 10 + (__c - _CharT2('A'));
     }
   return __ret;
 }

      template<typename _CharT2>
      typename __gnu_cxx::__enable_if<!__is_char<_CharT2>::__value,
          int>::__type
        _M_find(const _CharT2* __zero, size_t __len, _CharT2 __c) const
        {
   int __ret = -1;
   const char_type* __q = char_traits<_CharT2>::find(__zero, __len, __c);
   if (__q)
     {
       __ret = __q - __zero;
       if (__ret > 15)
  __ret -= 6;
     }
   return __ret;
 }
# 2162 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate&, bool&) const;

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned short& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned int& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }

      virtual iter_type
      do_get(iter_type __beg, iter_type __end, ios_base& __io,
      ios_base::iostate& __err, unsigned long long& __v) const
      { return _M_extract_int(__beg, __end, __io, __err, __v); }


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      float&) const;

      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      double&) const;







      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      long double&) const;


      virtual iter_type
      do_get(iter_type, iter_type, ios_base&, ios_base::iostate& __err,
      void*&) const;
# 2227 "/usr/include/c++/4.4/bits/locale_facets.h" 3
    };

  template<typename _CharT, typename _InIter>
    locale::id num_get<_CharT, _InIter>::id;
# 2244 "/usr/include/c++/4.4/bits/locale_facets.h" 3
  template<typename _CharT, typename _OutIter>
    class num_put : public locale::facet
    {
    public:



      typedef _CharT char_type;
      typedef _OutIter iter_type;



      static locale::id id;
# 2265 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      explicit
      num_put(size_t __refs = 0) : facet(__refs) { }
# 2283 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, bool __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2325 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long __v) const
      { return this->do_put(__s, __f, __fill, __v); }


      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   unsigned long long __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2388 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill, double __v) const
      { return this->do_put(__s, __f, __fill, __v); }

      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   long double __v) const
      { return this->do_put(__s, __f, __fill, __v); }
# 2413 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      iter_type
      put(iter_type __s, ios_base& __f, char_type __fill,
   const void* __v) const
      { return this->do_put(__s, __f, __fill, __v); }

    protected:
      template<typename _ValueT>
        iter_type
        _M_insert_float(iter_type, ios_base& __io, char_type __fill,
   char __mod, _ValueT __v) const;

      void
      _M_group_float(const char* __grouping, size_t __grouping_size,
       char_type __sep, const char_type* __p, char_type* __new,
       char_type* __cs, int& __len) const;

      template<typename _ValueT>
        iter_type
        _M_insert_int(iter_type, ios_base& __io, char_type __fill,
        _ValueT __v) const;

      void
      _M_group_int(const char* __grouping, size_t __grouping_size,
     char_type __sep, ios_base& __io, char_type* __new,
     char_type* __cs, int& __len) const;

      void
      _M_pad(char_type __fill, streamsize __w, ios_base& __io,
      char_type* __new, const char_type* __cs, int& __len) const;


      virtual
      ~num_put() { };
# 2461 "/usr/include/c++/4.4/bits/locale_facets.h" 3
      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, bool __v) const;

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill, long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }

      virtual iter_type
      do_put(iter_type __s, ios_base& __io, char_type __fill,
      unsigned long long __v) const
      { return _M_insert_int(__s, __io, __fill, __v); }


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, double __v) const;






      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, long double __v) const;


      virtual iter_type
      do_put(iter_type, ios_base&, char_type __fill, const void* __v) const;







    };

  template <typename _CharT, typename _OutIter>
    locale::id num_put<_CharT, _OutIter>::id;









  template<typename _CharT>
    inline bool
    isspace(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::space, __c); }


  template<typename _CharT>
    inline bool
    isprint(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::print, __c); }


  template<typename _CharT>
    inline bool
    iscntrl(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::cntrl, __c); }


  template<typename _CharT>
    inline bool
    isupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::upper, __c); }


  template<typename _CharT>
    inline bool
    islower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::lower, __c); }


  template<typename _CharT>
    inline bool
    isalpha(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alpha, __c); }


  template<typename _CharT>
    inline bool
    isdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::digit, __c); }


  template<typename _CharT>
    inline bool
    ispunct(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::punct, __c); }


  template<typename _CharT>
    inline bool
    isxdigit(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::xdigit, __c); }


  template<typename _CharT>
    inline bool
    isalnum(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::alnum, __c); }


  template<typename _CharT>
    inline bool
    isgraph(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).is(ctype_base::graph, __c); }


  template<typename _CharT>
    inline _CharT
    toupper(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).toupper(__c); }


  template<typename _CharT>
    inline _CharT
    tolower(_CharT __c, const locale& __loc)
    { return use_facet<ctype<_CharT> >(__loc).tolower(__c); }

}


# 1 "/usr/include/c++/4.4/bits/locale_facets.tcc" 1 3
# 35 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
       
# 36 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3

namespace std __attribute__ ((__visibility__ ("default"))) {



  template<typename _Facet>
    struct __use_cache
    {
      const _Facet*
      operator() (const locale& __loc) const;
    };


  template<typename _CharT>
    struct __use_cache<__numpunct_cache<_CharT> >
    {
      const __numpunct_cache<_CharT>*
      operator() (const locale& __loc) const
      {
 const size_t __i = numpunct<_CharT>::id._M_id();
 const locale::facet** __caches = __loc._M_impl->_M_caches;
 if (!__caches[__i])
   {
     __numpunct_cache<_CharT>* __tmp = __null;
     try
       {
  __tmp = new __numpunct_cache<_CharT>;
  __tmp->_M_cache(__loc);
       }
     catch(...)
       {
  delete __tmp;
  throw;
       }
     __loc._M_impl->_M_install_cache(__tmp, __i);
   }
 return static_cast<const __numpunct_cache<_CharT>*>(__caches[__i]);
      }
    };

  template<typename _CharT>
    void
    __numpunct_cache<_CharT>::_M_cache(const locale& __loc)
    {
      _M_allocated = true;

      const numpunct<_CharT>& __np = use_facet<numpunct<_CharT> >(__loc);

      _M_grouping_size = __np.grouping().size();
      char* __grouping = new char[_M_grouping_size];
      __np.grouping().copy(__grouping, _M_grouping_size);
      _M_grouping = __grouping;
      _M_use_grouping = (_M_grouping_size
    && static_cast<signed char>(_M_grouping[0]) > 0
    && (_M_grouping[0]
        != __gnu_cxx::__numeric_traits<char>::__max));

      _M_truename_size = __np.truename().size();
      _CharT* __truename = new _CharT[_M_truename_size];
      __np.truename().copy(__truename, _M_truename_size);
      _M_truename = __truename;

      _M_falsename_size = __np.falsename().size();
      _CharT* __falsename = new _CharT[_M_falsename_size];
      __np.falsename().copy(__falsename, _M_falsename_size);
      _M_falsename = __falsename;

      _M_decimal_point = __np.decimal_point();
      _M_thousands_sep = __np.thousands_sep();

      const ctype<_CharT>& __ct = use_facet<ctype<_CharT> >(__loc);
      __ct.widen(__num_base::_S_atoms_out,
   __num_base::_S_atoms_out + __num_base::_S_oend, _M_atoms_out);
      __ct.widen(__num_base::_S_atoms_in,
   __num_base::_S_atoms_in + __num_base::_S_iend, _M_atoms_in);
    }
# 121 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
  bool
  __verify_grouping(const char* __grouping, size_t __grouping_size,
      const string& __grouping_tmp);



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    _M_extract_float(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, string& __xtrc) const
    {
      typedef char_traits<_CharT> __traits_type;
      typedef __numpunct_cache<_CharT> __cache_type;
      __use_cache<__cache_type> __uc;
      const locale& __loc = __io._M_getloc();
      const __cache_type* __lc = __uc(__loc);
      const _CharT* __lit = __lc->_M_atoms_in;
      char_type __c = char_type();


      bool __testeof = __beg == __end;


      if (!__testeof)
 {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
     {
       __xtrc += __plus ? '+' : '-';
       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 }


      bool __found_mantissa = false;
      int __sep_pos = 0;
      while (!__testeof)
 {
   if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       || __c == __lc->_M_decimal_point)
     break;
   else if (__c == __lit[__num_base::_S_izero])
     {
       if (!__found_mantissa)
  {
    __xtrc += '0';
    __found_mantissa = true;
  }
       ++__sep_pos;

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
   else
     break;
 }


      bool __found_dec = false;
      bool __found_sci = false;
      string __found_grouping;
      if (__lc->_M_use_grouping)
 __found_grouping.reserve(32);
      const char_type* __lit_zero = __lit + __num_base::_S_izero;

      if (!__lc->_M_allocated)

 while (!__testeof)
   {
     const int __digit = _M_find(__lit_zero, 10, __c);
     if (__digit != -1)
       {
  __xtrc += '0' + __digit;
  __found_mantissa = true;
       }
     else if (__c == __lc->_M_decimal_point
       && !__found_dec && !__found_sci)
       {
  __xtrc += '.';
  __found_dec = true;
       }
     else if ((__c == __lit[__num_base::_S_ie]
        || __c == __lit[__num_base::_S_iE])
       && !__found_sci && __found_mantissa)
       {

  __xtrc += 'e';
  __found_sci = true;


  if (++__beg != __end)
    {
      __c = *__beg;
      const bool __plus = __c == __lit[__num_base::_S_iplus];
      if (__plus || __c == __lit[__num_base::_S_iminus])
        __xtrc += __plus ? '+' : '-';
      else
        continue;
    }
  else
    {
      __testeof = true;
      break;
    }
       }
     else
       break;

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }
      else
 while (!__testeof)
   {


     if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
       {
  if (!__found_dec && !__found_sci)
    {


      if (__sep_pos)
        {
   __found_grouping += static_cast<char>(__sep_pos);
   __sep_pos = 0;
        }
      else
        {


   __xtrc.clear();
   break;
        }
    }
  else
    break;
       }
     else if (__c == __lc->_M_decimal_point)
       {
  if (!__found_dec && !__found_sci)
    {



      if (__found_grouping.size())
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += '.';
      __found_dec = true;
    }
  else
    break;
       }
     else
       {
  const char_type* __q =
    __traits_type::find(__lit_zero, 10, __c);
  if (__q)
    {
      __xtrc += '0' + (__q - __lit_zero);
      __found_mantissa = true;
      ++__sep_pos;
    }
  else if ((__c == __lit[__num_base::_S_ie]
     || __c == __lit[__num_base::_S_iE])
    && !__found_sci && __found_mantissa)
    {

      if (__found_grouping.size() && !__found_dec)
        __found_grouping += static_cast<char>(__sep_pos);
      __xtrc += 'e';
      __found_sci = true;


      if (++__beg != __end)
        {
   __c = *__beg;
   const bool __plus = __c == __lit[__num_base::_S_iplus];
   if ((__plus || __c == __lit[__num_base::_S_iminus])
       && !(__lc->_M_use_grouping
     && __c == __lc->_M_thousands_sep)
       && !(__c == __lc->_M_decimal_point))
        __xtrc += __plus ? '+' : '-';
   else
     continue;
        }
      else
        {
   __testeof = true;
   break;
        }
    }
  else
    break;
       }

     if (++__beg != __end)
       __c = *__beg;
     else
       __testeof = true;
   }



      if (__found_grouping.size())
        {

   if (!__found_dec && !__found_sci)
     __found_grouping += static_cast<char>(__sep_pos);

          if (!std::__verify_grouping(__lc->_M_grouping,
          __lc->_M_grouping_size,
          __found_grouping))
     __err = ios_base::failbit;
        }

      return __beg;
    }

  template<typename _CharT, typename _InIter>
    template<typename _ValueT>
      _InIter
      num_get<_CharT, _InIter>::
      _M_extract_int(_InIter __beg, _InIter __end, ios_base& __io,
       ios_base::iostate& __err, _ValueT& __v) const
      {
        typedef char_traits<_CharT> __traits_type;
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_in;
 char_type __c = char_type();


 const ios_base::fmtflags __basefield = __io.flags()
                                        & ios_base::basefield;
 const bool __oct = __basefield == ios_base::oct;
 int __base = __oct ? 8 : (__basefield == ios_base::hex ? 16 : 10);


 bool __testeof = __beg == __end;


 bool __negative = false;
 if (!__testeof)
   {
     __c = *__beg;
     __negative = __c == __lit[__num_base::_S_iminus];
     if ((__negative || __c == __lit[__num_base::_S_iplus])
  && !(__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  && !(__c == __lc->_M_decimal_point))
       {
  if (++__beg != __end)
    __c = *__beg;
  else
    __testeof = true;
       }
   }



 bool __found_zero = false;
 int __sep_pos = 0;
 while (!__testeof)
   {
     if ((__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  || __c == __lc->_M_decimal_point)
       break;
     else if (__c == __lit[__num_base::_S_izero]
       && (!__found_zero || __base == 10))
       {
  __found_zero = true;
  ++__sep_pos;
  if (__basefield == 0)
    __base = 8;
  if (__base == 8)
    __sep_pos = 0;
       }
     else if (__found_zero
       && (__c == __lit[__num_base::_S_ix]
    || __c == __lit[__num_base::_S_iX]))
       {
  if (__basefield == 0)
    __base = 16;
  if (__base == 16)
    {
      __found_zero = false;
      __sep_pos = 0;
    }
  else
    break;
       }
     else
       break;

     if (++__beg != __end)
       {
  __c = *__beg;
  if (!__found_zero)
    break;
       }
     else
       __testeof = true;
   }



 const size_t __len = (__base == 16 ? __num_base::_S_iend
         - __num_base::_S_izero : __base);


 string __found_grouping;
 if (__lc->_M_use_grouping)
   __found_grouping.reserve(32);
 bool __testfail = false;
 bool __testoverflow = false;
 const __unsigned_type __max =
   (__negative && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
   ? -__gnu_cxx::__numeric_traits<_ValueT>::__min
   : __gnu_cxx::__numeric_traits<_ValueT>::__max;
 const __unsigned_type __smax = __max / __base;
 __unsigned_type __result = 0;
 int __digit = 0;
 const char_type* __lit_zero = __lit + __num_base::_S_izero;

 if (!__lc->_M_allocated)

   while (!__testeof)
     {
       __digit = _M_find(__lit_zero, __len, __c);
       if (__digit == -1)
  break;

       if (__result > __smax)
  __testoverflow = true;
       else
  {
    __result *= __base;
    __testoverflow |= __result > __max - __digit;
    __result += __digit;
    ++__sep_pos;
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }
 else
   while (!__testeof)
     {


       if (__lc->_M_use_grouping && __c == __lc->_M_thousands_sep)
  {


    if (__sep_pos)
      {
        __found_grouping += static_cast<char>(__sep_pos);
        __sep_pos = 0;
      }
    else
      {
        __testfail = true;
        break;
      }
  }
       else if (__c == __lc->_M_decimal_point)
  break;
       else
  {
    const char_type* __q =
      __traits_type::find(__lit_zero, __len, __c);
    if (!__q)
      break;

    __digit = __q - __lit_zero;
    if (__digit > 15)
      __digit -= 6;
    if (__result > __smax)
      __testoverflow = true;
    else
      {
        __result *= __base;
        __testoverflow |= __result > __max - __digit;
        __result += __digit;
        ++__sep_pos;
      }
  }

       if (++__beg != __end)
  __c = *__beg;
       else
  __testeof = true;
     }



 if (__found_grouping.size())
   {

     __found_grouping += static_cast<char>(__sep_pos);

     if (!std::__verify_grouping(__lc->_M_grouping,
     __lc->_M_grouping_size,
     __found_grouping))
       __err = ios_base::failbit;
   }



 if ((!__sep_pos && !__found_zero && !__found_grouping.size())
     || __testfail)
   {
     __v = 0;
     __err = ios_base::failbit;
   }
 else if (__testoverflow)
   {
     if (__negative
  && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__min;
     else
       __v = __gnu_cxx::__numeric_traits<_ValueT>::__max;
     __err = ios_base::failbit;
   }
 else
   __v = __negative ? -__result : __result;

 if (__testeof)
   __err |= ios_base::eofbit;
 return __beg;
      }



  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, bool& __v) const
    {
      if (!(__io.flags() & ios_base::boolalpha))
        {



   long __l = -1;
          __beg = _M_extract_int(__beg, __end, __io, __err, __l);
   if (__l == 0 || __l == 1)
     __v = bool(__l);
   else
     {


       __v = true;
       __err = ios_base::failbit;
       if (__beg == __end)
  __err |= ios_base::eofbit;
     }
        }
      else
        {

   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   bool __testf = true;
   bool __testt = true;
   bool __donef = __lc->_M_falsename_size == 0;
   bool __donet = __lc->_M_truename_size == 0;
   bool __testeof = false;
   size_t __n = 0;
   while (!__donef || !__donet)
     {
       if (__beg == __end)
  {
    __testeof = true;
    break;
  }

       const char_type __c = *__beg;

       if (!__donef)
  __testf = __c == __lc->_M_falsename[__n];

       if (!__testf && __donet)
  break;

       if (!__donet)
  __testt = __c == __lc->_M_truename[__n];

       if (!__testt && __donef)
  break;

       if (!__testt && !__testf)
  break;

       ++__n;
       ++__beg;

       __donef = !__testf || __n >= __lc->_M_falsename_size;
       __donet = !__testt || __n >= __lc->_M_truename_size;
     }
   if (__testf && __n == __lc->_M_falsename_size && __n)
     {
       __v = false;
       if (__testt && __n == __lc->_M_truename_size)
  __err = ios_base::failbit;
       else
  __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else if (__testt && __n == __lc->_M_truename_size && __n)
     {
       __v = true;
       __err = __testeof ? ios_base::eofbit : ios_base::goodbit;
     }
   else
     {


       __v = false;
       __err = ios_base::failbit;
       if (__testeof)
  __err |= ios_base::eofbit;
     }
 }
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
    ios_base::iostate& __err, float& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }
# 715 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, long double& __v) const
    {
      string __xtrc;
      __xtrc.reserve(32);
      __beg = _M_extract_float(__beg, __end, __io, __err, __xtrc);
      std::__convert_to_v(__xtrc.c_str(), __v, __err, _S_get_c_locale());
      if (__beg == __end)
 __err |= ios_base::eofbit;
      return __beg;
    }

  template<typename _CharT, typename _InIter>
    _InIter
    num_get<_CharT, _InIter>::
    do_get(iter_type __beg, iter_type __end, ios_base& __io,
           ios_base::iostate& __err, void*& __v) const
    {

      typedef ios_base::fmtflags fmtflags;
      const fmtflags __fmt = __io.flags();
      __io.flags((__fmt & ~ios_base::basefield) | ios_base::hex);

      typedef __gnu_cxx::__conditional_type<(sizeof(void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      _UIntPtrType __ul;
      __beg = _M_extract_int(__beg, __end, __io, __err, __ul);


      __io.flags(__fmt);

      __v = reinterpret_cast<void*>(__ul);
      return __beg;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_pad(_CharT __fill, streamsize __w, ios_base& __io,
    _CharT* __new, const _CharT* __cs, int& __len) const
    {


      __pad<_CharT, char_traits<_CharT> >::_S_pad(__io, __fill, __new,
        __cs, __w, __len);
      __len = static_cast<int>(__w);
    }



  template<typename _CharT, typename _ValueT>
    int
    __int_to_char(_CharT* __bufend, _ValueT __v, const _CharT* __lit,
    ios_base::fmtflags __flags, bool __dec)
    {
      _CharT* __buf = __bufend;
      if (__builtin_expect(__dec, true))
 {

   do
     {
       *--__buf = __lit[(__v % 10) + __num_base::_S_odigits];
       __v /= 10;
     }
   while (__v != 0);
 }
      else if ((__flags & ios_base::basefield) == ios_base::oct)
 {

   do
     {
       *--__buf = __lit[(__v & 0x7) + __num_base::_S_odigits];
       __v >>= 3;
     }
   while (__v != 0);
 }
      else
 {

   const bool __uppercase = __flags & ios_base::uppercase;
   const int __case_offset = __uppercase ? __num_base::_S_oudigits
                                         : __num_base::_S_odigits;
   do
     {
       *--__buf = __lit[(__v & 0xf) + __case_offset];
       __v >>= 4;
     }
   while (__v != 0);
 }
      return __bufend - __buf;
    }



  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_int(const char* __grouping, size_t __grouping_size, _CharT __sep,
   ios_base&, _CharT* __new, _CharT* __cs, int& __len) const
    {
      _CharT* __p = std::__add_grouping(__new, __sep, __grouping,
     __grouping_size, __cs, __cs + __len);
      __len = __p - __new;
    }

  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_int(_OutIter __s, ios_base& __io, _CharT __fill,
      _ValueT __v) const
      {
 using __gnu_cxx::__add_unsigned;
 typedef typename __add_unsigned<_ValueT>::__type __unsigned_type;
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);
 const _CharT* __lit = __lc->_M_atoms_out;
 const ios_base::fmtflags __flags = __io.flags();


 const int __ilen = 5 * sizeof(_ValueT);
 _CharT* __cs = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __ilen));



 const ios_base::fmtflags __basefield = __flags & ios_base::basefield;
 const bool __dec = (__basefield != ios_base::oct
       && __basefield != ios_base::hex);
 const __unsigned_type __u = ((__v > 0 || !__dec)
         ? __unsigned_type(__v)
         : -__unsigned_type(__v));
  int __len = __int_to_char(__cs + __ilen, __u, __lit, __flags, __dec);
 __cs += __ilen - __len;


 if (__lc->_M_use_grouping)
   {


     _CharT* __cs2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * (__len + 1)
          * 2));
     _M_group_int(__lc->_M_grouping, __lc->_M_grouping_size,
    __lc->_M_thousands_sep, __io, __cs2 + 2, __cs, __len);
     __cs = __cs2 + 2;
   }


 if (__builtin_expect(__dec, true))
   {

     if (__v >= 0)
       {
  if (bool(__flags & ios_base::showpos)
      && __gnu_cxx::__numeric_traits<_ValueT>::__is_signed)
    *--__cs = __lit[__num_base::_S_oplus], ++__len;
       }
     else
       *--__cs = __lit[__num_base::_S_ominus], ++__len;
   }
 else if (bool(__flags & ios_base::showbase) && __v)
   {
     if (__basefield == ios_base::oct)
       *--__cs = __lit[__num_base::_S_odigits], ++__len;
     else
       {

  const bool __uppercase = __flags & ios_base::uppercase;
  *--__cs = __lit[__num_base::_S_ox + __uppercase];

  *--__cs = __lit[__num_base::_S_odigits];
  __len += 2;
       }
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __cs3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __cs3, __cs, __len);
     __cs = __cs3;
   }
 __io.width(0);



 return std::__write(__s, __cs, __len);
      }

  template<typename _CharT, typename _OutIter>
    void
    num_put<_CharT, _OutIter>::
    _M_group_float(const char* __grouping, size_t __grouping_size,
     _CharT __sep, const _CharT* __p, _CharT* __new,
     _CharT* __cs, int& __len) const
    {



      const int __declen = __p ? __p - __cs : __len;
      _CharT* __p2 = std::__add_grouping(__new, __sep, __grouping,
      __grouping_size,
      __cs, __cs + __declen);


      int __newlen = __p2 - __new;
      if (__p)
 {
   char_traits<_CharT>::copy(__p2, __p, __len - __declen);
   __newlen += __len - __declen;
 }
      __len = __newlen;
    }
# 951 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    template<typename _ValueT>
      _OutIter
      num_put<_CharT, _OutIter>::
      _M_insert_float(_OutIter __s, ios_base& __io, _CharT __fill, char __mod,
         _ValueT __v) const
      {
 typedef __numpunct_cache<_CharT> __cache_type;
 __use_cache<__cache_type> __uc;
 const locale& __loc = __io._M_getloc();
 const __cache_type* __lc = __uc(__loc);


 const streamsize __prec = __io.precision() < 0 ? 6 : __io.precision();

 const int __max_digits =
   __gnu_cxx::__numeric_traits<_ValueT>::__digits10;


 int __len;

 char __fbuf[16];
 __num_base::_S_format_float(__io, __fbuf, __mod);




 int __cs_size = __max_digits * 3;
 char* __cs = static_cast<char*>(__builtin_alloca(__cs_size));
 __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
          __fbuf, __prec, __v);


 if (__len >= __cs_size)
   {
     __cs_size = __len + 1;
     __cs = static_cast<char*>(__builtin_alloca(__cs_size));
     __len = std::__convert_from_v(_S_get_c_locale(), __cs, __cs_size,
       __fbuf, __prec, __v);
   }
# 1012 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
 const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

 _CharT* __ws = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
            * __len));
 __ctype.widen(__cs, __cs + __len, __ws);


 _CharT* __wp = 0;
 const char* __p = char_traits<char>::find(__cs, __len, '.');
 if (__p)
   {
     __wp = __ws + (__p - __cs);
     *__wp = __lc->_M_decimal_point;
   }




 if (__lc->_M_use_grouping
     && (__wp || __len < 3 || (__cs[1] <= '9' && __cs[2] <= '9'
          && __cs[1] >= '0' && __cs[2] >= '0')))
   {


     _CharT* __ws2 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __len * 2));

     streamsize __off = 0;
     if (__cs[0] == '-' || __cs[0] == '+')
       {
  __off = 1;
  __ws2[0] = __ws[0];
  __len -= 1;
       }

     _M_group_float(__lc->_M_grouping, __lc->_M_grouping_size,
      __lc->_M_thousands_sep, __wp, __ws2 + __off,
      __ws + __off, __len);
     __len += __off;

     __ws = __ws2;
   }


 const streamsize __w = __io.width();
 if (__w > static_cast<streamsize>(__len))
   {
     _CharT* __ws3 = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
          * __w));
     _M_pad(__fill, __w, __io, __ws3, __ws, __len);
     __ws = __ws3;
   }
 __io.width(0);



 return std::__write(__s, __ws, __len);
      }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, bool __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      if ((__flags & ios_base::boolalpha) == 0)
        {
          const long __l = __v;
          __s = _M_insert_int(__s, __io, __fill, __l);
        }
      else
        {
   typedef __numpunct_cache<_CharT> __cache_type;
   __use_cache<__cache_type> __uc;
   const locale& __loc = __io._M_getloc();
   const __cache_type* __lc = __uc(__loc);

   const _CharT* __name = __v ? __lc->_M_truename
                              : __lc->_M_falsename;
   int __len = __v ? __lc->_M_truename_size
                   : __lc->_M_falsename_size;

   const streamsize __w = __io.width();
   if (__w > static_cast<streamsize>(__len))
     {
       const streamsize __plen = __w - __len;
       _CharT* __ps
  = static_cast<_CharT*>(__builtin_alloca(sizeof(_CharT)
       * __plen));

       char_traits<_CharT>::assign(__ps, __plen, __fill);
       __io.width(0);

       if ((__flags & ios_base::adjustfield) == ios_base::left)
  {
    __s = std::__write(__s, __name, __len);
    __s = std::__write(__s, __ps, __plen);
  }
       else
  {
    __s = std::__write(__s, __ps, __plen);
    __s = std::__write(__s, __name, __len);
  }
       return __s;
     }
   __io.width(0);
   __s = std::__write(__s, __name, __len);
 }
      return __s;
    }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill, double __v) const
    { return _M_insert_float(__s, __io, __fill, char(), __v); }
# 1137 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
    long double __v) const
    { return _M_insert_float(__s, __io, __fill, 'L', __v); }

  template<typename _CharT, typename _OutIter>
    _OutIter
    num_put<_CharT, _OutIter>::
    do_put(iter_type __s, ios_base& __io, char_type __fill,
           const void* __v) const
    {
      const ios_base::fmtflags __flags = __io.flags();
      const ios_base::fmtflags __fmt = ~(ios_base::basefield
      | ios_base::uppercase);
      __io.flags((__flags & __fmt) | (ios_base::hex | ios_base::showbase));

      typedef __gnu_cxx::__conditional_type<(sizeof(const void*)
          <= sizeof(unsigned long)),
 unsigned long, unsigned long long>::__type _UIntPtrType;

      __s = _M_insert_int(__s, __io, __fill,
     reinterpret_cast<_UIntPtrType>(__v));
      __io.flags(__flags);
      return __s;
    }


# 1174 "/usr/include/c++/4.4/bits/locale_facets.tcc" 3
  template<typename _CharT, typename _Traits>
    void
    __pad<_CharT, _Traits>::_S_pad(ios_base& __io, _CharT __fill,
       _CharT* __news, const _CharT* __olds,
       streamsize __newlen, streamsize __oldlen)
    {
      const size_t __plen = static_cast<size_t>(__newlen - __oldlen);
      const ios_base::fmtflags __adjust = __io.flags() & ios_base::adjustfield;


      if (__adjust == ios_base::left)
 {
   _Traits::copy(__news, __olds, __oldlen);
   _Traits::assign(__news + __oldlen, __plen, __fill);
   return;
 }

      size_t __mod = 0;
      if (__adjust == ios_base::internal)
 {



          const locale& __loc = __io._M_getloc();
   const ctype<_CharT>& __ctype = use_facet<ctype<_CharT> >(__loc);

   if (__ctype.widen('-') == __olds[0]
       || __ctype.widen('+') == __olds[0])
     {
       __news[0] = __olds[0];
       __mod = 1;
       ++__news;
     }
   else if (__ctype.widen('0') == __olds[0]
     && __oldlen > 1
     && (__ctype.widen('x') == __olds[1]
         || __ctype.widen('X') == __olds[1]))
     {
       __news[0] = __olds[0];
       __news[1] = __olds[1];
       __mod = 2;
       __news += 2;
     }

 }
      _Traits::assign(__news, __plen, __fill);
      _Traits::copy(__news + __plen, __olds + __mod, __oldlen - __mod);
    }

  template<typename _CharT>
    _CharT*
    __add_grouping(_CharT* __s, _CharT __sep,
     const char* __gbeg, size_t __gsize,
     const _CharT* __first, const _CharT* __last)
    {
      size_t __idx = 0;
      size_t __ctr = 0;

      while (__last - __first > __gbeg[__idx]
      && static_cast<signed char>(__gbeg[__idx]) > 0
      && __gbeg[__idx] != __gnu_cxx::__numeric_traits<char>::__max)
 {
   __last -= __gbeg[__idx];
   __idx < __gsize - 1 ? ++__idx : ++__ctr;
 }

      while (__first != __last)
 *__s++ = *__first++;

      while (__ctr--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      while (__idx--)
 {
   *__s++ = __sep;
   for (char __i = __gbeg[__idx]; __i > 0; --__i)
     *__s++ = *__first++;
 }

      return __s;
    }





  extern template class numpunct<char>;
  extern template class numpunct_byname<char>;
  extern template class num_get<char>;
  extern template class num_put<char>;
  extern template class ctype_byname<char>;

  extern template
    const ctype<char>&
    use_facet<ctype<char> >(const locale&);

  extern template
    const numpunct<char>&
    use_facet<numpunct<char> >(const locale&);

  extern template
    const num_put<char>&
    use_facet<num_put<char> >(const locale&);

  extern template
    const num_get<char>&
    use_facet<num_get<char> >(const locale&);

  extern template
    bool
    has_facet<ctype<char> >(const locale&);

  extern template
    bool
    has_facet<numpunct<char> >(const locale&);

  extern template
    bool
    has_facet<num_put<char> >(const locale&);

  extern template
    bool
    has_facet<num_get<char> >(const locale&);


  extern template class numpunct<wchar_t>;
  extern template class numpunct_byname<wchar_t>;
  extern template class num_get<wchar_t>;
  extern template class num_put<wchar_t>;
  extern template class ctype_byname<wchar_t>;

  extern template
    const ctype<wchar_t>&
    use_facet<ctype<wchar_t> >(const locale&);

  extern template
    const numpunct<wchar_t>&
    use_facet<numpunct<wchar_t> >(const locale&);

  extern template
    const num_put<wchar_t>&
    use_facet<num_put<wchar_t> >(const locale&);

  extern template
    const num_get<wchar_t>&
    use_facet<num_get<wchar_t> >(const locale&);

 extern template
    bool
    has_facet<ctype<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<numpunct<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_put<wchar_t> >(const locale&);

  extern template
    bool
    has_facet<num_get<wchar_t> >(const locale&);



}
# 2600 "/usr/include/c++/4.4/bits/locale_facets.h" 2 3
# 40 "/usr/include/c++/4.4/bits/basic_ios.h" 2 3


namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _Facet>
    inline const _Facet&
    __check_facet(const _Facet* __f)
    {
      if (!__f)
 __throw_bad_cast();
      return *__f;
    }
# 61 "/usr/include/c++/4.4/bits/basic_ios.h" 3
  template<typename _CharT, typename _Traits>
    class basic_ios : public ios_base
    {
    public:






      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;






      typedef ctype<_CharT> __ctype_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
           __num_put_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
           __num_get_type;



    protected:
      basic_ostream<_CharT, _Traits>* _M_tie;
      mutable char_type _M_fill;
      mutable bool _M_fill_init;
      basic_streambuf<_CharT, _Traits>* _M_streambuf;


      const __ctype_type* _M_ctype;

      const __num_put_type* _M_num_put;

      const __num_get_type* _M_num_get;

    public:







      operator void*() const
      { return this->fail() ? 0 : const_cast<basic_ios*>(this); }

      bool
      operator!() const
      { return this->fail(); }
# 126 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      iostate
      rdstate() const
      { return _M_streambuf_state; }
# 137 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      void
      clear(iostate __state = goodbit);







      void
      setstate(iostate __state)
      { this->clear(this->rdstate() | __state); }




      void
      _M_setstate(iostate __state)
      {


 _M_streambuf_state |= __state;
 if (this->exceptions() & __state)
   throw;
      }







      bool
      good() const
      { return this->rdstate() == 0; }







      bool
      eof() const
      { return (this->rdstate() & eofbit) != 0; }
# 190 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      bool
      fail() const
      { return (this->rdstate() & (badbit | failbit)) != 0; }







      bool
      bad() const
      { return (this->rdstate() & badbit) != 0; }
# 211 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      iostate
      exceptions() const
      { return _M_exception; }
# 246 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      void
      exceptions(iostate __except)
      {
        _M_exception = __except;
        this->clear(_M_streambuf_state);
      }







      explicit
      basic_ios(basic_streambuf<_CharT, _Traits>* __sb)
      : ios_base(), _M_tie(0), _M_fill(), _M_fill_init(false), _M_streambuf(0),
 _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { this->init(__sb); }







      virtual
      ~basic_ios() { }
# 284 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie() const
      { return _M_tie; }
# 296 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      basic_ostream<_CharT, _Traits>*
      tie(basic_ostream<_CharT, _Traits>* __tiestr)
      {
        basic_ostream<_CharT, _Traits>* __old = _M_tie;
        _M_tie = __tiestr;
        return __old;
      }







      basic_streambuf<_CharT, _Traits>*
      rdbuf() const
      { return _M_streambuf; }
# 336 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      basic_streambuf<_CharT, _Traits>*
      rdbuf(basic_streambuf<_CharT, _Traits>* __sb);
# 350 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      basic_ios&
      copyfmt(const basic_ios& __rhs);







      char_type
      fill() const
      {
 if (!_M_fill_init)
   {
     _M_fill = this->widen(' ');
     _M_fill_init = true;
   }
 return _M_fill;
      }
# 379 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      char_type
      fill(char_type __ch)
      {
 char_type __old = this->fill();
 _M_fill = __ch;
 return __old;
      }
# 399 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      locale
      imbue(const locale& __loc);
# 419 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      char
      narrow(char_type __c, char __dfault) const
      { return __check_facet(_M_ctype).narrow(__c, __dfault); }
# 438 "/usr/include/c++/4.4/bits/basic_ios.h" 3
      char_type
      widen(char __c) const
      { return __check_facet(_M_ctype).widen(__c); }

    protected:







      basic_ios()
      : ios_base(), _M_tie(0), _M_fill(char_type()), _M_fill_init(false),
 _M_streambuf(0), _M_ctype(0), _M_num_put(0), _M_num_get(0)
      { }







      void
      init(basic_streambuf<_CharT, _Traits>* __sb);

      void
      _M_cache_locale(const locale& __loc);
    };

}


# 1 "/usr/include/c++/4.4/bits/basic_ios.tcc" 1 3
# 34 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
       
# 35 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3

namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::clear(iostate __state)
    {
      if (this->rdbuf())
 _M_streambuf_state = __state;
      else
   _M_streambuf_state = __state | badbit;
      if (this->exceptions() & this->rdstate())
 __throw_ios_failure(("basic_ios::clear"));
    }

  template<typename _CharT, typename _Traits>
    basic_streambuf<_CharT, _Traits>*
    basic_ios<_CharT, _Traits>::rdbuf(basic_streambuf<_CharT, _Traits>* __sb)
    {
      basic_streambuf<_CharT, _Traits>* __old = _M_streambuf;
      _M_streambuf = __sb;
      this->clear();
      return __old;
    }

  template<typename _CharT, typename _Traits>
    basic_ios<_CharT, _Traits>&
    basic_ios<_CharT, _Traits>::copyfmt(const basic_ios& __rhs)
    {


      if (this != &__rhs)
 {




   _Words* __words = (__rhs._M_word_size <= _S_local_word_size) ?
                      _M_local_word : new _Words[__rhs._M_word_size];


   _Callback_list* __cb = __rhs._M_callbacks;
   if (__cb)
     __cb->_M_add_reference();
   _M_call_callbacks(erase_event);
   if (_M_word != _M_local_word)
     {
       delete [] _M_word;
       _M_word = 0;
     }
   _M_dispose_callbacks();


   _M_callbacks = __cb;
   for (int __i = 0; __i < __rhs._M_word_size; ++__i)
     __words[__i] = __rhs._M_word[__i];
   _M_word = __words;
   _M_word_size = __rhs._M_word_size;

   this->flags(__rhs.flags());
   this->width(__rhs.width());
   this->precision(__rhs.precision());
   this->tie(__rhs.tie());
   this->fill(__rhs.fill());
   _M_ios_locale = __rhs.getloc();
   _M_cache_locale(_M_ios_locale);

   _M_call_callbacks(copyfmt_event);


   this->exceptions(__rhs.exceptions());
 }
      return *this;
    }


  template<typename _CharT, typename _Traits>
    locale
    basic_ios<_CharT, _Traits>::imbue(const locale& __loc)
    {
      locale __old(this->getloc());
      ios_base::imbue(__loc);
      _M_cache_locale(__loc);
      if (this->rdbuf() != 0)
 this->rdbuf()->pubimbue(__loc);
      return __old;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::init(basic_streambuf<_CharT, _Traits>* __sb)
    {

      ios_base::_M_init();


      _M_cache_locale(_M_ios_locale);
# 145 "/usr/include/c++/4.4/bits/basic_ios.tcc" 3
      _M_fill = _CharT();
      _M_fill_init = false;

      _M_tie = 0;
      _M_exception = goodbit;
      _M_streambuf = __sb;
      _M_streambuf_state = __sb ? goodbit : badbit;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_ios<_CharT, _Traits>::_M_cache_locale(const locale& __loc)
    {
      if (__builtin_expect(has_facet<__ctype_type>(__loc), true))
 _M_ctype = &use_facet<__ctype_type>(__loc);
      else
 _M_ctype = 0;

      if (__builtin_expect(has_facet<__num_put_type>(__loc), true))
 _M_num_put = &use_facet<__num_put_type>(__loc);
      else
 _M_num_put = 0;

      if (__builtin_expect(has_facet<__num_get_type>(__loc), true))
 _M_num_get = &use_facet<__num_get_type>(__loc);
      else
 _M_num_get = 0;
    }





  extern template class basic_ios<char>;


  extern template class basic_ios<wchar_t>;



}
# 472 "/usr/include/c++/4.4/bits/basic_ios.h" 2 3
# 46 "/usr/include/c++/4.4/ios" 2 3
# 41 "/usr/include/c++/4.4/ostream" 2 3


namespace std __attribute__ ((__visibility__ ("default"))) {
# 54 "/usr/include/c++/4.4/ostream" 3
  template<typename _CharT, typename _Traits>
    class basic_ostream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;
      typedef num_put<_CharT, ostreambuf_iterator<_CharT, _Traits> >
             __num_put_type;
      typedef ctype<_CharT> __ctype_type;
# 81 "/usr/include/c++/4.4/ostream" 3
      explicit
      basic_ostream(__streambuf_type* __sb)
      { this->init(__sb); }






      virtual
      ~basic_ostream() { }


      class sentry;
      friend class sentry;
# 107 "/usr/include/c++/4.4/ostream" 3
      __ostream_type&
      operator<<(__ostream_type& (*__pf)(__ostream_type&))
      {



 return __pf(*this);
      }

      __ostream_type&
      operator<<(__ios_type& (*__pf)(__ios_type&))
      {



 __pf(*this);
 return *this;
      }

      __ostream_type&
      operator<<(ios_base& (*__pf) (ios_base&))
      {



 __pf(*this);
 return *this;
      }
# 164 "/usr/include/c++/4.4/ostream" 3
      __ostream_type&
      operator<<(long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(bool __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(short __n);

      __ostream_type&
      operator<<(unsigned short __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }

      __ostream_type&
      operator<<(int __n);

      __ostream_type&
      operator<<(unsigned int __n)
      {


 return _M_insert(static_cast<unsigned long>(__n));
      }


      __ostream_type&
      operator<<(long long __n)
      { return _M_insert(__n); }

      __ostream_type&
      operator<<(unsigned long long __n)
      { return _M_insert(__n); }


      __ostream_type&
      operator<<(double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(float __f)
      {


 return _M_insert(static_cast<double>(__f));
      }

      __ostream_type&
      operator<<(long double __f)
      { return _M_insert(__f); }

      __ostream_type&
      operator<<(const void* __p)
      { return _M_insert(__p); }
# 249 "/usr/include/c++/4.4/ostream" 3
      __ostream_type&
      operator<<(__streambuf_type* __sb);
# 282 "/usr/include/c++/4.4/ostream" 3
      __ostream_type&
      put(char_type __c);


      void
      _M_write(const char_type* __s, streamsize __n)
      {
 const streamsize __put = this->rdbuf()->sputn(__s, __n);
 if (__put != __n)
   this->setstate(ios_base::badbit);
      }
# 310 "/usr/include/c++/4.4/ostream" 3
      __ostream_type&
      write(const char_type* __s, streamsize __n);
# 323 "/usr/include/c++/4.4/ostream" 3
      __ostream_type&
      flush();
# 334 "/usr/include/c++/4.4/ostream" 3
      pos_type
      tellp();
# 345 "/usr/include/c++/4.4/ostream" 3
      __ostream_type&
      seekp(pos_type);
# 357 "/usr/include/c++/4.4/ostream" 3
       __ostream_type&
      seekp(off_type, ios_base::seekdir);

    protected:
      basic_ostream()
      { this->init(0); }

      template<typename _ValueT>
        __ostream_type&
        _M_insert(_ValueT __v);
    };
# 376 "/usr/include/c++/4.4/ostream" 3
  template <typename _CharT, typename _Traits>
    class basic_ostream<_CharT, _Traits>::sentry
    {

      bool _M_ok;
      basic_ostream<_CharT, _Traits>& _M_os;

    public:
# 395 "/usr/include/c++/4.4/ostream" 3
      explicit
      sentry(basic_ostream<_CharT, _Traits>& __os);
# 405 "/usr/include/c++/4.4/ostream" 3
      ~sentry()
      {

 if (bool(_M_os.flags() & ios_base::unitbuf) && !uncaught_exception())
   {

     if (_M_os.rdbuf() && _M_os.rdbuf()->pubsync() == -1)
       _M_os.setstate(ios_base::badbit);
   }
      }
# 423 "/usr/include/c++/4.4/ostream" 3
      operator bool() const
      { return _M_ok; }
    };
# 444 "/usr/include/c++/4.4/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, _CharT __c)
    { return __ostream_insert(__out, &__c, 1); }

  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, char __c)
    { return (__out << __out.widen(__c)); }


  template <class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, char __c)
    { return __ostream_insert(__out, &__c, 1); }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, signed char __c)
    { return (__out << static_cast<char>(__c)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, unsigned char __c)
    { return (__out << static_cast<char>(__c)); }
# 486 "/usr/include/c++/4.4/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const _CharT* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits> &
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s);


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 __ostream_insert(__out, __s,
    static_cast<streamsize>(_Traits::length(__s)));
      return __out;
    }


  template<class _Traits>
    inline basic_ostream<char, _Traits>&
    operator<<(basic_ostream<char, _Traits>& __out, const signed char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }

  template<class _Traits>
    inline basic_ostream<char, _Traits> &
    operator<<(basic_ostream<char, _Traits>& __out, const unsigned char* __s)
    { return (__out << reinterpret_cast<const char*>(__s)); }
# 536 "/usr/include/c++/4.4/ostream" 3
  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    endl(basic_ostream<_CharT, _Traits>& __os)
    { return flush(__os.put(__os.widen('\n'))); }







  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    ends(basic_ostream<_CharT, _Traits>& __os)
    { return __os.put(_CharT()); }






  template<typename _CharT, typename _Traits>
    inline basic_ostream<_CharT, _Traits>&
    flush(basic_ostream<_CharT, _Traits>& __os)
    { return __os.flush(); }

}


# 1 "/usr/include/c++/4.4/bits/ostream.tcc" 1 3
# 39 "/usr/include/c++/4.4/bits/ostream.tcc" 3
       
# 40 "/usr/include/c++/4.4/bits/ostream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>::sentry::
    sentry(basic_ostream<_CharT, _Traits>& __os)
    : _M_ok(false), _M_os(__os)
    {

      if (__os.tie() && __os.good())
 __os.tie()->flush();

      if (__os.good())
 _M_ok = true;
      else
 __os.setstate(ios_base::failbit);
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_ostream<_CharT, _Traits>&
      basic_ostream<_CharT, _Traits>::
      _M_insert(_ValueT __v)
      {
 sentry __cerb(*this);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
     try
       {
  const __num_put_type& __np = __check_facet(this->_M_num_put);
  if (__np.put(*this, *this, this->fill(), __v).failed())
    __err |= ios_base::badbit;
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(short __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned short>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(int __n)
    {


      const ios_base::fmtflags __fmt = this->flags() & ios_base::basefield;
      if (__fmt == ios_base::oct || __fmt == ios_base::hex)
 return _M_insert(static_cast<long>(static_cast<unsigned int>(__n)));
      else
 return _M_insert(static_cast<long>(__n));
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    operator<<(__streambuf_type* __sbin)
    {
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      sentry __cerb(*this);
      if (__cerb && __sbin)
 {
   try
     {
       if (!__copy_streambufs(__sbin, this->rdbuf()))
  __err |= ios_base::failbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbin)
 __err |= ios_base::badbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    put(char_type __c)
    {






      sentry __cerb(*this);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const int_type __put = this->rdbuf()->sputc(__c);
       if (traits_type::eq_int_type(__put, traits_type::eof()))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    write(const _CharT* __s, streamsize __n)
    {







      sentry __cerb(*this);
      if (__cerb)
 {
   try
     { _M_write(__s, __n); }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    flush()
    {



      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      try
 {
   if (this->rdbuf() && this->rdbuf()->pubsync() == -1)
     __err |= ios_base::badbit;
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_ostream<_CharT, _Traits>::pos_type
    basic_ostream<_CharT, _Traits>::
    tellp()
    {
      pos_type __ret = pos_type(-1);
      try
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur, ios_base::out);
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(pos_type __pos)
    {
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    basic_ostream<_CharT, _Traits>::
    seekp(off_type __off, ios_base::seekdir __dir)
    {
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      try
 {
   if (!this->fail())
     {


       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::out);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_ostream<_CharT, _Traits>&
    operator<<(basic_ostream<_CharT, _Traits>& __out, const char* __s)
    {
      if (!__s)
 __out.setstate(ios_base::badbit);
      else
 {


   const size_t __clen = char_traits<char>::length(__s);
   try
     {
       struct __ptr_guard
       {
  _CharT *__p;
  __ptr_guard (_CharT *__ip): __p(__ip) { }
  ~__ptr_guard() { delete[] __p; }
  _CharT* __get() { return __p; }
       } __pg (new _CharT[__clen]);

       _CharT *__ws = __pg.__get();
       for (size_t __i = 0; __i < __clen; ++__i)
  __ws[__i] = __out.widen(__s[__i]);
       __ostream_insert(__out, __ws, __clen);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __out._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __out._M_setstate(ios_base::badbit); }
 }
      return __out;
    }





  extern template class basic_ostream<char>;
  extern template ostream& endl(ostream&);
  extern template ostream& ends(ostream&);
  extern template ostream& flush(ostream&);
  extern template ostream& operator<<(ostream&, char);
  extern template ostream& operator<<(ostream&, unsigned char);
  extern template ostream& operator<<(ostream&, signed char);
  extern template ostream& operator<<(ostream&, const char*);
  extern template ostream& operator<<(ostream&, const unsigned char*);
  extern template ostream& operator<<(ostream&, const signed char*);

  extern template ostream& ostream::_M_insert(long);
  extern template ostream& ostream::_M_insert(unsigned long);
  extern template ostream& ostream::_M_insert(bool);

  extern template ostream& ostream::_M_insert(long long);
  extern template ostream& ostream::_M_insert(unsigned long long);

  extern template ostream& ostream::_M_insert(double);
  extern template ostream& ostream::_M_insert(long double);
  extern template ostream& ostream::_M_insert(const void*);


  extern template class basic_ostream<wchar_t>;
  extern template wostream& endl(wostream&);
  extern template wostream& ends(wostream&);
  extern template wostream& flush(wostream&);
  extern template wostream& operator<<(wostream&, wchar_t);
  extern template wostream& operator<<(wostream&, char);
  extern template wostream& operator<<(wostream&, const wchar_t*);
  extern template wostream& operator<<(wostream&, const char*);

  extern template wostream& wostream::_M_insert(long);
  extern template wostream& wostream::_M_insert(unsigned long);
  extern template wostream& wostream::_M_insert(bool);

  extern template wostream& wostream::_M_insert(long long);
  extern template wostream& wostream::_M_insert(unsigned long long);

  extern template wostream& wostream::_M_insert(double);
  extern template wostream& wostream::_M_insert(long double);
  extern template wostream& wostream::_M_insert(const void*);



}
# 566 "/usr/include/c++/4.4/ostream" 2 3
# 41 "/usr/include/c++/4.4/iostream" 2 3
# 1 "/usr/include/c++/4.4/istream" 1 3
# 38 "/usr/include/c++/4.4/istream" 3
       
# 39 "/usr/include/c++/4.4/istream" 3




namespace std __attribute__ ((__visibility__ ("default"))) {
# 54 "/usr/include/c++/4.4/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream : virtual public basic_ios<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_ios<_CharT, _Traits> __ios_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef num_get<_CharT, istreambuf_iterator<_CharT, _Traits> >
        __num_get_type;
      typedef ctype<_CharT> __ctype_type;

    protected:





      streamsize _M_gcount;

    public:
# 90 "/usr/include/c++/4.4/istream" 3
      explicit
      basic_istream(__streambuf_type* __sb)
      : _M_gcount(streamsize(0))
      { this->init(__sb); }






      virtual
      ~basic_istream()
      { _M_gcount = streamsize(0); }


      class sentry;
      friend class sentry;
# 118 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      operator>>(__istream_type& (*__pf)(__istream_type&))
      { return __pf(*this); }

      __istream_type&
      operator>>(__ios_type& (*__pf)(__ios_type&))
      {
 __pf(*this);
 return *this;
      }

      __istream_type&
      operator>>(ios_base& (*__pf)(ios_base&))
      {
 __pf(*this);
 return *this;
      }
# 165 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      operator>>(bool& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(short& __n);

      __istream_type&
      operator>>(unsigned short& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(int& __n);

      __istream_type&
      operator>>(unsigned int& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(long long& __n)
      { return _M_extract(__n); }

      __istream_type&
      operator>>(unsigned long long& __n)
      { return _M_extract(__n); }


      __istream_type&
      operator>>(float& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(long double& __f)
      { return _M_extract(__f); }

      __istream_type&
      operator>>(void*& __p)
      { return _M_extract(__p); }
# 237 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      operator>>(__streambuf_type* __sb);
# 247 "/usr/include/c++/4.4/istream" 3
      streamsize
      gcount() const
      { return _M_gcount; }
# 279 "/usr/include/c++/4.4/istream" 3
      int_type
      get();
# 293 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      get(char_type& __c);
# 320 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n, char_type __delim);
# 331 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      get(char_type* __s, streamsize __n)
      { return this->get(__s, __n, this->widen('\n')); }
# 354 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      get(__streambuf_type& __sb, char_type __delim);
# 364 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      get(__streambuf_type& __sb)
      { return this->get(__sb, this->widen('\n')); }
# 393 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n, char_type __delim);
# 404 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      getline(char_type* __s, streamsize __n)
      { return this->getline(__s, __n, this->widen('\n')); }
# 428 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      ignore();

      __istream_type&
      ignore(streamsize __n);

      __istream_type&
      ignore(streamsize __n, int_type __delim);
# 445 "/usr/include/c++/4.4/istream" 3
      int_type
      peek();
# 463 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      read(char_type* __s, streamsize __n);
# 482 "/usr/include/c++/4.4/istream" 3
      streamsize
      readsome(char_type* __s, streamsize __n);
# 498 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      putback(char_type __c);
# 513 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      unget();
# 531 "/usr/include/c++/4.4/istream" 3
      int
      sync();
# 545 "/usr/include/c++/4.4/istream" 3
      pos_type
      tellg();
# 560 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      seekg(pos_type);
# 576 "/usr/include/c++/4.4/istream" 3
      __istream_type&
      seekg(off_type, ios_base::seekdir);


    protected:
      basic_istream()
      : _M_gcount(streamsize(0))
      { this->init(0); }

      template<typename _ValueT>
        __istream_type&
        _M_extract(_ValueT& __v);
    };


  template<>
    basic_istream<char>&
    basic_istream<char>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n);

  template<>
    basic_istream<char>&
    basic_istream<char>::
    ignore(streamsize __n, int_type __delim);


  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    getline(char_type* __s, streamsize __n, char_type __delim);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n);

  template<>
    basic_istream<wchar_t>&
    basic_istream<wchar_t>::
    ignore(streamsize __n, int_type __delim);
# 631 "/usr/include/c++/4.4/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_istream<_CharT, _Traits>::sentry
    {
    public:

      typedef _Traits traits_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::__ctype_type __ctype_type;
      typedef typename _Traits::int_type __int_type;
# 663 "/usr/include/c++/4.4/istream" 3
      explicit
      sentry(basic_istream<_CharT, _Traits>& __is, bool __noskipws = false);
# 673 "/usr/include/c++/4.4/istream" 3
      operator bool() const
      { return _M_ok; }

    private:
      bool _M_ok;
    };
# 693 "/usr/include/c++/4.4/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char& __c)
    { return (__in >> reinterpret_cast<char&>(__c)); }
# 734 "/usr/include/c++/4.4/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s);


  template<>
    basic_istream<char>&
    operator>>(basic_istream<char>& __in, char* __s);

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, unsigned char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }

  template<class _Traits>
    inline basic_istream<char, _Traits>&
    operator>>(basic_istream<char, _Traits>& __in, signed char* __s)
    { return (__in >> reinterpret_cast<char*>(__s)); }
# 762 "/usr/include/c++/4.4/istream" 3
  template<typename _CharT, typename _Traits>
    class basic_iostream
    : public basic_istream<_CharT, _Traits>,
      public basic_ostream<_CharT, _Traits>
    {
    public:



      typedef _CharT char_type;
      typedef typename _Traits::int_type int_type;
      typedef typename _Traits::pos_type pos_type;
      typedef typename _Traits::off_type off_type;
      typedef _Traits traits_type;


      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_ostream<_CharT, _Traits> __ostream_type;







      explicit
      basic_iostream(basic_streambuf<_CharT, _Traits>* __sb)
      : __istream_type(__sb), __ostream_type(__sb) { }




      virtual
      ~basic_iostream() { }

    protected:
      basic_iostream()
      : __istream_type(), __ostream_type() { }
    };
# 823 "/usr/include/c++/4.4/istream" 3
  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __is);

}


# 1 "/usr/include/c++/4.4/bits/istream.tcc" 1 3
# 39 "/usr/include/c++/4.4/bits/istream.tcc" 3
       
# 40 "/usr/include/c++/4.4/bits/istream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>::sentry::
    sentry(basic_istream<_CharT, _Traits>& __in, bool __noskip) : _M_ok(false)
    {
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      if (__in.good())
 {
   if (__in.tie())
     __in.tie()->flush();
   if (!__noskip && bool(__in.flags() & ios_base::skipws))
     {
       const __int_type __eof = traits_type::eof();
       __streambuf_type* __sb = __in.rdbuf();
       __int_type __c = __sb->sgetc();

       const __ctype_type& __ct = __check_facet(__in._M_ctype);
       while (!traits_type::eq_int_type(__c, __eof)
       && __ct.is(ctype_base::space,
    traits_type::to_char_type(__c)))
  __c = __sb->snextc();




       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
 }

      if (__in.good() && __err == ios_base::goodbit)
 _M_ok = true;
      else
 {
   __err |= ios_base::failbit;
   __in.setstate(__err);
 }
    }

  template<typename _CharT, typename _Traits>
    template<typename _ValueT>
      basic_istream<_CharT, _Traits>&
      basic_istream<_CharT, _Traits>::
      _M_extract(_ValueT& __v)
      {
 sentry __cerb(*this, false);
 if (__cerb)
   {
     ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
     try
       {
  const __num_get_type& __ng = __check_facet(this->_M_num_get);
  __ng.get(*this, 0, *this, __err, __v);
       }
     catch(__cxxabiv1::__forced_unwind&)
       {
  this->_M_setstate(ios_base::badbit);
  throw;
       }
     catch(...)
       { this->_M_setstate(ios_base::badbit); }
     if (__err)
       this->setstate(__err);
   }
 return *this;
      }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(short& __n)
    {


      long __l;
      _M_extract(__l);
      if (!this->fail())
 {
   if (__gnu_cxx::__numeric_traits<short>::__min <= __l
       && __l <= __gnu_cxx::__numeric_traits<short>::__max)
     __n = short(__l);
   else
     this->setstate(ios_base::failbit);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(int& __n)
    {


      long __l;
      _M_extract(__l);
      if (!this->fail())
 {
   if (__gnu_cxx::__numeric_traits<int>::__min <= __l
       && __l <= __gnu_cxx::__numeric_traits<int>::__max)
     __n = int(__l);
   else
     this->setstate(ios_base::failbit);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    operator>>(__streambuf_type* __sbout)
    {
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      sentry __cerb(*this, false);
      if (__cerb && __sbout)
 {
   try
     {
       bool __ineof;
       if (!__copy_streambufs_eof(this->rdbuf(), __sbout, __ineof))
  __err |= ios_base::failbit;
       if (__ineof)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::failbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::failbit); }
 }
      else if (!__sbout)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    get(void)
    {
      const int_type __eof = traits_type::eof();
      int_type __c = __eof;
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       __c = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__c, __eof))
  _M_gcount = 1;
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type& __c)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __cb = this->rdbuf()->sbumpc();

       if (!traits_type::eq_int_type(__cb, traits_type::eof()))
  {
    _M_gcount = 1;
    __c = traits_type::to_char_type(__cb);
  }
       else
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       int_type __c = __sb->sgetc();

       while (_M_gcount + 1 < __n
       && !traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim))
  {
    *__s++ = traits_type::to_char_type(__c);
    ++_M_gcount;
    __c = __sb->snextc();
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    get(__streambuf_type& __sb, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      sentry __cerb(*this, true);
      if (__cerb)
 {
   try
     {
       const int_type __idelim = traits_type::to_int_type(__delim);
       const int_type __eof = traits_type::eof();
       __streambuf_type* __this_sb = this->rdbuf();
       int_type __c = __this_sb->sgetc();
       char_type __c2 = traits_type::to_char_type(__c);

       while (!traits_type::eq_int_type(__c, __eof)
       && !traits_type::eq_int_type(__c, __idelim)
       && !traits_type::eq_int_type(__sb.sputc(__c2), __eof))
  {
    ++_M_gcount;
    __c = __this_sb->snextc();
    __c2 = traits_type::to_char_type(__c);
  }
       if (traits_type::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
 }
      if (!_M_gcount)
 __err |= ios_base::failbit;
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    getline(char_type* __s, streamsize __n, char_type __delim)
    {
      _M_gcount = 0;
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      sentry __cerb(*this, true);
      if (__cerb)
        {
          try
            {
              const int_type __idelim = traits_type::to_int_type(__delim);
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();

              while (_M_gcount + 1 < __n
                     && !traits_type::eq_int_type(__c, __eof)
                     && !traits_type::eq_int_type(__c, __idelim))
                {
                  *__s++ = traits_type::to_char_type(__c);
                  __c = __sb->snextc();
                  ++_M_gcount;
                }
              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
              else
                {
                  if (traits_type::eq_int_type(__c, __idelim))
                    {
                      __sb->sbumpc();
                      ++_M_gcount;
                    }
                  else
                    __err |= ios_base::failbit;
                }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
        }


      if (__n > 0)
 *__s = char_type();
      if (!_M_gcount)
        __err |= ios_base::failbit;
      if (__err)
        this->setstate(__err);
      return *this;
    }




  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(void)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();

       if (traits_type::eq_int_type(__sb->sbumpc(), __eof))
  __err |= ios_base::eofbit;
       else
  _M_gcount = 1;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();
# 463 "/usr/include/c++/4.4/bits/istream.tcc" 3
       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

       if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    ignore(streamsize __n, int_type __delim)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb && __n > 0)
        {
          ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
          try
            {
              const int_type __eof = traits_type::eof();
              __streambuf_type* __sb = this->rdbuf();
              int_type __c = __sb->sgetc();


       bool __large_ignore = false;
       while (true)
  {
    while (_M_gcount < __n
    && !traits_type::eq_int_type(__c, __eof)
    && !traits_type::eq_int_type(__c, __delim))
      {
        ++_M_gcount;
        __c = __sb->snextc();
      }
    if (__n == __gnu_cxx::__numeric_traits<streamsize>::__max
        && !traits_type::eq_int_type(__c, __eof)
        && !traits_type::eq_int_type(__c, __delim))
      {
        _M_gcount =
   __gnu_cxx::__numeric_traits<streamsize>::__min;
        __large_ignore = true;
      }
    else
      break;
  }

       if (__large_ignore)
  _M_gcount = __gnu_cxx::__numeric_traits<streamsize>::__max;

              if (traits_type::eq_int_type(__c, __eof))
                __err |= ios_base::eofbit;
       else if (traits_type::eq_int_type(__c, __delim))
  {
    if (_M_gcount
        < __gnu_cxx::__numeric_traits<streamsize>::__max)
      ++_M_gcount;
    __sb->sbumpc();
  }
            }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
          catch(...)
            { this->_M_setstate(ios_base::badbit); }
          if (__err)
            this->setstate(__err);
        }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::int_type
    basic_istream<_CharT, _Traits>::
    peek(void)
    {
      int_type __c = traits_type::eof();
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       __c = this->rdbuf()->sgetc();
       if (traits_type::eq_int_type(__c, traits_type::eof()))
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __c;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    read(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       _M_gcount = this->rdbuf()->sgetn(__s, __n);
       if (_M_gcount != __n)
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_istream<_CharT, _Traits>::
    readsome(char_type* __s, streamsize __n)
    {
      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {

       const streamsize __num = this->rdbuf()->in_avail();
       if (__num > 0)
  _M_gcount = this->rdbuf()->sgetn(__s, std::min(__num, __n));
       else if (__num == -1)
  __err |= ios_base::eofbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return _M_gcount;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    putback(char_type __c)
    {


      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sputbackc(__c), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    unget(void)
    {


      _M_gcount = 0;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const int_type __eof = traits_type::eof();
       __streambuf_type* __sb = this->rdbuf();
       if (!__sb
    || traits_type::eq_int_type(__sb->sungetc(), __eof))
  __err |= ios_base::badbit;
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return *this;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_istream<_CharT, _Traits>::
    sync(void)
    {


      int __ret = -1;
      sentry __cerb(*this, true);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       __streambuf_type* __sb = this->rdbuf();
       if (__sb)
  {
    if (__sb->pubsync() == -1)
      __err |= ios_base::badbit;
    else
      __ret = 0;
  }
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       this->_M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { this->_M_setstate(ios_base::badbit); }
   if (__err)
     this->setstate(__err);
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_istream<_CharT, _Traits>::pos_type
    basic_istream<_CharT, _Traits>::
    tellg(void)
    {


      pos_type __ret = pos_type(-1);
      try
 {
   if (!this->fail())
     __ret = this->rdbuf()->pubseekoff(0, ios_base::cur,
           ios_base::in);
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(pos_type __pos)
    {


      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      try
 {
   if (!this->fail())
     {

       const pos_type __p = this->rdbuf()->pubseekpos(__pos,
            ios_base::in);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    basic_istream<_CharT, _Traits>::
    seekg(off_type __off, ios_base::seekdir __dir)
    {


      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      try
 {
   if (!this->fail())
     {

       const pos_type __p = this->rdbuf()->pubseekoff(__off, __dir,
            ios_base::in);


       if (__p == pos_type(off_type(-1)))
  __err |= ios_base::failbit;
     }
 }
      catch(__cxxabiv1::__forced_unwind&)
 {
   this->_M_setstate(ios_base::badbit);
   throw;
 }
      catch(...)
 { this->_M_setstate(ios_base::badbit); }
      if (__err)
 this->setstate(__err);
      return *this;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT& __c)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef typename __istream_type::int_type __int_type;

      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
   try
     {
       const __int_type __cb = __in.rdbuf()->sbumpc();
       if (!_Traits::eq_int_type(__cb, _Traits::eof()))
  __c = _Traits::to_char_type(__cb);
       else
  __err |= (ios_base::eofbit | ios_base::failbit);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
   if (__err)
     __in.setstate(__err);
 }
      return __in;
    }

  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    operator>>(basic_istream<_CharT, _Traits>& __in, _CharT* __s)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename _Traits::int_type int_type;
      typedef _CharT char_type;
      typedef ctype<_CharT> __ctype_type;

      streamsize __extracted = 0;
      ios_base::iostate __err = ios_base::iostate(ios_base::goodbit);
      typename __istream_type::sentry __cerb(__in, false);
      if (__cerb)
 {
   try
     {

       streamsize __num = __in.width();
       if (__num <= 0)
  __num = __gnu_cxx::__numeric_traits<streamsize>::__max;

       const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());

       const int_type __eof = _Traits::eof();
       __streambuf_type* __sb = __in.rdbuf();
       int_type __c = __sb->sgetc();

       while (__extracted < __num - 1
       && !_Traits::eq_int_type(__c, __eof)
       && !__ct.is(ctype_base::space,
     _Traits::to_char_type(__c)))
  {
    *__s++ = _Traits::to_char_type(__c);
    ++__extracted;
    __c = __sb->snextc();
  }
       if (_Traits::eq_int_type(__c, __eof))
  __err |= ios_base::eofbit;



       *__s = char_type();
       __in.width(0);
     }
   catch(__cxxabiv1::__forced_unwind&)
     {
       __in._M_setstate(ios_base::badbit);
       throw;
     }
   catch(...)
     { __in._M_setstate(ios_base::badbit); }
 }
      if (!__extracted)
 __err |= ios_base::failbit;
      if (__err)
 __in.setstate(__err);
      return __in;
    }


  template<typename _CharT, typename _Traits>
    basic_istream<_CharT, _Traits>&
    ws(basic_istream<_CharT, _Traits>& __in)
    {
      typedef basic_istream<_CharT, _Traits> __istream_type;
      typedef basic_streambuf<_CharT, _Traits> __streambuf_type;
      typedef typename __istream_type::int_type __int_type;
      typedef ctype<_CharT> __ctype_type;

      const __ctype_type& __ct = use_facet<__ctype_type>(__in.getloc());
      const __int_type __eof = _Traits::eof();
      __streambuf_type* __sb = __in.rdbuf();
      __int_type __c = __sb->sgetc();

      while (!_Traits::eq_int_type(__c, __eof)
      && __ct.is(ctype_base::space, _Traits::to_char_type(__c)))
 __c = __sb->snextc();

       if (_Traits::eq_int_type(__c, __eof))
  __in.setstate(ios_base::eofbit);
      return __in;
    }





  extern template class basic_istream<char>;
  extern template istream& ws(istream&);
  extern template istream& operator>>(istream&, char&);
  extern template istream& operator>>(istream&, char*);
  extern template istream& operator>>(istream&, unsigned char&);
  extern template istream& operator>>(istream&, signed char&);
  extern template istream& operator>>(istream&, unsigned char*);
  extern template istream& operator>>(istream&, signed char*);

  extern template istream& istream::_M_extract(unsigned short&);
  extern template istream& istream::_M_extract(unsigned int&);
  extern template istream& istream::_M_extract(long&);
  extern template istream& istream::_M_extract(unsigned long&);
  extern template istream& istream::_M_extract(bool&);

  extern template istream& istream::_M_extract(long long&);
  extern template istream& istream::_M_extract(unsigned long long&);

  extern template istream& istream::_M_extract(float&);
  extern template istream& istream::_M_extract(double&);
  extern template istream& istream::_M_extract(long double&);
  extern template istream& istream::_M_extract(void*&);

  extern template class basic_iostream<char>;


  extern template class basic_istream<wchar_t>;
  extern template wistream& ws(wistream&);
  extern template wistream& operator>>(wistream&, wchar_t&);
  extern template wistream& operator>>(wistream&, wchar_t*);

  extern template wistream& wistream::_M_extract(unsigned short&);
  extern template wistream& wistream::_M_extract(unsigned int&);
  extern template wistream& wistream::_M_extract(long&);
  extern template wistream& wistream::_M_extract(unsigned long&);
  extern template wistream& wistream::_M_extract(bool&);

  extern template wistream& wistream::_M_extract(long long&);
  extern template wistream& wistream::_M_extract(unsigned long long&);

  extern template wistream& wistream::_M_extract(float&);
  extern template wistream& wistream::_M_extract(double&);
  extern template wistream& wistream::_M_extract(long double&);
  extern template wistream& wistream::_M_extract(void*&);

  extern template class basic_iostream<wchar_t>;



}
# 831 "/usr/include/c++/4.4/istream" 2 3
# 42 "/usr/include/c++/4.4/iostream" 2 3

namespace std __attribute__ ((__visibility__ ("default"))) {
# 58 "/usr/include/c++/4.4/iostream" 3
  extern istream cin;
  extern ostream cout;
  extern ostream cerr;
  extern ostream clog;


  extern wistream wcin;
  extern wostream wcout;
  extern wostream wcerr;
  extern wostream wclog;




  static ios_base::Init __ioinit;

}
# 7 "/home/neil/vlab-4.4.0/include/lintrfc.h" 2
# 16 "/home/neil/vlab-4.4.0/include/lintrfc.h"
typedef short int __lc_ModuleIdType;
# 25 "/home/neil/vlab-4.4.0/include/lintrfc.h"
typedef double __lc_MainAlignType;

struct __lc_BasicParameterStruct
{
 __lc_ModuleIdType moduleId;
};



struct __lc_FollowingModuleStruct
{
 struct Data
 {
  __lc_ModuleIdType moduleId;
  float Param0;
 }
 data;
};


class __lc_ActualParameters
{
public:
 __lc_ActualParameters() : _count(0)
 {}
 const char* pArg(int i) const
 { return _arr[i]; }
 void AddModuleAddr(const char* pX)
 {
   _arr[_count] = pX;
   ++_count;
 }
 int Count() const
 { return _count; }
 void Reset()
 { _count = 0; }
 void Reverse()
 {
  int high = _count-1;
  int low = 0;
  while (high>low)
  {
   const char* tmp = _arr[high];
   _arr[high] = _arr[low];
   _arr[low] = tmp;
   --high; ++low;
  }
 }

private:
 const char* _arr[32];
 int _count;
};


class __lc_CallerData
{
public:
 void Reset()
 {
  _RCntxt.Reset();
  _Strct.Reset();
  _LCntxt.Reset();
 }
 const __lc_ActualParameters& RCntxt() const
 { return _RCntxt; }
 const __lc_ActualParameters& Strct() const
 { return _Strct; }
 const __lc_ActualParameters& LCntxt() const
 { return _LCntxt; }
 __lc_ActualParameters& RCntxt()
 { return _RCntxt; }
 __lc_ActualParameters& Strct()
 { return _Strct; }
 __lc_ActualParameters& LCntxt()
 { return _LCntxt; }
private:
 __lc_ActualParameters _RCntxt;
 __lc_ActualParameters _Strct;
 __lc_ActualParameters _LCntxt;
};


typedef bool (*__lc_ProdCaller)(const __lc_CallerData*);


struct __lc_ProductionModules
{
 __lc_ModuleIdType arr[32];
 int count;
};

struct __lc_ContextProto
{
 bool HasNewContext() const
 { return NewCntxt.count>0; }
 __lc_ProductionModules Cntxt;
 __lc_ProductionModules NewCntxt;
};

struct __lc_ProductionPredecessor
{
 __lc_ContextProto LCntxt;
 __lc_ProductionModules Strct;
 __lc_ContextProto RCntxt;
 __lc_ProdCaller pCaller;
 int iConsiderGroup;
};


struct __lc_ModuleData
{
 const char* Name;
 int size;
};


typedef const char* __lc_Text;
# 191 "/home/neil/vlab-4.4.0/include/lintrfc.h"
extern "C"
{
  struct __lc_V2f { float x,y; };
}

template <typename f>
struct V2t
{
 f x, y;

 void Set(f nx, f ny)
 { x = nx; y = ny; }

 friend V2t<f> operator-(V2t<f> o)
 { V2t<f> result; result.Set(-o.x, -o.y); return result; }

 friend V2t<f> operator+(V2t<f> l, V2t<f> r)
 { V2t<f> result; result.Set(l.x+r.x, l.y+r.y); return result; }

 friend V2t<f> operator-(V2t<f> l, V2t<f> r)
 { V2t<f> result; result.Set(l.x-r.x, l.y-r.y); return result; }

 friend V2t<f> operator*(V2t<f> l, f r)
 { V2t<f> result; result.Set(l.x*r, l.y*r); return result; }

 friend V2t<f> operator*(f l, V2t<f> r)
 { return r*l; }

 friend f operator*(V2t<f>l, V2t<f> r)
 { return l.x*r.x + l.y*r.y; }

 friend V2t<f> operator/(V2t<f> l, f r)
 { V2t<f> result; result.Set(l.x/r, l.y/r); return result; }

 V2t<f>& Normalize()
 { return operator/=(Length()); }

 f Length() const
 { return std::sqrt(x*x + y*y); }

 V2t<f>& operator+=(V2t<f> r)
 {
  x += r.x;
  y += r.y;
  return *this;
 }
 V2t<f>& operator-=(V2t<f> r)
 {
  x -= r.x;
  y -= r.y;
  return *this;
 }
 V2t<f>& operator/=(f r)
 {
  x /= r; y/= r;
  return *this;
 }
 V2t<f>& operator*=(f r)
 {
  x*=r; y*=r;
  return *this;
 }
};

typedef V2t<float> V2tf;
typedef V2t<double> V2td;

template <typename f>
struct V2 : V2t<f>
{
 V2() { V2t<f>::x = static_cast<f>(0.0); V2t<f>::y = static_cast<f>(0.0); }
 V2(f nx, f ny) { V2t<f>::x = nx; V2t<f>::y = ny; }

 V2(const V2tf& src) { V2t<f>::x = static_cast<f>(src.x); V2t<f>::y = static_cast<f>(src.y); }
 V2(const V2td& src) { V2t<f>::x = static_cast<f>(src.x); V2t<f>::y = static_cast<f>(src.y); }

 template<typename g> explicit V2(const V2<g>& v) { V2t<f>::x = v.x; V2t<f>::y = v.y; }
 V2(const __lc_V2f& v2f) { V2t<f>::x = v2f.x; V2t<f>::y = v2f.y; }
};

typedef V2<float> V2f;
typedef V2<double> V2d;


extern "C" {
  struct __lc_V3f { float x,y,z; };
}

template <typename f>
struct V3t
{
 f x, y, z;


 void Set(f nx, f ny, f nz)
 { x = nx; y = ny; z = nz; }

 friend V3t<f> operator-(V3t<f> o)
 { V3t<f> res; res.Set(-o.x, -o.y, -o.z); return res; }

 friend V3t<f> operator+(V3t<f> l, V3t<f> r)
 { V3t<f> res; res.Set(l.x+r.x, l.y+r.y, l.z+r.z); return res; }

 friend V3t<f> operator-(V3t<f> l, V3t<f> r)
 { V3t<f> res; res.Set(l.x-r.x, l.y-r.y, l.z-r.z); return res; }

 friend V3t<f> operator*(V3t<f> l, f r)
 { V3t<f> res; res.Set(l.x*r, l.y*r, l.z*r); return res; }

 friend V3t<f> operator*(f l, V3t<f> r)
 { return r*l; }

 friend f operator*(V3t<f>l, V3t<f> r)
 { return l.x*r.x + l.y*r.y + l.z*r.z; }

 friend V3t<f> operator%(V3t<f>l, V3t<f> r)
 { V3t<f> res; res.Set(l.y*r.z-l.z*r.y, l.z*r.x-l.x*r.z, l.x*r.y-l.y*r.x); return res; }

 friend V3t<f> operator/(V3t<f>l, f r)
 { V3t<f> res; res.Set(l.x/r, l.y/r, l.z/r); return res; }

 V3t<f>& Normalize()
 { return operator/=(Length()); }
 f Length() const
 { return std::sqrt(x*x + y*y + z*z); }
 V3t<f>& operator+=(V3t<f> r)
 {
  x += r.x;
  y += r.y;
  z += r.z;
  return *this;
 }
 V3t<f>& operator-=(V3t<f> r)
 {
  x -= r.x;
  y -= r.y;
  z -= r.z;
  return *this;
 }
 V3t<f>& operator*=(f r)
 {
  x *= r; y *= r; z *= r;
  return *this;
 }
 V3t<f>& operator/=(f r)
 {
  x /= r; y /= r; z /= r;
  return *this;
 }

 double operator[](int c)
 {
  if (c == 0) return x;
  if (c == 1) return y;
  return z;
 }
};

typedef V3t<float> V3tf;
typedef V3t<double> V3td;

template <typename f>
struct V3 : V3t<f>
{
 V3()
 {
  V3t<f>::x = static_cast<f>(0.0);
  V3t<f>::y = static_cast<f>(0.0);
  V3t<f>::z = static_cast<f>(0.0);
 }
 V3(f nx, f ny, f nz)
 {
  V3t<f>::x = nx;
  V3t<f>::y = ny;
  V3t<f>::z = nz;
 }

 V3(const V3tf& src)
 {
  V3t<f>::x = static_cast<f>(src.x);
  V3t<f>::y = static_cast<f>(src.y);
  V3t<f>::z = static_cast<f>(src.z);
 }
 V3(const V3td& src)
 {
  V3t<f>::x = static_cast<f>(src.x);
  V3t<f>::y = static_cast<f>(src.y);
  V3t<f>::z = static_cast<f>(src.z);
 }

 V3(const V2tf& src)
 {
  V3t<f>::x = static_cast<f>(src.x);
  V3t<f>::y = static_cast<f>(src.y);
  V3t<f>::z = static_cast<f>(0.0);
 }

 V3(const V2td& src)
 {
  V3t<f>::x = static_cast<f>(src.x);
  V3t<f>::y = static_cast<f>(src.y);
  V3t<f>::z = static_cast<f>(0.0);
 }

 template<typename g> explicit V3(const V3t<g>& v)
 {
  V3t<f>::x = static_cast<f>(v.x);
  V3t<f>::y = static_cast<f>(v.y);
  V3t<f>::z = static_cast<f>(v.z);
 }
 V3(const __lc_V3f& v3f)
 {
  V3t<f>::x = v3f.x;
  V3t<f>::y = v3f.y;
  V3t<f>::z = v3f.z;
 }
};



typedef V3<float> V3f;
typedef V3<double> V3d;

template <class Vector>
Vector Normalize(Vector v)
{ return v.Normalize(); }





class SurfaceObj
{
public:
 void Set(int id, const float* arr)
 {
  _v[id].x = arr[0];
  _v[id].y = arr[1];
  _v[id].z = arr[2];
 }
 void Set(int id, const V3f& v)
 { _v[id] = v; }
 friend SurfaceObj operator*(SurfaceObj s, float r)
 {
  V3f scale(r, r, r);
  s.Scale(scale);
  return s;
 }
 friend SurfaceObj operator*(float r,const SurfaceObj& obj)
 {
   return obj * r;
 }
 friend SurfaceObj operator+(const SurfaceObj& l, const SurfaceObj& r)
 {
  SurfaceObj res;
  for (int i=0; i<CtrlPointsCount; ++i)
   res._v[i] = l._v[i] + r._v[i];
  return res;
 }
 const float* Points() const
 { return &(_v[0].x); }
 V3f Get(int i) const
 { return _v[i]; }
 void Scale(V3f scale)
 {
  for (int i=0; i<CtrlPointsCount; ++i)
  {
   _v[i].x *= scale.x;
   _v[i].y *= scale.y;
   _v[i].z *= scale.z;
  }
 }
private:
 enum
 { CtrlPointsCount = 16 };
 V3tf _v[CtrlPointsCount];
};



template<int N, int M>
class BsurfaceObjNM
{

public:

 friend BsurfaceObjNM operator*(BsurfaceObjNM s, float r)
 {
  V3f scale(r, r, r);
  s.Scale(scale);
  return s;
 }
 friend BsurfaceObjNM operator*(float r,const BsurfaceObjNM& obj)
 {
  return obj * r;
 }


 friend V3f **GetControlPoints(const BsurfaceObjNM & l,int &n,int &m)
 {
  V3f **t;
  t=new V3f*[N];

  n=l.n_u;
  m=l.n_v;

  for(int i=0;i<N;i++)
  {
   t[i]=new V3f [M];
   for(int j=0;j<M;j++)
    t[i][j]=l._v[i][j];
  }

  return t;
 }


 friend BsurfaceObjNM& ConstructBsurfaceObj(V3f **t, int n,int m,
  BsurfaceObjNM& res)
 {
   res.n_u=n;
   res.n_v=m;

   for(int i=0;i<res.n_u;i++)
   {
    for(int j=0;j<res.n_v;j++)
     res._v[i][j]=t[i][j];
    delete t[i];
   }

   delete t;

   return res;
 }



 void Scale(V3f scale)
 {
  for (int i=0; i<N; ++i)
  {
   for (int j=0; j<M; ++j)
   {
    _v[i][j].Set(_v[i][j].x*scale.x,_v[i][j].y*scale.y,_v[i][j].z*scale.z);
   }
  }

 }

 const V3f Get(int i,int j) const
 {
  if(i<N && j<M)
  {
   V3f v(_v[i][j].x,_v[i][j].y,_v[i][j].z);

   return v;
  }
  else
  {
   std::cout<<"BsurfaceObjNM dimensions exceeded"<<std::endl;
   return V3f(0,0,0);
  }
 }

 void Set(int i,int j, const V3f& v)
 {
  if(i<N && j<M)
   _v[i][j] = v;
  else
   std::cout<<"BsurfaceObjNM dimensions exceeded"<<std::endl;
 }

private:

 V3tf _v[N][M];
 int n_u;
 int n_v;


};


typedef BsurfaceObjNM<10,10> BsurfaceObjS;
BsurfaceObjS operator+(const BsurfaceObjS& l, const BsurfaceObjS& r);

typedef BsurfaceObjNM<32,32> BsurfaceObjM;
BsurfaceObjM operator+(const BsurfaceObjM& l, const BsurfaceObjM& r);


struct MouseStatus
{
  int viewNum;
  int viewX,viewY;
  V3td atFront,atRear,atMiddle;
  double selectDepth;
  V3td selectPoint;
  bool lbPushed, lbDown, lbReleased;

  MouseStatus(void)
    : lbPushed(false), lbDown(false), lbReleased(false)
  {}
};

struct TabletStatus
{
  bool connected;

  int viewX,viewY;
  float azimuth,altitude;
  double pressure;
  unsigned int cursorT, buttonState;

  V3d atFront,atRear;

  TabletStatus(void)
    : connected(false), viewX(0), viewY(0),
      azimuth(0), altitude(0), pressure(0),
      cursorT(0), buttonState(0),
      atFront(0,0,0), atRear(0,0,0)
  {}
};

struct CameraPosition
{
  V3tf position;
  V3tf head,left,up;
  float scale;

};


enum VisibilityMode{ Shaded, Hidden , Wireframe };



enum POVRayMeshMode{ Instance, Single };





template<class T,int length>
struct __lc_EncapsulatedArray
{
  T data[length];
  const T& operator[](int idx) const { return data[idx]; }
  T& operator[](int idx) { return data[idx]; }
  int Length() const { return length; }
  const T* Array() const { return data; }
};

typedef __lc_EncapsulatedArray<float,20> EA20Array;


typedef void (*pfMessage)(const char*, ...);
typedef void(*pfAdd)(const void*, int);
typedef float (*pfFloatIntFloat)(int, float);
typedef __lc_V2f (*pfV2fIntFloat)(int, float);
typedef __lc_V3f (*pfV3fIntFloat)(int, float);
typedef __lc_V3f (*pvV3fIntInt)(int, int);
typedef void (*pfVoidLong)(long);
typedef void (*pfVoidInt)(int);
typedef void (*pfVoid2Int3Float)(int, int, float, float, float);
typedef void (*pfVoidInt3Float)(int, float, float, float);
typedef void (*pfVoidString)(const char*);
typedef SurfaceObj (*pfSrfcInt)(int);
typedef void (*pfVoidVoid)();
typedef float (*pfFloatInt)(int);
typedef int (*pfIntVoid)();
typedef float (*pfFloatVoid)();
typedef double (*pfDoubleVoid)();
typedef double (*pfDoubleDouble)(double);
typedef void (*pfVoidString)(const char*);
typedef void (*pfVoidStringUInt)(const char*,unsigned int);
typedef MouseStatus (*pfMStat)(void);
typedef TabletStatus (*pfTStat)(void);
typedef CameraPosition (*pfCamPosInt)(int);
typedef char* (*pfCharVoid)(void);
typedef char* (*pfCharInt)(int);

typedef BsurfaceObjS (*pfBSSBinaryOp)(const BsurfaceObjS&,const BsurfaceObjS&);
typedef BsurfaceObjS (*pfBSSInterp)(const BsurfaceObjS&,const BsurfaceObjS&,float,int,int);
typedef V3f (*pfBSSGet)(const BsurfaceObjS&,int i, int j);
typedef BsurfaceObjS (*pfBSSSet)(const BsurfaceObjS&,int i, int j, V3f p);
typedef BsurfaceObjS (*pfBSSInt)(int);

typedef BsurfaceObjM (*pfBSMBinaryOp)(const BsurfaceObjM&,const BsurfaceObjM&);
typedef BsurfaceObjM (*pfBSMInterp)(const BsurfaceObjM&,const BsurfaceObjM&,float,int,int);
typedef V3f (*pfBSMGet)(const BsurfaceObjM&,int i, int j);
typedef BsurfaceObjM (*pfBSMSet)(const BsurfaceObjM&,int i, int j, V3f p);
typedef BsurfaceObjM (*pfBSMInt)(int);


typedef bool (*pfBoolV3fV3f)(V3f,V3f &);


typedef void (*pfVoidVisibilityMode)(VisibilityMode);
typedef void (*pfVoidVisibilityModeIntV3f)(VisibilityMode,int,V3f);
typedef void (*pfVoidFloat)(float);


typedef float (*pfFloatStringFloat)(const char*, float);
typedef int (*pfIntStringInt)(const char*, int);
typedef int (*pfIntString)(const char*);
typedef float (*pfFloatString)(const char*);
typedef void (*pfVoidStringFloat)(const char*, float);
typedef void (*pfVoidStringInt)(const char*, int);

typedef bool (*pfBoolVoid)();
typedef const char* (*pfPCharModuleId)(__lc_ModuleIdType);
typedef bool (*pfBoolModuleId)(__lc_ModuleIdType);

struct __lc_ExportedFromLpfg
{
 pfMessage fMessage;
 pfFloatIntFloat fFunc;
 pfFloatIntFloat fCurveX;
 pfFloatIntFloat fCurveY;
 pfFloatIntFloat fCurveZ;
 pfVoidInt fCurveReset;
 pfVoid2Int3Float fCurveSetPoint;
 pfVoidInt fCurveRecalc;
 pfV2fIntFloat fCurveV2fPoint;
 pfV3fIntFloat fCurveV3fPoint;
 pfVoidInt3Float fCurveScale;
 pfVoidString fRun;
 pfVoidInt fUseView;
 pfVoidInt fCloseView;
 pfSrfcInt fGetSurface;
 pvV3fIntInt fGetSurfacePoint;
 pfVoidVoid fDisplayFrame;
 pfFloatInt fvvXmin;
 pfFloatInt fvvYmin;
 pfFloatInt fvvZmin;
 pfFloatInt fvvXmax;
 pfFloatInt fvvYmax;
 pfFloatInt fvvZmax;
 pfFloatInt fvvScale;
 pfVoidVoid fStop;
 pfIntVoid fStepNo;
 pfDoubleVoid fGillespieTime;
 pfVoidLong fSeedGillespie;
        pfVoidVoid fResetGillespie;
 pfDoubleDouble fRan;
 pfVoidLong fSeedRan;
 pfVoidString fLoadString;
 pfVoidString fOutputString;
 pfMStat fGetMouseStatus;
 pfTStat fGetTabletStatus;
 pfVoidStringUInt fUserMenuItem;
 pfVoidVoid fUserMenuClear;
 pfIntVoid fUserMenuChoice;
 pfVoidVoid fRunSimulation;
 pfVoidVoid fPauseSimulation;
 pfCamPosInt fGetCameraPosition;

 pfBSSBinaryOp fBsurfaceObjSAdd;
 pfBSSInterp fBsurfaceObjSInterp;
 pfBSSGet fBsurfaceObjSGet;
 pfBSSSet fBsurfaceObjSSet;
 pfBSSInt fGetBsurfaceS;

 pfBSMBinaryOp fBsurfaceObjMAdd;
 pfBSMInterp fBsurfaceObjMInterp;
 pfBSMGet fBsurfaceObjMGet;
 pfBSMSet fBsurfaceObjMSet;
 pfBSMInt fGetBsurfaceM;

 pfBoolV3fV3f fterrainHeightAt;
 pfBoolV3fV3f fterrainNormalAt;
 pfVoidVisibilityMode fterrainVisibilityAll;
 pfVoidVisibilityModeIntV3f fterrainVisibilityPatch;
 pfVoidFloat fscaleTerrainBy;

 pfFloatStringFloat fSetOrGetParameterf;
 pfIntStringInt fSetOrGetParameteri;
 pfBoolVoid fParametersNeedUpdating;
 pfFloatString fGetParameterf;
 pfIntString fGetParameteri;
 pfVoidStringFloat fSetParameterf;
 pfVoidStringInt fSetParameteri;
 pfVoidVoid fDelayWrite;
 pfVoidVoid fWrite;

 pfBoolVoid fLContextReset;
 pfBoolVoid fRContextReset;
 pfBoolVoid fLNContextReset;
 pfBoolVoid fRNContextReset;
 pfBoolModuleId fAcceptContext;
 pfBoolVoid fAdvanceContext;
 pfBoolVoid fConfirmContext;
 pfPCharModuleId fGetModuleAddr;

 pfBoolModuleId fIsConsidered;

 pfCharInt fGetNextModuleSpot;

 pfVoidVoid fStartPerformance;
 pfVoidVoid fStopPerformance;

 pfVoidVoid fPushString;
 pfVoidVoid fPopString;
 pfIntVoid fStoredStringCount;
};
# 10 "/home/neil/vlab-4.4.0/include/lpfgall.h" 2
# 1 "/home/neil/vlab-4.4.0/include/lsys.h" 1
# 14 "/home/neil/vlab-4.4.0/include/lsys.h"
extern "C" void __lc_SetExported(const __lc_ExportedFromLpfg*);

extern "C" int DerivationLength();
extern "C" void Start();
extern "C" void StartEach();
extern "C" void EndEach();
extern "C" void End();
extern "C" void Axiom();
extern "C" int NumOfProductions(int);
extern "C" int NumOfDecompositions(int);
extern "C" int NumOfInterpretations(int);
extern "C" int NumOfModulePProductions(int iGroup, __lc_ModuleIdType moduleId);
extern "C" int NumOfModuleDProductions(int iGroup, __lc_ModuleIdType moduleId);
extern "C" int NumOfModuleIProductions(int iGroup, int iVGroup, __lc_ModuleIdType moduleId);
extern "C" const __lc_ProductionPredecessor& GetProductionPredecessor(int , int );
extern "C" const __lc_ProductionPredecessor& GetDecompositionPredecessor(int , int );
extern "C" const __lc_ProductionPredecessor& GetInterpretationPredecessor(int , int , int );
extern "C" const __lc_ProductionPredecessor& GetModulePProductionPredecessor(int iGroup, __lc_ModuleIdType moduleId, int id);
extern "C" const __lc_ProductionPredecessor& GetModuleDProductionPredecessor(int iGroup, __lc_ModuleIdType moduleId, int id);
extern "C" const __lc_ProductionPredecessor& GetModuleIProductionPredecessor(int iGroup, int iVGroup, __lc_ModuleIdType moduleId, int id);
extern "C" int NumOfConsiderGroups();
extern "C" int NumOfConsidered(int);
extern "C" int NumOfIgnored(int);
extern "C" __lc_ModuleIdType GetConsidered(int, int);
extern "C" __lc_ModuleIdType GetIgnored(int, int);
extern "C" int NumOfVerify();
extern "C" __lc_ModuleIdType GetVerify(int);
extern "C" int NumOfModules();
extern "C" const __lc_ModuleData* GetModuleData(int);

extern "C" bool IsForward();

extern "C" int DecompositionMaxDepth();
extern "C" int InterpretationMaxDepth();
extern "C" int RingLsystem();

extern "C" bool IgnoreEnvironment();

extern "C" int NumOfTables();
extern "C" int CurrentGroup();
extern "C" int NumOfViews();

extern "C" __lc_GroupType GetDerivationType(int);

pfMessage Printf = 0;
pfFloatIntFloat func = 0;
pfFloatIntFloat curveX = 0;
pfFloatIntFloat curveY = 0;
pfFloatIntFloat curveZ = 0;
pfV2fIntFloat curveXY = 0;
pfV3fIntFloat curveXYZ = 0;
pfVoidInt curveReset = 0;
pfVoid2Int3Float curveSetPoint = 0;
pfVoidInt curveRecalculate = 0;
pfVoidInt3Float curveScale = 0;
pfVoidString Run = 0;
pfSrfcInt GetSurface = 0;
pvV3fIntInt GetSurfacePoint = 0;
pfVoidInt fUseView = 0;
pfVoidInt CloseView = 0;
pfVoidVoid DisplayFrame = 0;
pfFloatInt vvXmin = 0;
pfFloatInt vvYmin = 0;
pfFloatInt vvZmin = 0;
pfFloatInt vvXmax = 0;
pfFloatInt vvYmax = 0;
pfFloatInt vvZmax = 0;
pfFloatInt vvScale = 0;
pfVoidVoid Stop = 0;
pfIntVoid StepNo = 0;
pfDoubleVoid GillespieTime = 0;
pfVoidLong SeedGillespie = 0;
pfVoidVoid ResetGillespie = 0;
pfDoubleDouble ran = 0;
pfVoidLong sran = 0;
pfVoidString LoadString = 0;
pfVoidString OutputString = 0;
pfMStat GetMouseStatus = 0;
pfTStat GetTabletStatus = 0;
pfVoidStringUInt UserMenuItem = 0;
pfVoidVoid UserMenuClear = 0;
pfIntVoid UserMenuChoice = 0;
pfVoidVoid RunSimulation = 0;
pfVoidVoid PauseSimulation = 0;
pfCamPosInt GetCameraPosition = 0;

pfBSSBinaryOp BsurfaceObjSAdd = 0;
pfBSSInterp BsurfaceObjSInterp = 0;
pfBSSGet BsurfaceObjSGet = 0;
pfBSSSet BsurfaceObjSSet = 0;
pfBSSInt GetBsurfaceS = 0;

pfBSMBinaryOp BsurfaceObjMAdd = 0;
pfBSMInterp BsurfaceObjMInterp = 0;
pfBSMGet BsurfaceObjMGet = 0;
pfBSMSet BsurfaceObjMSet = 0;
pfBSMInt GetBsurfaceM = 0;

pfBoolV3fV3f terrainNormalAt = 0;
pfBoolV3fV3f terrainHeightAt = 0;
pfVoidVisibilityMode terrainVisibilityAll = 0;
pfVoidVisibilityModeIntV3f terrainVisibilityPatch = 0;
pfVoidFloat scaleTerrainBy = 0;

pfFloatStringFloat SetOrGetParameterf = 0;
pfIntStringInt SetOrGetParameteri = 0;
pfBoolVoid ParametersNeedUpdating = 0;
pfFloatString GetParameterf = 0;
pfIntString GetParameteri = 0;
pfVoidStringFloat SetParameterf = 0;
pfVoidStringInt SetParameteri = 0;
pfVoidVoid DelayWrite = 0;
pfVoidVoid Write = 0;

pfBoolVoid LContextReset = 0;
pfBoolVoid RContextReset = 0;
pfBoolVoid LNContextReset = 0;
pfBoolVoid RNContextReset = 0;
pfBoolModuleId AcceptContext = 0;
pfBoolVoid AdvanceContext = 0;
pfBoolVoid ConfirmContext = 0;
pfPCharModuleId GetModuleAddr = 0;
pfCharInt GetNextModuleSpot = 0;
pfVoidVoid StartPerformance = 0;
pfVoidVoid StopPerformance = 0;


void __lc_SetExported(const __lc_ExportedFromLpfg* pExp)
{
 Printf = pExp->fMessage;
 func = pExp->fFunc;
 curveX = pExp->fCurveX;
 curveY = pExp->fCurveY;
 curveZ = pExp->fCurveZ;
 curveReset = pExp->fCurveReset;
 curveSetPoint = pExp->fCurveSetPoint;
 curveRecalculate = pExp->fCurveRecalc;
 curveXY = pExp->fCurveV2fPoint;
 curveXYZ = pExp->fCurveV3fPoint;
 curveScale = pExp->fCurveScale;
 Run = pExp->fRun;
 GetSurface = pExp->fGetSurface;
 GetSurfacePoint = pExp->fGetSurfacePoint;
 fUseView = pExp->fUseView;
 CloseView = pExp->fCloseView;
 DisplayFrame = pExp->fDisplayFrame;
 vvXmin = pExp->fvvXmin;
 vvYmin = pExp->fvvYmin;
 vvZmin = pExp->fvvZmin;
 vvXmax = pExp->fvvXmax;
 vvYmax = pExp->fvvYmax;
 vvZmax = pExp->fvvZmax;
 vvScale = pExp->fvvScale;
 Stop = pExp->fStop;
 StepNo = pExp->fStepNo;
 GillespieTime = pExp->fGillespieTime;
 SeedGillespie = pExp->fSeedGillespie;
        ResetGillespie = pExp->fResetGillespie;
 ran = pExp->fRan;
 sran = pExp->fSeedRan;
 LoadString = pExp->fLoadString;
 OutputString = pExp->fOutputString;
 GetMouseStatus = pExp->fGetMouseStatus;
 GetTabletStatus = pExp->fGetTabletStatus;
 UserMenuItem = pExp->fUserMenuItem;
 UserMenuClear = pExp->fUserMenuClear;
 UserMenuChoice = pExp->fUserMenuChoice;
 RunSimulation = pExp->fRunSimulation;
 PauseSimulation = pExp->fPauseSimulation;
 GetCameraPosition = pExp->fGetCameraPosition;

 BsurfaceObjSAdd = pExp->fBsurfaceObjSAdd;
 BsurfaceObjSInterp = pExp->fBsurfaceObjSInterp;
 BsurfaceObjSGet = pExp->fBsurfaceObjSGet;
 BsurfaceObjSSet = pExp->fBsurfaceObjSSet;
 GetBsurfaceS = pExp->fGetBsurfaceS;

 BsurfaceObjMAdd = pExp->fBsurfaceObjMAdd;
 BsurfaceObjMInterp = pExp->fBsurfaceObjMInterp;
 BsurfaceObjMGet = pExp->fBsurfaceObjMGet;
 BsurfaceObjMSet = pExp->fBsurfaceObjMSet;
 GetBsurfaceM = pExp->fGetBsurfaceM;

 terrainHeightAt = pExp->fterrainHeightAt;
 terrainNormalAt = pExp->fterrainNormalAt;
 terrainVisibilityAll = pExp->fterrainVisibilityAll;
 terrainVisibilityPatch = pExp->fterrainVisibilityPatch;
 scaleTerrainBy = pExp->fscaleTerrainBy;

 SetOrGetParameterf = pExp->fSetOrGetParameterf;
 SetOrGetParameteri = pExp->fSetOrGetParameteri;
 ParametersNeedUpdating = pExp->fParametersNeedUpdating;
 GetParameterf = pExp->fGetParameterf;
 GetParameteri = pExp->fGetParameteri;
 SetParameterf = pExp->fSetParameterf;
 SetParameteri = pExp->fSetParameteri;
 DelayWrite = pExp->fDelayWrite;
 Write = pExp->fWrite;

 LContextReset = pExp->fLContextReset;
 RContextReset = pExp->fRContextReset;
 LNContextReset = pExp->fLNContextReset;
 RNContextReset = pExp->fRNContextReset;

 AdvanceContext = pExp->fAdvanceContext;
 AcceptContext = pExp->fAcceptContext;
 ConfirmContext = pExp->fConfirmContext;
 GetModuleAddr = pExp->fGetModuleAddr;

 GetNextModuleSpot = pExp->fGetNextModuleSpot;
 StartPerformance = pExp->fStartPerformance;
 StopPerformance = pExp->fStopPerformance;
}

BsurfaceObjS operator+(const BsurfaceObjS& l, const BsurfaceObjS& r)
{
  return BsurfaceObjSAdd(l,r);
}
BsurfaceObjS Interpolate(const BsurfaceObjS& l1, const BsurfaceObjS& l2,
    float alpha, int r, int c)
{
  return BsurfaceObjSInterp(l1,l2,alpha,r,c);
}

V3f Get(const BsurfaceObjS& l1, int i, int j)
{
  return BsurfaceObjSGet(l1,i,j);
}

BsurfaceObjS Set(const BsurfaceObjS& l1, int i, int j, V3f p)
{
  return BsurfaceObjSSet(l1,i,j,p);
}



BsurfaceObjM operator+(const BsurfaceObjM& l, const BsurfaceObjM& r)
{
  return BsurfaceObjMAdd(l,r);
}
BsurfaceObjM Interpolate(const BsurfaceObjM& l1, const BsurfaceObjM& l2,
    float alpha, int r, int c)
{
  return BsurfaceObjMInterp(l1,l2,alpha,r,c);
}

V3f Get(const BsurfaceObjM& l1, int i, int j)
{
  return BsurfaceObjMGet(l1,i,j);
}

BsurfaceObjM Set(const BsurfaceObjM& l1, int i, int j, V3f p)
{
  return BsurfaceObjMSet(l1,i,j,p);
}



template<typename T>
void Produce(T t)
{ pAdd(&t, sizeof(T)); }

bool __DeriveForward = true;

inline void Forward()
{ __DeriveForward = true; }
inline void Backward()
{ __DeriveForward = false; }
bool IsForward()
{ return __DeriveForward; }

bool __IgnoreEnvironment = false;

inline void Environment()
{ __IgnoreEnvironment = false; }
inline void NoEnvironment()
{ __IgnoreEnvironment = true; }

bool IgnoreEnvironment()
{ return __IgnoreEnvironment; }

int __CurrentTable = 0;

void UseGroup(int i)
{
 if (i<0 || i>=NumOfTables())
  Printf("Invalid group id = %d. Ignored\n", i);
 else
  __CurrentTable = i;
}


int CurrentGroup()
{
 return __CurrentTable;
}

void UseView(int i)
{
 if (i<0 || i>=NumOfViews())
  Printf("Invalid vgroup id = %d. Ignored\n", i);
 else
  fUseView(i);
}
# 11 "/home/neil/vlab-4.4.0/include/lpfgall.h" 2
# 1 "/home/neil/vlab-4.4.0/include/stdmods.h" 1



   const __lc_ModuleIdType SB_id = 0;bool GetModuleSB();struct __SB_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  __lc_ModuleIdType moduleId2; } data; }; const int __SB_ParamsStructSize = sizeof(__SB_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__SB_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__SB_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __SB_ParamsStructArr_ { __lc_ModuleIdType arr[__SB_ParamsStructSize]; };
   const __lc_ModuleIdType EB_id = 1;bool GetModuleEB();struct __EB_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  __lc_ModuleIdType moduleId2; } data; }; const int __EB_ParamsStructSize = sizeof(__EB_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__EB_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__EB_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __EB_ParamsStructArr_ { __lc_ModuleIdType arr[__EB_ParamsStructSize]; };
   const __lc_ModuleIdType F_id = 2;bool GetModuleF(float& param0);struct __F_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __F_ParamsStructSize = sizeof(__F_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__F_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__F_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __F_ParamsStructArr_ { __lc_ModuleIdType arr[__F_ParamsStructSize]; };
   const __lc_ModuleIdType f_id = 3;bool GetModulef(float& param0);struct __f_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __f_ParamsStructSize = sizeof(__f_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__f_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__f_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __f_ParamsStructArr_ { __lc_ModuleIdType arr[__f_ParamsStructSize]; };
   const __lc_ModuleIdType Left_id = 4;bool GetModuleLeft(float& param0);struct __Left_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __Left_ParamsStructSize = sizeof(__Left_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Left_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Left_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Left_ParamsStructArr_ { __lc_ModuleIdType arr[__Left_ParamsStructSize]; };
   const __lc_ModuleIdType Right_id = 5;bool GetModuleRight(float& param0);struct __Right_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __Right_ParamsStructSize = sizeof(__Right_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Right_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Right_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Right_ParamsStructArr_ { __lc_ModuleIdType arr[__Right_ParamsStructSize]; };
   const __lc_ModuleIdType Down_id = 6;bool GetModuleDown(float& param0);struct __Down_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __Down_ParamsStructSize = sizeof(__Down_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Down_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Down_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Down_ParamsStructArr_ { __lc_ModuleIdType arr[__Down_ParamsStructSize]; };
   const __lc_ModuleIdType Up_id = 7;bool GetModuleUp(float& param0);struct __Up_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __Up_ParamsStructSize = sizeof(__Up_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Up_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Up_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Up_ParamsStructArr_ { __lc_ModuleIdType arr[__Up_ParamsStructSize]; };
   const __lc_ModuleIdType RollL_id = 8;bool GetModuleRollL(float& param0);struct __RollL_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __RollL_ParamsStructSize = sizeof(__RollL_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__RollL_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__RollL_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __RollL_ParamsStructArr_ { __lc_ModuleIdType arr[__RollL_ParamsStructSize]; };
   const __lc_ModuleIdType RollR_id = 9;bool GetModuleRollR(float& param0);struct __RollR_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __RollR_ParamsStructSize = sizeof(__RollR_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__RollR_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__RollR_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __RollR_ParamsStructArr_ { __lc_ModuleIdType arr[__RollR_ParamsStructSize]; };
   const __lc_ModuleIdType IncColor_id = 10;bool GetModuleIncColor();struct __IncColor_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  __lc_ModuleIdType moduleId2; } data; }; const int __IncColor_ParamsStructSize = sizeof(__IncColor_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__IncColor_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__IncColor_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __IncColor_ParamsStructArr_ { __lc_ModuleIdType arr[__IncColor_ParamsStructSize]; };
   const __lc_ModuleIdType DecColor_id = 11;bool GetModuleDecColor();struct __DecColor_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  __lc_ModuleIdType moduleId2; } data; }; const int __DecColor_ParamsStructSize = sizeof(__DecColor_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__DecColor_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__DecColor_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __DecColor_ParamsStructArr_ { __lc_ModuleIdType arr[__DecColor_ParamsStructSize]; };
   const __lc_ModuleIdType SetColor_id = 12;bool GetModuleSetColor(int& param0);struct __SetColor_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  int Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __SetColor_ParamsStructSize = sizeof(__SetColor_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__SetColor_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__SetColor_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __SetColor_ParamsStructArr_ { __lc_ModuleIdType arr[__SetColor_ParamsStructSize]; };
   const __lc_ModuleIdType SetWidth_id = 13;bool GetModuleSetWidth(float& param0);struct __SetWidth_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __SetWidth_ParamsStructSize = sizeof(__SetWidth_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__SetWidth_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__SetWidth_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __SetWidth_ParamsStructArr_ { __lc_ModuleIdType arr[__SetWidth_ParamsStructSize]; };
   const __lc_ModuleIdType Label_id = 14;bool GetModuleLabel(__lc_Text& param0);struct __Label_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  __lc_Text Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __Label_ParamsStructSize = sizeof(__Label_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Label_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Label_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Label_ParamsStructArr_ { __lc_ModuleIdType arr[__Label_ParamsStructSize]; };
   const __lc_ModuleIdType TurnAround_id = 15;bool GetModuleTurnAround();struct __TurnAround_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  __lc_ModuleIdType moduleId2; } data; }; const int __TurnAround_ParamsStructSize = sizeof(__TurnAround_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__TurnAround_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__TurnAround_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __TurnAround_ParamsStructArr_ { __lc_ModuleIdType arr[__TurnAround_ParamsStructSize]; };
   const __lc_ModuleIdType Cut_id = 16;bool GetModuleCut();struct __Cut_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  __lc_ModuleIdType moduleId2; } data; }; const int __Cut_ParamsStructSize = sizeof(__Cut_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Cut_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Cut_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Cut_ParamsStructArr_ { __lc_ModuleIdType arr[__Cut_ParamsStructSize]; };
     const __lc_ModuleIdType GetPos_id = 17;bool GetModuleGetPos(float& param0, float& param1, float& param2);struct __GetPos_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  float Param1;  float Param2;  __lc_ModuleIdType moduleId2; } data; }; const int __GetPos_ParamsStructSize = sizeof(__GetPos_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__GetPos_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__GetPos_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __GetPos_ParamsStructArr_ { __lc_ModuleIdType arr[__GetPos_ParamsStructSize]; };
     const __lc_ModuleIdType GetHead_id = 18;bool GetModuleGetHead(float& param0, float& param1, float& param2);struct __GetHead_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  float Param1;  float Param2;  __lc_ModuleIdType moduleId2; } data; }; const int __GetHead_ParamsStructSize = sizeof(__GetHead_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__GetHead_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__GetHead_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __GetHead_ParamsStructArr_ { __lc_ModuleIdType arr[__GetHead_ParamsStructSize]; };
     const __lc_ModuleIdType GetLeft_id = 19;bool GetModuleGetLeft(float& param0, float& param1, float& param2);struct __GetLeft_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  float Param1;  float Param2;  __lc_ModuleIdType moduleId2; } data; }; const int __GetLeft_ParamsStructSize = sizeof(__GetLeft_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__GetLeft_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__GetLeft_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __GetLeft_ParamsStructArr_ { __lc_ModuleIdType arr[__GetLeft_ParamsStructSize]; };
     const __lc_ModuleIdType GetUp_id = 20;bool GetModuleGetUp(float& param0, float& param1, float& param2);struct __GetUp_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  float Param1;  float Param2;  __lc_ModuleIdType moduleId2; } data; }; const int __GetUp_ParamsStructSize = sizeof(__GetUp_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__GetUp_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__GetUp_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __GetUp_ParamsStructArr_ { __lc_ModuleIdType arr[__GetUp_ParamsStructSize]; };
   const __lc_ModuleIdType Circle_id = 21;bool GetModuleCircle(float& param0);struct __Circle_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __Circle_ParamsStructSize = sizeof(__Circle_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Circle_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Circle_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Circle_ParamsStructArr_ { __lc_ModuleIdType arr[__Circle_ParamsStructSize]; };
     const __lc_ModuleIdType MoveTo_id = 22;bool GetModuleMoveTo(float& param0, float& param1, float& param2);struct __MoveTo_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  float Param1;  float Param2;  __lc_ModuleIdType moduleId2; } data; }; const int __MoveTo_ParamsStructSize = sizeof(__MoveTo_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__MoveTo_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__MoveTo_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __MoveTo_ParamsStructArr_ { __lc_ModuleIdType arr[__MoveTo_ParamsStructSize]; };
   const __lc_ModuleIdType Sphere_id = 23;bool GetModuleSphere(float& param0);struct __Sphere_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __Sphere_ParamsStructSize = sizeof(__Sphere_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Sphere_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Sphere_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Sphere_ParamsStructArr_ { __lc_ModuleIdType arr[__Sphere_ParamsStructSize]; };
        const __lc_ModuleIdType SetHead_id = 24;bool GetModuleSetHead(float& param0, float& param1, float& param2, float& param3, float& param4, float& param5);struct __SetHead_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  float Param1;  float Param2;  float Param3;  float Param4;  float Param5;  __lc_ModuleIdType moduleId2; } data; }; const int __SetHead_ParamsStructSize = sizeof(__SetHead_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__SetHead_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__SetHead_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __SetHead_ParamsStructArr_ { __lc_ModuleIdType arr[__SetHead_ParamsStructSize]; };
   const __lc_ModuleIdType Sphere0_id = 25;bool GetModuleSphere0();struct __Sphere0_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  __lc_ModuleIdType moduleId2; } data; }; const int __Sphere0_ParamsStructSize = sizeof(__Sphere0_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Sphere0_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Sphere0_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Sphere0_ParamsStructArr_ { __lc_ModuleIdType arr[__Sphere0_ParamsStructSize]; };
   const __lc_ModuleIdType Circle0_id = 26;bool GetModuleCircle0();struct __Circle0_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  __lc_ModuleIdType moduleId2; } data; }; const int __Circle0_ParamsStructSize = sizeof(__Circle0_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Circle0_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Circle0_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Circle0_ParamsStructArr_ { __lc_ModuleIdType arr[__Circle0_ParamsStructSize]; };
    const __lc_ModuleIdType Line2f_id = 27;bool GetModuleLine2f(V2tf& param0, V2tf& param1);struct __Line2f_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V2tf Param0;  V2tf Param1;  __lc_ModuleIdType moduleId2; } data; }; const int __Line2f_ParamsStructSize = sizeof(__Line2f_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Line2f_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Line2f_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Line2f_ParamsStructArr_ { __lc_ModuleIdType arr[__Line2f_ParamsStructSize]; };
    const __lc_ModuleIdType Line2d_id = 28;bool GetModuleLine2d(V2td& param0, V2td& param1);struct __Line2d_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V2td Param0;  V2td Param1;  __lc_ModuleIdType moduleId2; } data; }; const int __Line2d_ParamsStructSize = sizeof(__Line2d_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Line2d_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Line2d_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Line2d_ParamsStructArr_ { __lc_ModuleIdType arr[__Line2d_ParamsStructSize]; };
    const __lc_ModuleIdType Line3f_id = 29;bool GetModuleLine3f(V3tf& param0, V3tf& param1);struct __Line3f_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V3tf Param0;  V3tf Param1;  __lc_ModuleIdType moduleId2; } data; }; const int __Line3f_ParamsStructSize = sizeof(__Line3f_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Line3f_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Line3f_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Line3f_ParamsStructArr_ { __lc_ModuleIdType arr[__Line3f_ParamsStructSize]; };
    const __lc_ModuleIdType Line3d_id = 30;bool GetModuleLine3d(V3td& param0, V3td& param1);struct __Line3d_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V3td Param0;  V3td Param1;  __lc_ModuleIdType moduleId2; } data; }; const int __Line3d_ParamsStructSize = sizeof(__Line3d_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Line3d_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Line3d_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Line3d_ParamsStructArr_ { __lc_ModuleIdType arr[__Line3d_ParamsStructSize]; };
   const __lc_ModuleIdType LineTo2f_id = 31;bool GetModuleLineTo2f(V2tf& param0);struct __LineTo2f_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V2tf Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __LineTo2f_ParamsStructSize = sizeof(__LineTo2f_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__LineTo2f_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__LineTo2f_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __LineTo2f_ParamsStructArr_ { __lc_ModuleIdType arr[__LineTo2f_ParamsStructSize]; };
   const __lc_ModuleIdType LineTo2d_id = 32;bool GetModuleLineTo2d(V2td& param0);struct __LineTo2d_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V2td Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __LineTo2d_ParamsStructSize = sizeof(__LineTo2d_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__LineTo2d_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__LineTo2d_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __LineTo2d_ParamsStructArr_ { __lc_ModuleIdType arr[__LineTo2d_ParamsStructSize]; };
   const __lc_ModuleIdType LineTo3f_id = 33;bool GetModuleLineTo3f(V3tf& param0);struct __LineTo3f_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V3tf Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __LineTo3f_ParamsStructSize = sizeof(__LineTo3f_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__LineTo3f_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__LineTo3f_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __LineTo3f_ParamsStructArr_ { __lc_ModuleIdType arr[__LineTo3f_ParamsStructSize]; };
   const __lc_ModuleIdType LineTo3d_id = 34;bool GetModuleLineTo3d(V3td& param0);struct __LineTo3d_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V3td Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __LineTo3d_ParamsStructSize = sizeof(__LineTo3d_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__LineTo3d_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__LineTo3d_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __LineTo3d_ParamsStructArr_ { __lc_ModuleIdType arr[__LineTo3d_ParamsStructSize]; };
   const __lc_ModuleIdType LineRel2f_id = 35;bool GetModuleLineRel2f(V2tf& param0);struct __LineRel2f_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V2tf Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __LineRel2f_ParamsStructSize = sizeof(__LineRel2f_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__LineRel2f_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__LineRel2f_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __LineRel2f_ParamsStructArr_ { __lc_ModuleIdType arr[__LineRel2f_ParamsStructSize]; };
   const __lc_ModuleIdType LineRel2d_id = 36;bool GetModuleLineRel2d(V2td& param0);struct __LineRel2d_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V2td Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __LineRel2d_ParamsStructSize = sizeof(__LineRel2d_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__LineRel2d_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__LineRel2d_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __LineRel2d_ParamsStructArr_ { __lc_ModuleIdType arr[__LineRel2d_ParamsStructSize]; };
   const __lc_ModuleIdType LineRel3f_id = 37;bool GetModuleLineRel3f(V3tf& param0);struct __LineRel3f_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V3tf Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __LineRel3f_ParamsStructSize = sizeof(__LineRel3f_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__LineRel3f_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__LineRel3f_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __LineRel3f_ParamsStructArr_ { __lc_ModuleIdType arr[__LineRel3f_ParamsStructSize]; };
   const __lc_ModuleIdType LineRel3d_id = 38;bool GetModuleLineRel3d(V3td& param0);struct __LineRel3d_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V3td Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __LineRel3d_ParamsStructSize = sizeof(__LineRel3d_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__LineRel3d_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__LineRel3d_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __LineRel3d_ParamsStructArr_ { __lc_ModuleIdType arr[__LineRel3d_ParamsStructSize]; };
    const __lc_ModuleIdType Surface_id = 39;bool GetModuleSurface(int& param0, float& param1);struct __Surface_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  int Param0;  float Param1;  __lc_ModuleIdType moduleId2; } data; }; const int __Surface_ParamsStructSize = sizeof(__Surface_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Surface_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Surface_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Surface_ParamsStructArr_ { __lc_ModuleIdType arr[__Surface_ParamsStructSize]; };
   const __lc_ModuleIdType RollToVert_id = 40;bool GetModuleRollToVert();struct __RollToVert_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  __lc_ModuleIdType moduleId2; } data; }; const int __RollToVert_ParamsStructSize = sizeof(__RollToVert_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__RollToVert_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__RollToVert_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __RollToVert_ParamsStructArr_ { __lc_ModuleIdType arr[__RollToVert_ParamsStructSize]; };
    const __lc_ModuleIdType SetElasticity_id = 41;bool GetModuleSetElasticity(int& param0, float& param1);struct __SetElasticity_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  int Param0;  float Param1;  __lc_ModuleIdType moduleId2; } data; }; const int __SetElasticity_ParamsStructSize = sizeof(__SetElasticity_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__SetElasticity_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__SetElasticity_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __SetElasticity_ParamsStructArr_ { __lc_ModuleIdType arr[__SetElasticity_ParamsStructSize]; };
   const __lc_ModuleIdType IncElasticity_id = 42;bool GetModuleIncElasticity(int& param0);struct __IncElasticity_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  int Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __IncElasticity_ParamsStructSize = sizeof(__IncElasticity_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__IncElasticity_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__IncElasticity_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __IncElasticity_ParamsStructArr_ { __lc_ModuleIdType arr[__IncElasticity_ParamsStructSize]; };
   const __lc_ModuleIdType DecElasticity_id = 43;bool GetModuleDecElasticity(int& param0);struct __DecElasticity_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  int Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __DecElasticity_ParamsStructSize = sizeof(__DecElasticity_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__DecElasticity_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__DecElasticity_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __DecElasticity_ParamsStructArr_ { __lc_ModuleIdType arr[__DecElasticity_ParamsStructSize]; };
   const __lc_ModuleIdType CurrentContour_id = 44;bool GetModuleCurrentContour(int& param0);struct __CurrentContour_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  int Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __CurrentContour_ParamsStructSize = sizeof(__CurrentContour_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__CurrentContour_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__CurrentContour_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __CurrentContour_ParamsStructArr_ { __lc_ModuleIdType arr[__CurrentContour_ParamsStructSize]; };
   const __lc_ModuleIdType StartGC_id = 45;bool GetModuleStartGC();struct __StartGC_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  __lc_ModuleIdType moduleId2; } data; }; const int __StartGC_ParamsStructSize = sizeof(__StartGC_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__StartGC_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__StartGC_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __StartGC_ParamsStructArr_ { __lc_ModuleIdType arr[__StartGC_ParamsStructSize]; };
   const __lc_ModuleIdType PointGC_id = 46;bool GetModulePointGC();struct __PointGC_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  __lc_ModuleIdType moduleId2; } data; }; const int __PointGC_ParamsStructSize = sizeof(__PointGC_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__PointGC_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__PointGC_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __PointGC_ParamsStructArr_ { __lc_ModuleIdType arr[__PointGC_ParamsStructSize]; };
   const __lc_ModuleIdType EndGC_id = 47;bool GetModuleEndGC();struct __EndGC_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  __lc_ModuleIdType moduleId2; } data; }; const int __EndGC_ParamsStructSize = sizeof(__EndGC_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__EndGC_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__EndGC_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __EndGC_ParamsStructArr_ { __lc_ModuleIdType arr[__EndGC_ParamsStructSize]; };
   const __lc_ModuleIdType MeshPoint_id = 48;bool GetModuleMeshPoint();struct __MeshPoint_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  __lc_ModuleIdType moduleId2; } data; }; const int __MeshPoint_ParamsStructSize = sizeof(__MeshPoint_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__MeshPoint_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__MeshPoint_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __MeshPoint_ParamsStructArr_ { __lc_ModuleIdType arr[__MeshPoint_ParamsStructSize]; };
   const __lc_ModuleIdType E1_id = 49;bool GetModuleE1(float& param0);struct __E1_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __E1_ParamsStructSize = sizeof(__E1_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__E1_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__E1_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __E1_ParamsStructArr_ { __lc_ModuleIdType arr[__E1_ParamsStructSize]; };
   const __lc_ModuleIdType MoveTo2f_id = 50;bool GetModuleMoveTo2f(V2tf& param0);struct __MoveTo2f_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V2tf Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __MoveTo2f_ParamsStructSize = sizeof(__MoveTo2f_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__MoveTo2f_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__MoveTo2f_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __MoveTo2f_ParamsStructArr_ { __lc_ModuleIdType arr[__MoveTo2f_ParamsStructSize]; };
   const __lc_ModuleIdType MoveTo2d_id = 51;bool GetModuleMoveTo2d(V2td& param0);struct __MoveTo2d_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V2td Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __MoveTo2d_ParamsStructSize = sizeof(__MoveTo2d_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__MoveTo2d_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__MoveTo2d_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __MoveTo2d_ParamsStructArr_ { __lc_ModuleIdType arr[__MoveTo2d_ParamsStructSize]; };
   const __lc_ModuleIdType MoveTo3f_id = 52;bool GetModuleMoveTo3f(V3tf& param0);struct __MoveTo3f_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V3tf Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __MoveTo3f_ParamsStructSize = sizeof(__MoveTo3f_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__MoveTo3f_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__MoveTo3f_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __MoveTo3f_ParamsStructArr_ { __lc_ModuleIdType arr[__MoveTo3f_ParamsStructSize]; };
   const __lc_ModuleIdType MoveTo3d_id = 53;bool GetModuleMoveTo3d(V3td& param0);struct __MoveTo3d_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V3td Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __MoveTo3d_ParamsStructSize = sizeof(__MoveTo3d_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__MoveTo3d_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__MoveTo3d_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __MoveTo3d_ParamsStructArr_ { __lc_ModuleIdType arr[__MoveTo3d_ParamsStructSize]; };
    const __lc_ModuleIdType E2_id = 54;bool GetModuleE2(float& param0, float& param1);struct __E2_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  float Param1;  __lc_ModuleIdType moduleId2; } data; }; const int __E2_ParamsStructSize = sizeof(__E2_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__E2_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__E2_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __E2_ParamsStructArr_ { __lc_ModuleIdType arr[__E2_ParamsStructSize]; };
   const __lc_ModuleIdType SP_id = 55;bool GetModuleSP();struct __SP_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  __lc_ModuleIdType moduleId2; } data; }; const int __SP_ParamsStructSize = sizeof(__SP_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__SP_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__SP_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __SP_ParamsStructArr_ { __lc_ModuleIdType arr[__SP_ParamsStructSize]; };
   const __lc_ModuleIdType EP_id = 56;bool GetModuleEP();struct __EP_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  __lc_ModuleIdType moduleId2; } data; }; const int __EP_ParamsStructSize = sizeof(__EP_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__EP_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__EP_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __EP_ParamsStructArr_ { __lc_ModuleIdType arr[__EP_ParamsStructSize]; };
   const __lc_ModuleIdType PP_id = 57;bool GetModulePP();struct __PP_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  __lc_ModuleIdType moduleId2; } data; }; const int __PP_ParamsStructSize = sizeof(__PP_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__PP_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__PP_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __PP_ParamsStructArr_ { __lc_ModuleIdType arr[__PP_ParamsStructSize]; };
    const __lc_ModuleIdType Rhombus_id = 58;bool GetModuleRhombus(float& param0, float& param1);struct __Rhombus_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  float Param1;  __lc_ModuleIdType moduleId2; } data; }; const int __Rhombus_ParamsStructSize = sizeof(__Rhombus_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Rhombus_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Rhombus_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Rhombus_ParamsStructArr_ { __lc_ModuleIdType arr[__Rhombus_ParamsStructSize]; };
    const __lc_ModuleIdType Triangle_id = 59;bool GetModuleTriangle(float& param0, float& param1);struct __Triangle_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  float Param1;  __lc_ModuleIdType moduleId2; } data; }; const int __Triangle_ParamsStructSize = sizeof(__Triangle_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Triangle_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Triangle_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Triangle_ParamsStructArr_ { __lc_ModuleIdType arr[__Triangle_ParamsStructSize]; };
   const __lc_ModuleIdType MouseIns_id = 60;bool GetModuleMouseIns();struct __MouseIns_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  __lc_ModuleIdType moduleId2; } data; }; const int __MouseIns_ParamsStructSize = sizeof(__MouseIns_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__MouseIns_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__MouseIns_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __MouseIns_ParamsStructArr_ { __lc_ModuleIdType arr[__MouseIns_ParamsStructSize]; };
     const __lc_ModuleIdType BlendedContour_id = 61;bool GetModuleBlendedContour(int& param0, int& param1, float& param2);struct __BlendedContour_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  int Param0;  int Param1;  float Param2;  __lc_ModuleIdType moduleId2; } data; }; const int __BlendedContour_ParamsStructSize = sizeof(__BlendedContour_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__BlendedContour_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__BlendedContour_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __BlendedContour_ParamsStructArr_ { __lc_ModuleIdType arr[__BlendedContour_ParamsStructSize]; };
   const __lc_ModuleIdType CurrentTexture_id = 62;bool GetModuleCurrentTexture(int& param0);struct __CurrentTexture_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  int Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __CurrentTexture_ParamsStructSize = sizeof(__CurrentTexture_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__CurrentTexture_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__CurrentTexture_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __CurrentTexture_ParamsStructArr_ { __lc_ModuleIdType arr[__CurrentTexture_ParamsStructSize]; };
   const __lc_ModuleIdType TextureVCoeff_id = 63;bool GetModuleTextureVCoeff(float& param0);struct __TextureVCoeff_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __TextureVCoeff_ParamsStructSize = sizeof(__TextureVCoeff_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__TextureVCoeff_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__TextureVCoeff_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __TextureVCoeff_ParamsStructArr_ { __lc_ModuleIdType arr[__TextureVCoeff_ParamsStructSize]; };
   const __lc_ModuleIdType Orient_id = 64;bool GetModuleOrient();struct __Orient_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  __lc_ModuleIdType moduleId2; } data; }; const int __Orient_ParamsStructSize = sizeof(__Orient_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Orient_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Orient_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Orient_ParamsStructArr_ { __lc_ModuleIdType arr[__Orient_ParamsStructSize]; };
    const __lc_ModuleIdType ScaleContour_id = 65;bool GetModuleScaleContour(float& param0, float& param1);struct __ScaleContour_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  float Param1;  __lc_ModuleIdType moduleId2; } data; }; const int __ScaleContour_ParamsStructSize = sizeof(__ScaleContour_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__ScaleContour_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__ScaleContour_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __ScaleContour_ParamsStructArr_ { __lc_ModuleIdType arr[__ScaleContour_ParamsStructSize]; };
   const __lc_ModuleIdType Elasticity_id = 66;bool GetModuleElasticity(float& param0);struct __Elasticity_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __Elasticity_ParamsStructSize = sizeof(__Elasticity_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Elasticity_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Elasticity_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Elasticity_ParamsStructArr_ { __lc_ModuleIdType arr[__Elasticity_ParamsStructSize]; };
   const __lc_ModuleIdType DSurface_id = 67;bool GetModuleDSurface(SurfaceObj& param0);struct __DSurface_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  SurfaceObj Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __DSurface_ParamsStructSize = sizeof(__DSurface_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__DSurface_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__DSurface_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __DSurface_ParamsStructArr_ { __lc_ModuleIdType arr[__DSurface_ParamsStructSize]; };
   const __lc_ModuleIdType G_id = 68;bool GetModuleG(float& param0);struct __G_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __G_ParamsStructSize = sizeof(__G_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__G_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__G_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __G_ParamsStructArr_ { __lc_ModuleIdType arr[__G_ParamsStructSize]; };
   const __lc_ModuleIdType g_id = 69;bool GetModuleg(float& param0);struct __g_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __g_ParamsStructSize = sizeof(__g_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__g_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__g_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __g_ParamsStructArr_ { __lc_ModuleIdType arr[__g_ParamsStructSize]; };
   const __lc_ModuleIdType MouseInsPos_id = 70;bool GetModuleMouseInsPos(MouseStatus& param0);struct __MouseInsPos_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  MouseStatus Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __MouseInsPos_ParamsStructSize = sizeof(__MouseInsPos_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__MouseInsPos_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__MouseInsPos_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __MouseInsPos_ParamsStructArr_ { __lc_ModuleIdType arr[__MouseInsPos_ParamsStructSize]; };
      const __lc_ModuleIdType Surface3_id = 71;bool GetModuleSurface3(int& param0, float& param1, float& param2, float& param3);struct __Surface3_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  int Param0;  float Param1;  float Param2;  float Param3;  __lc_ModuleIdType moduleId2; } data; }; const int __Surface3_ParamsStructSize = sizeof(__Surface3_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Surface3_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Surface3_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Surface3_ParamsStructArr_ { __lc_ModuleIdType arr[__Surface3_ParamsStructSize]; };
   const __lc_ModuleIdType ContourSides_id = 72;bool GetModuleContourSides(int& param0);struct __ContourSides_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  int Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __ContourSides_ParamsStructSize = sizeof(__ContourSides_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__ContourSides_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__ContourSides_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __ContourSides_ParamsStructArr_ { __lc_ModuleIdType arr[__ContourSides_ParamsStructSize]; };
   const __lc_ModuleIdType InitSurface_id = 73;bool GetModuleInitSurface(int& param0);struct __InitSurface_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  int Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __InitSurface_ParamsStructSize = sizeof(__InitSurface_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__InitSurface_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__InitSurface_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __InitSurface_ParamsStructArr_ { __lc_ModuleIdType arr[__InitSurface_ParamsStructSize]; };
     const __lc_ModuleIdType SurfacePoint_id = 74;bool GetModuleSurfacePoint(int& param0, int& param1, int& param2);struct __SurfacePoint_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  int Param0;  int Param1;  int Param2;  __lc_ModuleIdType moduleId2; } data; }; const int __SurfacePoint_ParamsStructSize = sizeof(__SurfacePoint_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__SurfacePoint_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__SurfacePoint_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __SurfacePoint_ParamsStructArr_ { __lc_ModuleIdType arr[__SurfacePoint_ParamsStructSize]; };
   const __lc_ModuleIdType DrawSurface_id = 75;bool GetModuleDrawSurface(int& param0);struct __DrawSurface_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  int Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __DrawSurface_ParamsStructSize = sizeof(__DrawSurface_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__DrawSurface_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__DrawSurface_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __DrawSurface_ParamsStructArr_ { __lc_ModuleIdType arr[__DrawSurface_ParamsStructSize]; };
   const __lc_ModuleIdType Propensity_id = 76;bool GetModulePropensity(float& param0);struct __Propensity_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __Propensity_ParamsStructSize = sizeof(__Propensity_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Propensity_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Propensity_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Propensity_ParamsStructArr_ { __lc_ModuleIdType arr[__Propensity_ParamsStructSize]; };
   const __lc_ModuleIdType CircleFront_id = 77;bool GetModuleCircleFront(float& param0);struct __CircleFront_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __CircleFront_ParamsStructSize = sizeof(__CircleFront_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__CircleFront_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__CircleFront_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __CircleFront_ParamsStructArr_ { __lc_ModuleIdType arr[__CircleFront_ParamsStructSize]; };
   const __lc_ModuleIdType CircleFront0_id = 78;bool GetModuleCircleFront0();struct __CircleFront0_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  __lc_ModuleIdType moduleId2; } data; }; const int __CircleFront0_ParamsStructSize = sizeof(__CircleFront0_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__CircleFront0_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__CircleFront0_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __CircleFront0_ParamsStructArr_ { __lc_ModuleIdType arr[__CircleFront0_ParamsStructSize]; };
   const __lc_ModuleIdType SetUPrecision_id = 79;bool GetModuleSetUPrecision(int& param0);struct __SetUPrecision_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  int Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __SetUPrecision_ParamsStructSize = sizeof(__SetUPrecision_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__SetUPrecision_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__SetUPrecision_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __SetUPrecision_ParamsStructArr_ { __lc_ModuleIdType arr[__SetUPrecision_ParamsStructSize]; };
   const __lc_ModuleIdType SetVPrecision_id = 80;bool GetModuleSetVPrecision(int& param0);struct __SetVPrecision_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  int Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __SetVPrecision_ParamsStructSize = sizeof(__SetVPrecision_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__SetVPrecision_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__SetVPrecision_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __SetVPrecision_ParamsStructArr_ { __lc_ModuleIdType arr[__SetVPrecision_ParamsStructSize]; };
     const __lc_ModuleIdType LineTo_id = 81;bool GetModuleLineTo(float& param0, float& param1, float& param2);struct __LineTo_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  float Param1;  float Param2;  __lc_ModuleIdType moduleId2; } data; }; const int __LineTo_ParamsStructSize = sizeof(__LineTo_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__LineTo_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__LineTo_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __LineTo_ParamsStructArr_ { __lc_ModuleIdType arr[__LineTo_ParamsStructSize]; };
    const __lc_ModuleIdType BSurface_id = 82;bool GetModuleBSurface(int& param0, float& param1);struct __BSurface_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  int Param0;  float Param1;  __lc_ModuleIdType moduleId2; } data; }; const int __BSurface_ParamsStructSize = sizeof(__BSurface_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__BSurface_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__BSurface_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __BSurface_ParamsStructArr_ { __lc_ModuleIdType arr[__BSurface_ParamsStructSize]; };
   const __lc_ModuleIdType MoveRel2f_id = 83;bool GetModuleMoveRel2f(V2tf& param0);struct __MoveRel2f_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V2tf Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __MoveRel2f_ParamsStructSize = sizeof(__MoveRel2f_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__MoveRel2f_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__MoveRel2f_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __MoveRel2f_ParamsStructArr_ { __lc_ModuleIdType arr[__MoveRel2f_ParamsStructSize]; };
   const __lc_ModuleIdType MoveRel2d_id = 84;bool GetModuleMoveRel2d(V2td& param0);struct __MoveRel2d_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V2td Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __MoveRel2d_ParamsStructSize = sizeof(__MoveRel2d_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__MoveRel2d_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__MoveRel2d_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __MoveRel2d_ParamsStructArr_ { __lc_ModuleIdType arr[__MoveRel2d_ParamsStructSize]; };
   const __lc_ModuleIdType MoveRel3f_id = 85;bool GetModuleMoveRel3f(V3tf& param0);struct __MoveRel3f_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V3tf Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __MoveRel3f_ParamsStructSize = sizeof(__MoveRel3f_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__MoveRel3f_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__MoveRel3f_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __MoveRel3f_ParamsStructArr_ { __lc_ModuleIdType arr[__MoveRel3f_ParamsStructSize]; };
   const __lc_ModuleIdType MoveRel3d_id = 86;bool GetModuleMoveRel3d(V3td& param0);struct __MoveRel3d_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V3td Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __MoveRel3d_ParamsStructSize = sizeof(__MoveRel3d_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__MoveRel3d_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__MoveRel3d_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __MoveRel3d_ParamsStructArr_ { __lc_ModuleIdType arr[__MoveRel3d_ParamsStructSize]; };
   const __lc_ModuleIdType DBSurfaceS_id = 87;bool GetModuleDBSurfaceS(BsurfaceObjS& param0);struct __DBSurfaceS_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  BsurfaceObjS Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __DBSurfaceS_ParamsStructSize = sizeof(__DBSurfaceS_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__DBSurfaceS_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__DBSurfaceS_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __DBSurfaceS_ParamsStructArr_ { __lc_ModuleIdType arr[__DBSurfaceS_ParamsStructSize]; };
   const __lc_ModuleIdType DBSurfaceM_id = 88;bool GetModuleDBSurfaceM(BsurfaceObjM& param0);struct __DBSurfaceM_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  BsurfaceObjM Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __DBSurfaceM_ParamsStructSize = sizeof(__DBSurfaceM_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__DBSurfaceM_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__DBSurfaceM_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __DBSurfaceM_ParamsStructArr_ { __lc_ModuleIdType arr[__DBSurfaceM_ParamsStructSize]; };
   const __lc_ModuleIdType Camera_id = 89;bool GetModuleCamera();struct __Camera_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  __lc_ModuleIdType moduleId2; } data; }; const int __Camera_ParamsStructSize = sizeof(__Camera_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Camera_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Camera_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Camera_ParamsStructArr_ { __lc_ModuleIdType arr[__Camera_ParamsStructSize]; };
   const __lc_ModuleIdType EA20_id = 90;bool GetModuleEA20(EA20Array& param0);struct __EA20_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  EA20Array Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __EA20_ParamsStructSize = sizeof(__EA20_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__EA20_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__EA20_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __EA20_ParamsStructArr_ { __lc_ModuleIdType arr[__EA20_ParamsStructSize]; };
   const __lc_ModuleIdType Rotate_id = 91;bool GetModuleRotate(V3tf& param0, float& param1);struct __Rotate_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V3tf Param0;  float Param1;  __lc_ModuleIdType moduleId2; } data; }; const int __Rotate_ParamsStructSize = sizeof(__Rotate_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Rotate_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Rotate_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Rotate_ParamsStructArr_ { __lc_ModuleIdType arr[__Rotate_ParamsStructSize]; };
   const __lc_ModuleIdType RotateHLU_id = 92;bool GetModuleRotateHLU(V3tf& param0, float& param1);struct __RotateHLU_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V3tf Param0;  float Param1;  __lc_ModuleIdType moduleId2; } data; }; const int __RotateHLU_ParamsStructSize = sizeof(__RotateHLU_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__RotateHLU_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__RotateHLU_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __RotateHLU_ParamsStructArr_ { __lc_ModuleIdType arr[__RotateHLU_ParamsStructSize]; };
   const __lc_ModuleIdType RotateXYZ_id = 93;bool GetModuleRotateXYZ(V3tf& param0, float& param1);struct __RotateXYZ_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V3tf Param0;  float Param1;  __lc_ModuleIdType moduleId2; } data; }; const int __RotateXYZ_ParamsStructSize = sizeof(__RotateXYZ_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__RotateXYZ_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__RotateXYZ_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __RotateXYZ_ParamsStructArr_ { __lc_ModuleIdType arr[__RotateXYZ_ParamsStructSize]; };
   const __lc_ModuleIdType Terrain_id = 94;bool GetModuleTerrain(CameraPosition& param0);struct __Terrain_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  CameraPosition Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __Terrain_ParamsStructSize = sizeof(__Terrain_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Terrain_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Terrain_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Terrain_ParamsStructArr_ { __lc_ModuleIdType arr[__Terrain_ParamsStructSize]; };
  const __lc_ModuleIdType PovRayStart_id = 95;bool GetModulePovRayStart(__lc_Text& param0, POVRayMeshMode& param1);struct __PovRayStart_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  __lc_Text Param0;  POVRayMeshMode Param1;  __lc_ModuleIdType moduleId2; } data; }; const int __PovRayStart_ParamsStructSize = sizeof(__PovRayStart_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__PovRayStart_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__PovRayStart_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __PovRayStart_ParamsStructArr_ { __lc_ModuleIdType arr[__PovRayStart_ParamsStructSize]; };
   const __lc_ModuleIdType SetHead3f_id = 96;bool GetModuleSetHead3f(V3tf& param0);struct __SetHead3f_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V3tf Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __SetHead3f_ParamsStructSize = sizeof(__SetHead3f_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__SetHead3f_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__SetHead3f_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __SetHead3f_ParamsStructArr_ { __lc_ModuleIdType arr[__SetHead3f_ParamsStructSize]; };
   const __lc_ModuleIdType SetTropismDirection3f_id = 97;bool GetModuleSetTropismDirection3f(V3tf& param0);struct __SetTropismDirection3f_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V3tf Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __SetTropismDirection3f_ParamsStructSize = sizeof(__SetTropismDirection3f_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__SetTropismDirection3f_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__SetTropismDirection3f_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __SetTropismDirection3f_ParamsStructArr_ { __lc_ModuleIdType arr[__SetTropismDirection3f_ParamsStructSize]; };
# 12 "/home/neil/vlab-4.4.0/include/lpfgall.h" 2
# 5 "lsystem.l" 2
# 1 "/usr/include/stdio.h" 1 3 4
# 30 "/usr/include/stdio.h" 3 4
extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 35 "/usr/include/stdio.h" 2 3 4
# 75 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 32 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 21 "/usr/include/_G_config.h" 2 3 4

typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 53 "/usr/include/_G_config.h" 3 4
typedef int _G_int16_t __attribute__ ((__mode__ (__HI__)));
typedef int _G_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int _G_uint16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));
# 33 "/usr/include/libio.h" 2 3 4
# 53 "/usr/include/libio.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stdarg.h" 1 3 4
# 54 "/usr/include/libio.h" 2 3 4
# 170 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 180 "/usr/include/libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 203 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 271 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 319 "/usr/include/libio.h" 3 4
  __off64_t _offset;
# 328 "/usr/include/libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};





struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 364 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, __const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);




extern "C" {


extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 460 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) throw ();
extern int _IO_ferror (_IO_FILE *__fp) throw ();

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) throw ();
extern void _IO_funlockfile (_IO_FILE *) throw ();
extern int _IO_ftrylockfile (_IO_FILE *) throw ();
# 490 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) throw ();
# 552 "/usr/include/libio.h" 3 4
}
# 76 "/usr/include/stdio.h" 2 3 4




typedef __gnuc_va_list va_list;
# 89 "/usr/include/stdio.h" 3 4


typedef _G_fpos_t fpos_t;





typedef _G_fpos64_t fpos64_t;
# 141 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 142 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (__const char *__filename) throw ();

extern int rename (__const char *__old, __const char *__new) throw ();




extern int renameat (int __oldfd, __const char *__old, int __newfd,
       __const char *__new) throw ();








extern FILE *tmpfile (void) ;
# 182 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;





extern char *tmpnam_r (char *__s) throw () ;
# 204 "/usr/include/stdio.h" 3 4
extern char *tempnam (__const char *__dir, __const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 229 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 239 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);









extern FILE *fopen (__const char *__restrict __filename,
      __const char *__restrict __modes) ;




extern FILE *freopen (__const char *__restrict __filename,
        __const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 272 "/usr/include/stdio.h" 3 4


extern FILE *fopen64 (__const char *__restrict __filename,
        __const char *__restrict __modes) ;
extern FILE *freopen64 (__const char *__restrict __filename,
   __const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, __const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     __const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, __const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();








extern int fprintf (FILE *__restrict __stream,
      __const char *__restrict __format, ...);




extern int printf (__const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      __const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (__const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg) throw ();





extern int snprintf (char *__restrict __s, size_t __maxlen,
       __const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        __const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, __const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         __const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       __const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
# 394 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, __const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, __const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     __const char *__restrict __format, ...) ;




extern int scanf (__const char *__restrict __format, ...) ;

extern int sscanf (__const char *__restrict __s,
     __const char *__restrict __format, ...) throw ();
# 445 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (__const char *__restrict __s,
      __const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 504 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 532 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 543 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 576 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;






extern char *gets (char *__s) ;

# 622 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 638 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (__const char *__restrict __s, FILE *__restrict __stream);





extern int puts (__const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (__const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 699 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (__const char *__restrict __s,
      FILE *__restrict __stream);
# 710 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (__const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 746 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 765 "/usr/include/stdio.h" 3 4






extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, __const fpos_t *__pos);
# 788 "/usr/include/stdio.h" 3 4



extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, __const fpos64_t *__pos);




extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;




extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;








extern void perror (__const char *__s);






# 1 "/usr/include/bits/sys_errlist.h" 1 3 4
# 27 "/usr/include/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern __const char *__const sys_errlist[];


extern int _sys_nerr;
extern __const char *__const _sys_errlist[];
# 827 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 846 "/usr/include/stdio.h" 3 4
extern FILE *popen (__const char *__command, __const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      __const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       __const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 916 "/usr/include/stdio.h" 3 4
}
# 6 "lsystem.l" 2



# 1 "/usr/include/c++/4.4/fstream" 1 3
# 38 "/usr/include/c++/4.4/fstream" 3
       
# 39 "/usr/include/c++/4.4/fstream" 3



# 1 "/usr/include/c++/4.4/bits/codecvt.h" 1 3
# 40 "/usr/include/c++/4.4/bits/codecvt.h" 3
       
# 41 "/usr/include/c++/4.4/bits/codecvt.h" 3

namespace std __attribute__ ((__visibility__ ("default"))) {


  class codecvt_base
  {
  public:
    enum result
    {
      ok,
      partial,
      error,
      noconv
    };
  };
# 66 "/usr/include/c++/4.4/bits/codecvt.h" 3
  template<typename _InternT, typename _ExternT, typename _StateT>
    class __codecvt_abstract_base
    : public locale::facet, public codecvt_base
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;
# 114 "/usr/include/c++/4.4/bits/codecvt.h" 3
      result
      out(state_type& __state, const intern_type* __from,
   const intern_type* __from_end, const intern_type*& __from_next,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const
      {
 return this->do_out(__state, __from, __from_end, __from_next,
       __to, __to_end, __to_next);
      }
# 153 "/usr/include/c++/4.4/bits/codecvt.h" 3
      result
      unshift(state_type& __state, extern_type* __to, extern_type* __to_end,
       extern_type*& __to_next) const
      { return this->do_unshift(__state, __to,__to_end,__to_next); }
# 194 "/usr/include/c++/4.4/bits/codecvt.h" 3
      result
      in(state_type& __state, const extern_type* __from,
  const extern_type* __from_end, const extern_type*& __from_next,
  intern_type* __to, intern_type* __to_end,
  intern_type*& __to_next) const
      {
 return this->do_in(__state, __from, __from_end, __from_next,
      __to, __to_end, __to_next);
      }

      int
      encoding() const throw()
      { return this->do_encoding(); }

      bool
      always_noconv() const throw()
      { return this->do_always_noconv(); }

      int
      length(state_type& __state, const extern_type* __from,
      const extern_type* __end, size_t __max) const
      { return this->do_length(__state, __from, __end, __max); }

      int
      max_length() const throw()
      { return this->do_max_length(); }

    protected:
      explicit
      __codecvt_abstract_base(size_t __refs = 0) : locale::facet(__refs) { }

      virtual
      ~__codecvt_abstract_base() { }
# 235 "/usr/include/c++/4.4/bits/codecvt.h" 3
      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const = 0;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const = 0;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const = 0;

      virtual int
      do_encoding() const throw() = 0;

      virtual bool
      do_always_noconv() const throw() = 0;

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const = 0;

      virtual int
      do_max_length() const throw() = 0;
    };



  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt
    : public __codecvt_abstract_base<_InternT, _ExternT, _StateT>
    {
    public:

      typedef codecvt_base::result result;
      typedef _InternT intern_type;
      typedef _ExternT extern_type;
      typedef _StateT state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0)
      : __codecvt_abstract_base<_InternT, _ExternT, _StateT> (__refs) { }

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt() { }

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };

  template<typename _InternT, typename _ExternT, typename _StateT>
    locale::id codecvt<_InternT, _ExternT, _StateT>::id;


  template<>
    class codecvt<char, char, mbstate_t>
    : public __codecvt_abstract_base<char, char, mbstate_t>
    {
    public:

      typedef char intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state, extern_type* __to,
   extern_type* __to_end, extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state, const extern_type* __from,
     const extern_type* __from_end, const extern_type*& __from_next,
     intern_type* __to, intern_type* __to_end,
     intern_type*& __to_next) const;

      virtual int
      do_encoding() const throw();

      virtual bool
      do_always_noconv() const throw();

      virtual int
      do_length(state_type&, const extern_type* __from,
  const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
  };



  template<>
    class codecvt<wchar_t, char, mbstate_t>
    : public __codecvt_abstract_base<wchar_t, char, mbstate_t>
    {
    public:

      typedef wchar_t intern_type;
      typedef char extern_type;
      typedef mbstate_t state_type;

    protected:
      __c_locale _M_c_locale_codecvt;

    public:
      static locale::id id;

      explicit
      codecvt(size_t __refs = 0);

      explicit
      codecvt(__c_locale __cloc, size_t __refs = 0);

    protected:
      virtual
      ~codecvt();

      virtual result
      do_out(state_type& __state, const intern_type* __from,
      const intern_type* __from_end, const intern_type*& __from_next,
      extern_type* __to, extern_type* __to_end,
      extern_type*& __to_next) const;

      virtual result
      do_unshift(state_type& __state,
   extern_type* __to, extern_type* __to_end,
   extern_type*& __to_next) const;

      virtual result
      do_in(state_type& __state,
      const extern_type* __from, const extern_type* __from_end,
      const extern_type*& __from_next,
      intern_type* __to, intern_type* __to_end,
      intern_type*& __to_next) const;

      virtual
      int do_encoding() const throw();

      virtual
      bool do_always_noconv() const throw();

      virtual
      int do_length(state_type&, const extern_type* __from,
      const extern_type* __end, size_t __max) const;

      virtual int
      do_max_length() const throw();
    };



  template<typename _InternT, typename _ExternT, typename _StateT>
    class codecvt_byname : public codecvt<_InternT, _ExternT, _StateT>
    {
    public:
      explicit
      codecvt_byname(const char* __s, size_t __refs = 0)
      : codecvt<_InternT, _ExternT, _StateT>(__refs)
      {
 if (__builtin_strcmp(__s, "C") != 0
     && __builtin_strcmp(__s, "POSIX") != 0)
   {
     this->_S_destroy_c_locale(this->_M_c_locale_codecvt);
     this->_S_create_c_locale(this->_M_c_locale_codecvt, __s);
   }
      }

    protected:
      virtual
      ~codecvt_byname() { }
    };





  extern template class codecvt_byname<char, char, mbstate_t>;

  extern template
    const codecvt<char, char, mbstate_t>&
    use_facet<codecvt<char, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<char, char, mbstate_t> >(const locale&);


  extern template class codecvt_byname<wchar_t, char, mbstate_t>;

  extern template
    const codecvt<wchar_t, char, mbstate_t>&
    use_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);

  extern template
    bool
    has_facet<codecvt<wchar_t, char, mbstate_t> >(const locale&);



}
# 43 "/usr/include/c++/4.4/fstream" 2 3
# 1 "/usr/include/c++/4.4/cstdio" 1 3
# 41 "/usr/include/c++/4.4/cstdio" 3
       
# 42 "/usr/include/c++/4.4/cstdio" 3


# 1 "/usr/include/c++/4.4/cstddef" 1 3
# 41 "/usr/include/c++/4.4/cstddef" 3
       
# 42 "/usr/include/c++/4.4/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 45 "/usr/include/c++/4.4/cstddef" 2 3
# 45 "/usr/include/c++/4.4/cstdio" 2 3
# 93 "/usr/include/c++/4.4/cstdio" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  using ::FILE;
  using ::fpos_t;

  using ::clearerr;
  using ::fclose;
  using ::feof;
  using ::ferror;
  using ::fflush;
  using ::fgetc;
  using ::fgetpos;
  using ::fgets;
  using ::fopen;
  using ::fprintf;
  using ::fputc;
  using ::fputs;
  using ::fread;
  using ::freopen;
  using ::fscanf;
  using ::fseek;
  using ::fsetpos;
  using ::ftell;
  using ::fwrite;
  using ::getc;
  using ::getchar;
  using ::gets;
  using ::perror;
  using ::printf;
  using ::putc;
  using ::putchar;
  using ::puts;
  using ::remove;
  using ::rename;
  using ::rewind;
  using ::scanf;
  using ::setbuf;
  using ::setvbuf;
  using ::sprintf;
  using ::sscanf;
  using ::tmpfile;
  using ::tmpnam;
  using ::ungetc;
  using ::vfprintf;
  using ::vprintf;
  using ::vsprintf;

}
# 150 "/usr/include/c++/4.4/cstdio" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {
# 165 "/usr/include/c++/4.4/cstdio" 3
  using ::snprintf;
  using ::vfscanf;
  using ::vscanf;
  using ::vsnprintf;
  using ::vsscanf;


}

namespace std __attribute__ ((__visibility__ ("default"))) {

  using ::__gnu_cxx::snprintf;
  using ::__gnu_cxx::vfscanf;
  using ::__gnu_cxx::vscanf;
  using ::__gnu_cxx::vsnprintf;
  using ::__gnu_cxx::vsscanf;

}
# 44 "/usr/include/c++/4.4/fstream" 2 3
# 1 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/basic_file.h" 1 3
# 38 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/basic_file.h" 3
       
# 39 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/basic_file.h" 3


# 1 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++io.h" 1 3
# 36 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++io.h" 3
# 1 "/usr/include/c++/4.4/cstdio" 1 3
# 41 "/usr/include/c++/4.4/cstdio" 3
       
# 42 "/usr/include/c++/4.4/cstdio" 3


# 1 "/usr/include/c++/4.4/cstddef" 1 3
# 41 "/usr/include/c++/4.4/cstddef" 3
       
# 42 "/usr/include/c++/4.4/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 45 "/usr/include/c++/4.4/cstddef" 2 3
# 45 "/usr/include/c++/4.4/cstdio" 2 3
# 37 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++io.h" 2 3
# 1 "/usr/include/c++/4.4/cstddef" 1 3
# 41 "/usr/include/c++/4.4/cstddef" 3
       
# 42 "/usr/include/c++/4.4/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 45 "/usr/include/c++/4.4/cstddef" 2 3
# 38 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/c++io.h" 2 3


namespace std __attribute__ ((__visibility__ ("default"))) {

  typedef __gthread_mutex_t __c_lock;


  typedef FILE __c_file;

}
# 42 "/usr/include/c++/4.4/x86_64-linux-gnu/bits/basic_file.h" 2 3


namespace std __attribute__ ((__visibility__ ("default"))) {


  template<typename _CharT>
    class __basic_file;


  template<>
    class __basic_file<char>
    {

      __c_file* _M_cfile;


      bool _M_cfile_created;

    public:
      __basic_file(__c_lock* __lock = 0);

      __basic_file*
      open(const char* __name, ios_base::openmode __mode, int __prot = 0664);

      __basic_file*
      sys_open(__c_file* __file, ios_base::openmode);

      __basic_file*
      sys_open(int __fd, ios_base::openmode __mode);

      __basic_file*
      close();

      bool
      is_open() const;

      int
      fd();

      __c_file*
      file();

      ~__basic_file();

      streamsize
      xsputn(const char* __s, streamsize __n);

      streamsize
      xsputn_2(const char* __s1, streamsize __n1,
        const char* __s2, streamsize __n2);

      streamsize
      xsgetn(char* __s, streamsize __n);

      streamoff
      seekoff(streamoff __off, ios_base::seekdir __way);

      int
      sync();

      streamsize
      showmanyc();
    };

}
# 45 "/usr/include/c++/4.4/fstream" 2 3




namespace std __attribute__ ((__visibility__ ("default"))) {
# 66 "/usr/include/c++/4.4/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_filebuf : public basic_streambuf<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;

      typedef basic_streambuf<char_type, traits_type> __streambuf_type;
      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef __basic_file<char> __file_type;
      typedef typename traits_type::state_type __state_type;
      typedef codecvt<char_type, char, __state_type> __codecvt_type;

      friend class ios_base;

    protected:


      __c_lock _M_lock;


      __file_type _M_file;


      ios_base::openmode _M_mode;


      __state_type _M_state_beg;




      __state_type _M_state_cur;



      __state_type _M_state_last;


      char_type* _M_buf;






      size_t _M_buf_size;


      bool _M_buf_allocated;
# 128 "/usr/include/c++/4.4/fstream" 3
      bool _M_reading;
      bool _M_writing;







      char_type _M_pback;
      char_type* _M_pback_cur_save;
      char_type* _M_pback_end_save;
      bool _M_pback_init;



      const __codecvt_type* _M_codecvt;






      char* _M_ext_buf;




      streamsize _M_ext_buf_size;






      const char* _M_ext_next;
      char* _M_ext_end;






      void
      _M_create_pback()
      {
 if (!_M_pback_init)
   {
     _M_pback_cur_save = this->gptr();
     _M_pback_end_save = this->egptr();
     this->setg(&_M_pback, &_M_pback, &_M_pback + 1);
     _M_pback_init = true;
   }
      }






      void
      _M_destroy_pback() throw()
      {
 if (_M_pback_init)
   {

     _M_pback_cur_save += this->gptr() != this->eback();
     this->setg(_M_buf, _M_pback_cur_save, _M_pback_end_save);
     _M_pback_init = false;
   }
      }

    public:







      basic_filebuf();




      virtual
      ~basic_filebuf()
      { this->close(); }





      bool
      is_open() const throw()
      { return _M_file.is_open(); }
# 264 "/usr/include/c++/4.4/fstream" 3
      __filebuf_type*
      open(const char* __s, ios_base::openmode __mode);
# 290 "/usr/include/c++/4.4/fstream" 3
      __filebuf_type*
      close();

    protected:
      void
      _M_allocate_internal_buffer();

      void
      _M_destroy_internal_buffer() throw();


      virtual streamsize
      showmanyc();






      virtual int_type
      underflow();

      virtual int_type
      pbackfail(int_type __c = _Traits::eof());
# 322 "/usr/include/c++/4.4/fstream" 3
      virtual int_type
      overflow(int_type __c = _Traits::eof());



      bool
      _M_convert_to_external(char_type*, streamsize);
# 342 "/usr/include/c++/4.4/fstream" 3
      virtual __streambuf_type*
      setbuf(char_type* __s, streamsize __n);

      virtual pos_type
      seekoff(off_type __off, ios_base::seekdir __way,
       ios_base::openmode __mode = ios_base::in | ios_base::out);

      virtual pos_type
      seekpos(pos_type __pos,
       ios_base::openmode __mode = ios_base::in | ios_base::out);


      pos_type
      _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state);

      virtual int
      sync();

      virtual void
      imbue(const locale& __loc);

      virtual streamsize
      xsgetn(char_type* __s, streamsize __n);

      virtual streamsize
      xsputn(const char_type* __s, streamsize __n);


      bool
      _M_terminate_output();
# 385 "/usr/include/c++/4.4/fstream" 3
      void
      _M_set_buffer(streamsize __off)
      {
  const bool __testin = _M_mode & ios_base::in;
  const bool __testout = _M_mode & ios_base::out;

 if (__testin && __off > 0)
   this->setg(_M_buf, _M_buf, _M_buf + __off);
 else
   this->setg(_M_buf, _M_buf, _M_buf);

 if (__testout && __off == 0 && _M_buf_size > 1 )
   this->setp(_M_buf, _M_buf + _M_buf_size - 1);
 else
   this->setp(__null, __null);
      }
    };
# 413 "/usr/include/c++/4.4/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_ifstream : public basic_istream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_istream<char_type, traits_type> __istream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 440 "/usr/include/c++/4.4/fstream" 3
      basic_ifstream() : __istream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 453 "/usr/include/c++/4.4/fstream" 3
      explicit
      basic_ifstream(const char* __s, ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 485 "/usr/include/c++/4.4/fstream" 3
      ~basic_ifstream()
      { }
# 495 "/usr/include/c++/4.4/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 524 "/usr/include/c++/4.4/fstream" 3
      void
      open(const char* __s, ios_base::openmode __mode = ios_base::in)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::in))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 562 "/usr/include/c++/4.4/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };
# 581 "/usr/include/c++/4.4/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_ofstream : public basic_ostream<_CharT,_Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ostream<char_type, traits_type> __ostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 608 "/usr/include/c++/4.4/fstream" 3
      basic_ofstream(): __ostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 622 "/usr/include/c++/4.4/fstream" 3
      explicit
      basic_ofstream(const char* __s,
       ios_base::openmode __mode = ios_base::out|ios_base::trunc)
      : __ostream_type(), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 656 "/usr/include/c++/4.4/fstream" 3
      ~basic_ofstream()
      { }
# 666 "/usr/include/c++/4.4/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 695 "/usr/include/c++/4.4/fstream" 3
      void
      open(const char* __s,
    ios_base::openmode __mode = ios_base::out | ios_base::trunc)
      {
 if (!_M_filebuf.open(__s, __mode | ios_base::out))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 735 "/usr/include/c++/4.4/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };
# 754 "/usr/include/c++/4.4/fstream" 3
  template<typename _CharT, typename _Traits>
    class basic_fstream : public basic_iostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_filebuf<char_type, traits_type> __filebuf_type;
      typedef basic_ios<char_type, traits_type> __ios_type;
      typedef basic_iostream<char_type, traits_type> __iostream_type;

    private:
      __filebuf_type _M_filebuf;

    public:
# 782 "/usr/include/c++/4.4/fstream" 3
      basic_fstream()
      : __iostream_type(), _M_filebuf()
      { this->init(&_M_filebuf); }
# 794 "/usr/include/c++/4.4/fstream" 3
      explicit
      basic_fstream(const char* __s,
      ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __iostream_type(__null), _M_filebuf()
      {
 this->init(&_M_filebuf);
 this->open(__s, __mode);
      }
# 825 "/usr/include/c++/4.4/fstream" 3
      ~basic_fstream()
      { }
# 835 "/usr/include/c++/4.4/fstream" 3
      __filebuf_type*
      rdbuf() const
      { return const_cast<__filebuf_type*>(&_M_filebuf); }





      bool
      is_open()
      { return _M_filebuf.is_open(); }



      bool
      is_open() const
      { return _M_filebuf.is_open(); }
# 864 "/usr/include/c++/4.4/fstream" 3
      void
      open(const char* __s,
    ios_base::openmode __mode = ios_base::in | ios_base::out)
      {
 if (!_M_filebuf.open(__s, __mode))
   this->setstate(ios_base::failbit);
 else


   this->clear();
      }
# 904 "/usr/include/c++/4.4/fstream" 3
      void
      close()
      {
 if (!_M_filebuf.close())
   this->setstate(ios_base::failbit);
      }
    };

}


# 1 "/usr/include/c++/4.4/bits/fstream.tcc" 1 3
# 39 "/usr/include/c++/4.4/bits/fstream.tcc" 3
       
# 40 "/usr/include/c++/4.4/bits/fstream.tcc" 3



namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_allocate_internal_buffer()
    {


      if (!_M_buf_allocated && !_M_buf)
 {
   _M_buf = new char_type[_M_buf_size];
   _M_buf_allocated = true;
 }
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    _M_destroy_internal_buffer() throw()
    {
      if (_M_buf_allocated)
 {
   delete [] _M_buf;
   _M_buf = __null;
   _M_buf_allocated = false;
 }
      delete [] _M_ext_buf;
      _M_ext_buf = __null;
      _M_ext_buf_size = 0;
      _M_ext_next = __null;
      _M_ext_end = __null;
    }

  template<typename _CharT, typename _Traits>
    basic_filebuf<_CharT, _Traits>::
    basic_filebuf() : __streambuf_type(), _M_lock(), _M_file(&_M_lock),
    _M_mode(ios_base::openmode(0)), _M_state_beg(), _M_state_cur(),
    _M_state_last(), _M_buf(__null), _M_buf_size(8192),
    _M_buf_allocated(false), _M_reading(false), _M_writing(false), _M_pback(),
    _M_pback_cur_save(0), _M_pback_end_save(0), _M_pback_init(false),
    _M_codecvt(0), _M_ext_buf(0), _M_ext_buf_size(0), _M_ext_next(0),
    _M_ext_end(0)
    {
      if (has_facet<__codecvt_type>(this->_M_buf_locale))
 _M_codecvt = &use_facet<__codecvt_type>(this->_M_buf_locale);
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    open(const char* __s, ios_base::openmode __mode)
    {
      __filebuf_type *__ret = __null;
      if (!this->is_open())
 {
   _M_file.open(__s, __mode);
   if (this->is_open())
     {
       _M_allocate_internal_buffer();
       _M_mode = __mode;


       _M_reading = false;
       _M_writing = false;
       _M_set_buffer(-1);


       _M_state_last = _M_state_cur = _M_state_beg;


       if ((__mode & ios_base::ate)
    && this->seekoff(0, ios_base::end, __mode)
    == pos_type(off_type(-1)))
  this->close();
       else
  __ret = this;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__filebuf_type*
    basic_filebuf<_CharT, _Traits>::
    close()
    {
      if (!this->is_open())
 return __null;

      bool __testfail = false;
      {

 struct __close_sentry
 {
   basic_filebuf *__fb;
   __close_sentry (basic_filebuf *__fbi): __fb(__fbi) { }
   ~__close_sentry ()
   {
     __fb->_M_mode = ios_base::openmode(0);
     __fb->_M_pback_init = false;
     __fb->_M_destroy_internal_buffer();
     __fb->_M_reading = false;
     __fb->_M_writing = false;
     __fb->_M_set_buffer(-1);
     __fb->_M_state_last = __fb->_M_state_cur = __fb->_M_state_beg;
   }
 } __cs (this);

 try
   {
     if (!_M_terminate_output())
       __testfail = true;
   }
 catch(__cxxabiv1::__forced_unwind&)
   {
     _M_file.close();
     throw;
   }
 catch(...)
   { __testfail = true; }
      }

      if (!_M_file.close())
 __testfail = true;

      if (__testfail)
 return __null;
      else
 return this;
    }

  template<typename _CharT, typename _Traits>
    streamsize
    basic_filebuf<_CharT, _Traits>::
    showmanyc()
    {
      streamsize __ret = -1;
      const bool __testin = _M_mode & ios_base::in;
      if (__testin && this->is_open())
 {


   __ret = this->egptr() - this->gptr();







   if (__check_facet(_M_codecvt).encoding() >= 0)

     __ret += _M_file.showmanyc() / _M_codecvt->max_length();
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    underflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin && !_M_writing)
 {



   _M_destroy_pback();

   if (this->gptr() < this->egptr())
     return traits_type::to_int_type(*this->gptr());


   const size_t __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;


   bool __got_eof = false;

   streamsize __ilen = 0;
   codecvt_base::result __r = codecvt_base::ok;
   if (__check_facet(_M_codecvt).always_noconv())
     {
       __ilen = _M_file.xsgetn(reinterpret_cast<char*>(this->eback()),
          __buflen);
       if (__ilen == 0)
  __got_eof = true;
     }
   else
     {


       const int __enc = _M_codecvt->encoding();
       streamsize __blen;
       streamsize __rlen;
       if (__enc > 0)
  __blen = __rlen = __buflen * __enc;
       else
  {
    __blen = __buflen + _M_codecvt->max_length() - 1;
    __rlen = __buflen;
  }
       const streamsize __remainder = _M_ext_end - _M_ext_next;
       __rlen = __rlen > __remainder ? __rlen - __remainder : 0;



       if (_M_reading && this->egptr() == this->eback() && __remainder)
  __rlen = 0;



       if (_M_ext_buf_size < __blen)
  {
    char* __buf = new char[__blen];
    if (__remainder)
      __builtin_memcpy(__buf, _M_ext_next, __remainder);

    delete [] _M_ext_buf;
    _M_ext_buf = __buf;
    _M_ext_buf_size = __blen;
  }
       else if (__remainder)
  __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

       _M_ext_next = _M_ext_buf;
       _M_ext_end = _M_ext_buf + __remainder;
       _M_state_last = _M_state_cur;

       do
  {
    if (__rlen > 0)
      {



        if (_M_ext_end - _M_ext_buf + __rlen > _M_ext_buf_size)
   {
     __throw_ios_failure(("basic_filebuf::underflow " "codecvt::max_length() " "is not valid"));


   }
        streamsize __elen = _M_file.xsgetn(_M_ext_end, __rlen);
        if (__elen == 0)
   __got_eof = true;
        else if (__elen == -1)
   break;
        _M_ext_end += __elen;
      }

    char_type* __iend = this->eback();
    if (_M_ext_next < _M_ext_end)
      __r = _M_codecvt->in(_M_state_cur, _M_ext_next,
      _M_ext_end, _M_ext_next,
      this->eback(),
      this->eback() + __buflen, __iend);
    if (__r == codecvt_base::noconv)
      {
        size_t __avail = _M_ext_end - _M_ext_buf;
        __ilen = std::min(__avail, __buflen);
        traits_type::copy(this->eback(),
     reinterpret_cast<char_type*>
     (_M_ext_buf), __ilen);
        _M_ext_next = _M_ext_buf + __ilen;
      }
    else
      __ilen = __iend - this->eback();




    if (__r == codecvt_base::error)
      break;

    __rlen = 1;
  }
       while (__ilen == 0 && !__got_eof);
     }

   if (__ilen > 0)
     {
       _M_set_buffer(__ilen);
       _M_reading = true;
       __ret = traits_type::to_int_type(*this->gptr());
     }
   else if (__got_eof)
     {



       _M_set_buffer(-1);
       _M_reading = false;


       if (__r == codecvt_base::partial)
  __throw_ios_failure(("basic_filebuf::underflow " "incomplete character in file"));

     }
   else if (__r == codecvt_base::error)
     __throw_ios_failure(("basic_filebuf::underflow " "invalid byte sequence in file"));

   else
     __throw_ios_failure(("basic_filebuf::underflow " "error reading the file"));

 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    pbackfail(int_type __i)
    {
      int_type __ret = traits_type::eof();
      const bool __testin = _M_mode & ios_base::in;
      if (__testin && !_M_writing)
 {


   const bool __testpb = _M_pback_init;
   const bool __testeof = traits_type::eq_int_type(__i, __ret);
   int_type __tmp;
   if (this->eback() < this->gptr())
     {
       this->gbump(-1);
       __tmp = traits_type::to_int_type(*this->gptr());
     }
   else if (this->seekoff(-1, ios_base::cur) != pos_type(off_type(-1)))
     {
       __tmp = this->underflow();
       if (traits_type::eq_int_type(__tmp, __ret))
  return __ret;
     }
   else
     {





       return __ret;
     }



   if (!__testeof && traits_type::eq_int_type(__i, __tmp))
     __ret = __i;
   else if (__testeof)
     __ret = traits_type::not_eof(__i);
   else if (!__testpb)
     {
       _M_create_pback();
       _M_reading = true;
       *this->gptr() = traits_type::to_char_type(__i);
       __ret = __i;
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::int_type
    basic_filebuf<_CharT, _Traits>::
    overflow(int_type __c)
    {
      int_type __ret = traits_type::eof();
      const bool __testeof = traits_type::eq_int_type(__c, __ret);
      const bool __testout = _M_mode & ios_base::out;
      if (__testout && !_M_reading)
 {
   if (this->pbase() < this->pptr())
     {

       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }



       if (_M_convert_to_external(this->pbase(),
      this->pptr() - this->pbase()))
  {
    _M_set_buffer(0);
    __ret = traits_type::not_eof(__c);
  }
     }
   else if (_M_buf_size > 1)
     {



       _M_set_buffer(0);
       _M_writing = true;
       if (!__testeof)
  {
    *this->pptr() = traits_type::to_char_type(__c);
    this->pbump(1);
  }
       __ret = traits_type::not_eof(__c);
     }
   else
     {

       char_type __conv = traits_type::to_char_type(__c);
       if (__testeof || _M_convert_to_external(&__conv, 1))
  {
    _M_writing = true;
    __ret = traits_type::not_eof(__c);
  }
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_convert_to_external(_CharT* __ibuf, streamsize __ilen)
    {

      streamsize __elen;
      streamsize __plen;
      if (__check_facet(_M_codecvt).always_noconv())
 {
   __elen = _M_file.xsputn(reinterpret_cast<char*>(__ibuf), __ilen);
   __plen = __ilen;
 }
      else
 {


   streamsize __blen = __ilen * _M_codecvt->max_length();
   char* __buf = static_cast<char*>(__builtin_alloca(__blen));

   char* __bend;
   const char_type* __iend;
   codecvt_base::result __r;
   __r = _M_codecvt->out(_M_state_cur, __ibuf, __ibuf + __ilen,
    __iend, __buf, __buf + __blen, __bend);

   if (__r == codecvt_base::ok || __r == codecvt_base::partial)
     __blen = __bend - __buf;
   else if (__r == codecvt_base::noconv)
     {

       __buf = reinterpret_cast<char*>(__ibuf);
       __blen = __ilen;
     }
   else
     __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error"));


   __elen = _M_file.xsputn(__buf, __blen);
   __plen = __blen;


   if (__r == codecvt_base::partial && __elen == __plen)
     {
       const char_type* __iresume = __iend;
       streamsize __rlen = this->pptr() - __iend;
       __r = _M_codecvt->out(_M_state_cur, __iresume,
        __iresume + __rlen, __iend, __buf,
        __buf + __blen, __bend);
       if (__r != codecvt_base::error)
  {
    __rlen = __bend - __buf;
    __elen = _M_file.xsputn(__buf, __rlen);
    __plen = __rlen;
  }
       else
  __throw_ios_failure(("basic_filebuf::_M_convert_to_external " "conversion error"));

     }
 }
      return __elen == __plen;
    }

   template<typename _CharT, typename _Traits>
     streamsize
     basic_filebuf<_CharT, _Traits>::
     xsgetn(_CharT* __s, streamsize __n)
     {

       streamsize __ret = 0;
       if (_M_pback_init)
  {
    if (__n > 0 && this->gptr() == this->eback())
      {
        *__s++ = *this->gptr();
        this->gbump(1);
        __ret = 1;
        --__n;
      }
    _M_destroy_pback();
  }




       const bool __testin = _M_mode & ios_base::in;
       const streamsize __buflen = _M_buf_size > 1 ? _M_buf_size - 1 : 1;

       if (__n > __buflen && __check_facet(_M_codecvt).always_noconv()
    && __testin && !_M_writing)
  {

    const streamsize __avail = this->egptr() - this->gptr();
    if (__avail != 0)
      {
        if (__avail == 1)
   *__s = *this->gptr();
        else
   traits_type::copy(__s, this->gptr(), __avail);
        __s += __avail;
        this->gbump(__avail);
        __ret += __avail;
        __n -= __avail;
      }



    streamsize __len;
    for (;;)
      {
        __len = _M_file.xsgetn(reinterpret_cast<char*>(__s),
          __n);
        if (__len == -1)
   __throw_ios_failure(("basic_filebuf::xsgetn " "error reading the file"));

        if (__len == 0)
   break;

        __n -= __len;
        __ret += __len;
        if (__n == 0)
   break;

        __s += __len;
      }

    if (__n == 0)
      {
        _M_set_buffer(0);
        _M_reading = true;
      }
    else if (__len == 0)
      {



        _M_set_buffer(-1);
        _M_reading = false;
      }
  }
       else
  __ret += __streambuf_type::xsgetn(__s, __n);

       return __ret;
     }

   template<typename _CharT, typename _Traits>
     streamsize
     basic_filebuf<_CharT, _Traits>::
     xsputn(const _CharT* __s, streamsize __n)
     {



       streamsize __ret = 0;
       const bool __testout = _M_mode & ios_base::out;
       if (__check_facet(_M_codecvt).always_noconv()
    && __testout && !_M_reading)
 {

   const streamsize __chunk = 1ul << 10;
   streamsize __bufavail = this->epptr() - this->pptr();


   if (!_M_writing && _M_buf_size > 1)
     __bufavail = _M_buf_size - 1;

   const streamsize __limit = std::min(__chunk, __bufavail);
   if (__n >= __limit)
     {
       const streamsize __buffill = this->pptr() - this->pbase();
       const char* __buf = reinterpret_cast<const char*>(this->pbase());
       __ret = _M_file.xsputn_2(__buf, __buffill,
           reinterpret_cast<const char*>(__s),
           __n);
       if (__ret == __buffill + __n)
  {
    _M_set_buffer(0);
    _M_writing = true;
  }
       if (__ret > __buffill)
  __ret -= __buffill;
       else
  __ret = 0;
     }
   else
     __ret = __streambuf_type::xsputn(__s, __n);
 }
       else
  __ret = __streambuf_type::xsputn(__s, __n);
       return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::__streambuf_type*
    basic_filebuf<_CharT, _Traits>::
    setbuf(char_type* __s, streamsize __n)
    {
      if (!this->is_open())
 {
   if (__s == 0 && __n == 0)
     _M_buf_size = 1;
   else if (__s && __n > 0)
     {
# 673 "/usr/include/c++/4.4/bits/fstream.tcc" 3
       _M_buf = __s;
       _M_buf_size = __n;
     }
 }
      return this;
    }




  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode)
    {
      int __width = 0;
      if (_M_codecvt)
 __width = _M_codecvt->encoding();
      if (__width < 0)
 __width = 0;

      pos_type __ret = pos_type(off_type(-1));
      const bool __testfail = __off != 0 && __width <= 0;
      if (this->is_open() && !__testfail)
 {

   _M_destroy_pback();






   __state_type __state = _M_state_beg;
   off_type __computed_off = __off * __width;
   if (_M_reading && __way == ios_base::cur)
     {
       if (_M_codecvt->always_noconv())
  __computed_off += this->gptr() - this->egptr();
       else
  {



    const int __gptr_off =
      _M_codecvt->length(_M_state_last, _M_ext_buf, _M_ext_next,
           this->gptr() - this->eback());
    __computed_off += _M_ext_buf + __gptr_off - _M_ext_end;



    __state = _M_state_last;
  }
     }
   __ret = _M_seek(__computed_off, __way, __state);
 }
      return __ret;
    }





  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    seekpos(pos_type __pos, ios_base::openmode)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (this->is_open())
 {

   _M_destroy_pback();
   __ret = _M_seek(off_type(__pos), ios_base::beg, __pos.state());
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    typename basic_filebuf<_CharT, _Traits>::pos_type
    basic_filebuf<_CharT, _Traits>::
    _M_seek(off_type __off, ios_base::seekdir __way, __state_type __state)
    {
      pos_type __ret = pos_type(off_type(-1));
      if (_M_terminate_output())
 {

   __ret = pos_type(_M_file.seekoff(__off, __way));
   if (__ret != pos_type(off_type(-1)))
     {
       _M_reading = false;
       _M_writing = false;
       _M_ext_next = _M_ext_end = _M_ext_buf;
       _M_set_buffer(-1);
       _M_state_cur = __state;
       __ret.state(_M_state_cur);
     }
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    bool
    basic_filebuf<_CharT, _Traits>::
    _M_terminate_output()
    {

      bool __testvalid = true;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __testvalid = false;
 }


      if (_M_writing && !__check_facet(_M_codecvt).always_noconv()
   && __testvalid)
 {



   const size_t __blen = 128;
   char __buf[__blen];
   codecvt_base::result __r;
   streamsize __ilen = 0;

   do
     {
       char* __next;
       __r = _M_codecvt->unshift(_M_state_cur, __buf,
     __buf + __blen, __next);
       if (__r == codecvt_base::error)
  __testvalid = false;
       else if (__r == codecvt_base::ok ||
         __r == codecvt_base::partial)
  {
    __ilen = __next - __buf;
    if (__ilen > 0)
      {
        const streamsize __elen = _M_file.xsputn(__buf, __ilen);
        if (__elen != __ilen)
   __testvalid = false;
      }
  }
     }
   while (__r == codecvt_base::partial && __ilen > 0 && __testvalid);

   if (__testvalid)
     {




       const int_type __tmp = this->overflow();
       if (traits_type::eq_int_type(__tmp, traits_type::eof()))
  __testvalid = false;
     }
 }
      return __testvalid;
    }

  template<typename _CharT, typename _Traits>
    int
    basic_filebuf<_CharT, _Traits>::
    sync()
    {


      int __ret = 0;
      if (this->pbase() < this->pptr())
 {
   const int_type __tmp = this->overflow();
   if (traits_type::eq_int_type(__tmp, traits_type::eof()))
     __ret = -1;
 }
      return __ret;
    }

  template<typename _CharT, typename _Traits>
    void
    basic_filebuf<_CharT, _Traits>::
    imbue(const locale& __loc)
    {
      bool __testvalid = true;

      const __codecvt_type* _M_codecvt_tmp = 0;
      if (__builtin_expect(has_facet<__codecvt_type>(__loc), true))
 _M_codecvt_tmp = &use_facet<__codecvt_type>(__loc);

      if (this->is_open())
 {

   if ((_M_reading || _M_writing)
       && __check_facet(_M_codecvt).encoding() == -1)
     __testvalid = false;
   else
     {
       if (_M_reading)
  {
    if (__check_facet(_M_codecvt).always_noconv())
      {
        if (_M_codecvt_tmp
     && !__check_facet(_M_codecvt_tmp).always_noconv())
   __testvalid = this->seekoff(0, ios_base::cur, _M_mode)
                 != pos_type(off_type(-1));
      }
    else
      {

        _M_ext_next = _M_ext_buf
   + _M_codecvt->length(_M_state_last, _M_ext_buf, _M_ext_next,
          this->gptr() - this->eback());
        const streamsize __remainder = _M_ext_end - _M_ext_next;
        if (__remainder)
   __builtin_memmove(_M_ext_buf, _M_ext_next, __remainder);

        _M_ext_next = _M_ext_buf;
        _M_ext_end = _M_ext_buf + __remainder;
        _M_set_buffer(-1);
        _M_state_last = _M_state_cur = _M_state_beg;
      }
  }
       else if (_M_writing && (__testvalid = _M_terminate_output()))
  _M_set_buffer(-1);
     }
 }

      if (__testvalid)
 _M_codecvt = _M_codecvt_tmp;
      else
 _M_codecvt = 0;
    }





  extern template class basic_filebuf<char>;
  extern template class basic_ifstream<char>;
  extern template class basic_ofstream<char>;
  extern template class basic_fstream<char>;


  extern template class basic_filebuf<wchar_t>;
  extern template class basic_ifstream<wchar_t>;
  extern template class basic_ofstream<wchar_t>;
  extern template class basic_fstream<wchar_t>;



}
# 916 "/usr/include/c++/4.4/fstream" 2 3
# 10 "lsystem.l" 2
# 1 "/usr/include/c++/4.4/sstream" 1 3
# 37 "/usr/include/c++/4.4/sstream" 3
       
# 38 "/usr/include/c++/4.4/sstream" 3




namespace std __attribute__ ((__visibility__ ("default"))) {
# 57 "/usr/include/c++/4.4/sstream" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_stringbuf : public basic_streambuf<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;

      typedef basic_streambuf<char_type, traits_type> __streambuf_type;
      typedef basic_string<char_type, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type __size_type;

    protected:

      ios_base::openmode _M_mode;


      __string_type _M_string;

    public:
# 91 "/usr/include/c++/4.4/sstream" 3
      explicit
      basic_stringbuf(ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __streambuf_type(), _M_mode(__mode), _M_string()
      { }
# 104 "/usr/include/c++/4.4/sstream" 3
      explicit
      basic_stringbuf(const __string_type& __str,
        ios_base::openmode __mode = ios_base::in | ios_base::out)
      : __streambuf_type(), _M_mode(), _M_string(__str.data(), __str.size())
      { _M_stringbuf_init(__mode); }
# 119 "/usr/include/c++/4.4/sstream" 3
      __string_type
      str() const
      {
 __string_type __ret;
 if (this->pptr())
   {

     if (this->pptr() > this->egptr())
       __ret = __string_type(this->pbase(), this->pptr());
     else
        __ret = __string_type(this->pbase(), this->egptr());
   }
 else
   __ret = _M_string;
 return __ret;
      }
# 143 "/usr/include/c++/4.4/sstream" 3
      void
      str(const __string_type& __s)
      {

 _M_string.assign(__s.data(), __s.size());
 _M_stringbuf_init(_M_mode);
      }

    protected:

      void
      _M_stringbuf_init(ios_base::openmode __mode)
      {
 _M_mode = __mode;
 __size_type __len = 0;
 if (_M_mode & (ios_base::ate | ios_base::app))
   __len = _M_string.size();
 _M_sync(const_cast<char_type*>(_M_string.data()), 0, __len);
      }

      virtual streamsize
      showmanyc()
      {
 streamsize __ret = -1;
 if (_M_mode & ios_base::in)
   {
     _M_update_egptr();
     __ret = this->egptr() - this->gptr();
   }
 return __ret;
      }

      virtual int_type
      underflow();

      virtual int_type
      pbackfail(int_type __c = traits_type::eof());

      virtual int_type
      overflow(int_type __c = traits_type::eof());
# 195 "/usr/include/c++/4.4/sstream" 3
      virtual __streambuf_type*
      setbuf(char_type* __s, streamsize __n)
      {
 if (__s && __n >= 0)
   {






     _M_string.clear();


     _M_sync(__s, __n, 0);
   }
 return this;
      }

      virtual pos_type
      seekoff(off_type __off, ios_base::seekdir __way,
       ios_base::openmode __mode = ios_base::in | ios_base::out);

      virtual pos_type
      seekpos(pos_type __sp,
       ios_base::openmode __mode = ios_base::in | ios_base::out);




      void
      _M_sync(char_type* __base, __size_type __i, __size_type __o);



      void
      _M_update_egptr()
      {
 const bool __testin = _M_mode & ios_base::in;
 if (this->pptr() && this->pptr() > this->egptr())
   {
     if (__testin)
       this->setg(this->eback(), this->gptr(), this->pptr());
     else
       this->setg(this->pptr(), this->pptr(), this->pptr());
   }
      }
    };
# 255 "/usr/include/c++/4.4/sstream" 3
  template<typename _CharT, typename _Traits, typename _Alloc>
    class basic_istringstream : public basic_istream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_istream<char_type, traits_type> __istream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 291 "/usr/include/c++/4.4/sstream" 3
      explicit
      basic_istringstream(ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_stringbuf(__mode | ios_base::in)
      { this->init(&_M_stringbuf); }
# 309 "/usr/include/c++/4.4/sstream" 3
      explicit
      basic_istringstream(const __string_type& __str,
     ios_base::openmode __mode = ios_base::in)
      : __istream_type(), _M_stringbuf(__str, __mode | ios_base::in)
      { this->init(&_M_stringbuf); }







      ~basic_istringstream()
      { }
# 331 "/usr/include/c++/4.4/sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };
# 365 "/usr/include/c++/4.4/sstream" 3
  template <typename _CharT, typename _Traits, typename _Alloc>
    class basic_ostringstream : public basic_ostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_ostream<char_type, traits_type> __ostream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 401 "/usr/include/c++/4.4/sstream" 3
      explicit
      basic_ostringstream(ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_stringbuf(__mode | ios_base::out)
      { this->init(&_M_stringbuf); }
# 419 "/usr/include/c++/4.4/sstream" 3
      explicit
      basic_ostringstream(const __string_type& __str,
     ios_base::openmode __mode = ios_base::out)
      : __ostream_type(), _M_stringbuf(__str, __mode | ios_base::out)
      { this->init(&_M_stringbuf); }







      ~basic_ostringstream()
      { }
# 441 "/usr/include/c++/4.4/sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };
# 475 "/usr/include/c++/4.4/sstream" 3
  template <typename _CharT, typename _Traits, typename _Alloc>
    class basic_stringstream : public basic_iostream<_CharT, _Traits>
    {
    public:

      typedef _CharT char_type;
      typedef _Traits traits_type;


      typedef _Alloc allocator_type;
      typedef typename traits_type::int_type int_type;
      typedef typename traits_type::pos_type pos_type;
      typedef typename traits_type::off_type off_type;


      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef basic_stringbuf<_CharT, _Traits, _Alloc> __stringbuf_type;
      typedef basic_iostream<char_type, traits_type> __iostream_type;

    private:
      __stringbuf_type _M_stringbuf;

    public:
# 509 "/usr/include/c++/4.4/sstream" 3
      explicit
      basic_stringstream(ios_base::openmode __m = ios_base::out | ios_base::in)
      : __iostream_type(), _M_stringbuf(__m)
      { this->init(&_M_stringbuf); }
# 525 "/usr/include/c++/4.4/sstream" 3
      explicit
      basic_stringstream(const __string_type& __str,
    ios_base::openmode __m = ios_base::out | ios_base::in)
      : __iostream_type(), _M_stringbuf(__str, __m)
      { this->init(&_M_stringbuf); }







      ~basic_stringstream()
      { }
# 547 "/usr/include/c++/4.4/sstream" 3
      __stringbuf_type*
      rdbuf() const
      { return const_cast<__stringbuf_type*>(&_M_stringbuf); }





      __string_type
      str() const
      { return _M_stringbuf.str(); }







      void
      str(const __string_type& __s)
      { _M_stringbuf.str(__s); }
    };

}


# 1 "/usr/include/c++/4.4/bits/sstream.tcc" 1 3
# 39 "/usr/include/c++/4.4/bits/sstream.tcc" 3
       
# 40 "/usr/include/c++/4.4/bits/sstream.tcc" 3

namespace std __attribute__ ((__visibility__ ("default"))) {

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    pbackfail(int_type __c)
    {
      int_type __ret = traits_type::eof();
      if (this->eback() < this->gptr())
 {


   const bool __testeof = traits_type::eq_int_type(__c, __ret);
   if (!__testeof)
     {
       const bool __testeq = traits_type::eq(traits_type::
          to_char_type(__c),
          this->gptr()[-1]);
       const bool __testout = this->_M_mode & ios_base::out;
       if (__testeq || __testout)
  {
    this->gbump(-1);
    if (!__testeq)
      *this->gptr() = traits_type::to_char_type(__c);
    __ret = __c;
  }
     }
   else
     {
       this->gbump(-1);
       __ret = traits_type::not_eof(__c);
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    overflow(int_type __c)
    {
      const bool __testout = this->_M_mode & ios_base::out;
      if (__builtin_expect(!__testout, false))
 return traits_type::eof();

      const bool __testeof = traits_type::eq_int_type(__c, traits_type::eof());
      if (__builtin_expect(__testeof, false))
 return traits_type::not_eof(__c);

      const __size_type __capacity = _M_string.capacity();
      const __size_type __max_size = _M_string.max_size();
      const bool __testput = this->pptr() < this->epptr();
      if (__builtin_expect(!__testput && __capacity == __max_size, false))
 return traits_type::eof();



      const char_type __conv = traits_type::to_char_type(__c);
      if (!__testput)
 {
# 110 "/usr/include/c++/4.4/bits/sstream.tcc" 3
   const __size_type __opt_len = std::max(__size_type(2 * __capacity),
       __size_type(512));
   const __size_type __len = std::min(__opt_len, __max_size);
   __string_type __tmp;
   __tmp.reserve(__len);
   if (this->pbase())
     __tmp.assign(this->pbase(), this->epptr() - this->pbase());
   __tmp.push_back(__conv);
   _M_string.swap(__tmp);
   _M_sync(const_cast<char_type*>(_M_string.data()),
    this->gptr() - this->eback(), this->pptr() - this->pbase());
 }
      else
 *this->pptr() = __conv;
      this->pbump(1);
      return __c;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::int_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    underflow()
    {
      int_type __ret = traits_type::eof();
      const bool __testin = this->_M_mode & ios_base::in;
      if (__testin)
 {

   _M_update_egptr();

   if (this->gptr() < this->egptr())
     __ret = traits_type::to_int_type(*this->gptr());
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    seekoff(off_type __off, ios_base::seekdir __way, ios_base::openmode __mode)
    {
      pos_type __ret = pos_type(off_type(-1));
      bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;
      bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;
      const bool __testboth = __testin && __testout && __way != ios_base::cur;
      __testin &= !(__mode & ios_base::out);
      __testout &= !(__mode & ios_base::in);



      const char_type* __beg = __testin ? this->eback() : this->pbase();
      if ((__beg || !__off) && (__testin || __testout || __testboth))
 {
   _M_update_egptr();

   off_type __newoffi = __off;
   off_type __newoffo = __newoffi;
   if (__way == ios_base::cur)
     {
       __newoffi += this->gptr() - __beg;
       __newoffo += this->pptr() - __beg;
     }
   else if (__way == ios_base::end)
     __newoffo = __newoffi += this->egptr() - __beg;

   if ((__testin || __testboth)
       && __newoffi >= 0
       && this->egptr() - __beg >= __newoffi)
     {
       this->gbump((__beg + __newoffi) - this->gptr());
       __ret = pos_type(__newoffi);
     }
   if ((__testout || __testboth)
       && __newoffo >= 0
       && this->egptr() - __beg >= __newoffo)
     {
       this->pbump((__beg + __newoffo) - this->pptr());
       __ret = pos_type(__newoffo);
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    typename basic_stringbuf<_CharT, _Traits, _Alloc>::pos_type
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    seekpos(pos_type __sp, ios_base::openmode __mode)
    {
      pos_type __ret = pos_type(off_type(-1));
      const bool __testin = (ios_base::in & this->_M_mode & __mode) != 0;
      const bool __testout = (ios_base::out & this->_M_mode & __mode) != 0;

      const char_type* __beg = __testin ? this->eback() : this->pbase();
      if ((__beg || !off_type(__sp)) && (__testin || __testout))
 {
   _M_update_egptr();

   const off_type __pos(__sp);
   const bool __testpos = (0 <= __pos
      && __pos <= this->egptr() - __beg);
   if (__testpos)
     {
       if (__testin)
  this->gbump((__beg + __pos) - this->gptr());
       if (__testout)
                this->pbump((__beg + __pos) - this->pptr());
       __ret = __sp;
     }
 }
      return __ret;
    }

  template <class _CharT, class _Traits, class _Alloc>
    void
    basic_stringbuf<_CharT, _Traits, _Alloc>::
    _M_sync(char_type* __base, __size_type __i, __size_type __o)
    {
      const bool __testin = _M_mode & ios_base::in;
      const bool __testout = _M_mode & ios_base::out;
      char_type* __endg = __base + _M_string.size();
      char_type* __endp = __base + _M_string.capacity();

      if (__base != _M_string.data())
 {

   __endg += __i;
   __i = 0;
   __endp = __endg;
 }

      if (__testin)
 this->setg(__base, __base + __i, __endg);
      if (__testout)
 {
   this->setp(__base, __endp);
   this->pbump(__o);



   if (!__testin)
     this->setg(__endg, __endg, __endg);
 }
    }





  extern template class basic_stringbuf<char>;
  extern template class basic_istringstream<char>;
  extern template class basic_ostringstream<char>;
  extern template class basic_stringstream<char>;


  extern template class basic_stringbuf<wchar_t>;
  extern template class basic_istringstream<wchar_t>;
  extern template class basic_ostringstream<wchar_t>;
  extern template class basic_stringstream<wchar_t>;



}
# 574 "/usr/include/c++/4.4/sstream" 2 3
# 11 "lsystem.l" 2
# 1 "/usr/include/c++/4.4/vector" 1 3
# 59 "/usr/include/c++/4.4/vector" 3
       
# 60 "/usr/include/c++/4.4/vector" 3



# 1 "/usr/include/c++/4.4/bits/stl_construct.h" 1 3
# 62 "/usr/include/c++/4.4/bits/stl_construct.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {





  template<typename _T1, typename _T2>
    inline void
    _Construct(_T1* __p, const _T2& __value)
    {


      ::new(static_cast<void*>(__p)) _T1(__value);
    }




  template<typename _Tp>
    inline void
    _Destroy(_Tp* __pointer)
    { __pointer->~_Tp(); }

  template<bool>
    struct _Destroy_aux
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 {
   for (; __first != __last; ++__first)
     std::_Destroy(&*__first);
 }
    };

  template<>
    struct _Destroy_aux<true>
    {
      template<typename _ForwardIterator>
        static void
        __destroy(_ForwardIterator, _ForwardIterator) { }
    };






  template<typename _ForwardIterator>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
                       _Value_type;
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 __destroy(__first, __last);
    }







  template <typename _Tp> class allocator;

  template<typename _ForwardIterator, typename _Allocator>
    void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      _Allocator& __alloc)
    {
      for (; __first != __last; ++__first)
 __alloc.destroy(&*__first);
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
      allocator<_Tp>&)
    {
      _Destroy(__first, __last);
    }

}
# 64 "/usr/include/c++/4.4/vector" 2 3
# 1 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 1 3
# 60 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  template<bool>
    struct __uninitialized_copy
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        uninitialized_copy(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result)
        {
   _ForwardIterator __cur = __result;
   try
     {
       for (; __first != __last; ++__first, ++__cur)
  ::new(static_cast<void*>(&*__cur)) typename
      iterator_traits<_ForwardIterator>::value_type(*__first);
       return __cur;
     }
   catch(...)
     {
       std::_Destroy(__result, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_copy<true>
    {
      template<typename _InputIterator, typename _ForwardIterator>
        static _ForwardIterator
        uninitialized_copy(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result)
        { return std::copy(__first, __last, __result); }
    };
# 105 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    inline _ForwardIterator
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
         _ForwardIterator __result)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _ValueType1;
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType2;

      return std::__uninitialized_copy<(__is_pod(_ValueType1)
     && __is_pod(_ValueType2))>::
 uninitialized_copy(__first, __last, __result);
    }


  template<bool>
    struct __uninitialized_fill
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        uninitialized_fill(_ForwardIterator __first,
      _ForwardIterator __last, const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __cur != __last; ++__cur)
  std::_Construct(&*__cur, __x);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill<true>
    {
      template<typename _ForwardIterator, typename _Tp>
        static void
        uninitialized_fill(_ForwardIterator __first,
      _ForwardIterator __last, const _Tp& __x)
        { std::fill(__first, __last, __x); }
    };
# 162 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Tp>
    inline void
    uninitialized_fill(_ForwardIterator __first, _ForwardIterator __last,
         const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_fill<__is_pod(_ValueType)>::
 uninitialized_fill(__first, __last, __x);
    }


  template<bool>
    struct __uninitialized_fill_n
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static void
        uninitialized_fill_n(_ForwardIterator __first, _Size __n,
        const _Tp& __x)
        {
   _ForwardIterator __cur = __first;
   try
     {
       for (; __n > 0; --__n, ++__cur)
  std::_Construct(&*__cur, __x);
     }
   catch(...)
     {
       std::_Destroy(__first, __cur);
       throw;
     }
 }
    };

  template<>
    struct __uninitialized_fill_n<true>
    {
      template<typename _ForwardIterator, typename _Size, typename _Tp>
        static void
        uninitialized_fill_n(_ForwardIterator __first, _Size __n,
        const _Tp& __x)
        { std::fill_n(__first, __n, __x); }
    };
# 216 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
  template<typename _ForwardIterator, typename _Size, typename _Tp>
    inline void
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;

      std::__uninitialized_fill_n<__is_pod(_ValueType)>::
 uninitialized_fill_n(__first, __n, __x);
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __result;
      try
 {
   for (; __first != __last; ++__first, ++__cur)
     __alloc.construct(&*__cur, *__first);
   return __cur;
 }
      catch(...)
 {
   std::_Destroy(__result, __cur, __alloc);
   throw;
 }
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }

  template<typename _InputIterator, typename _ForwardIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
      _ForwardIterator __result, _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a((__first),
      (__last),
      __result, __alloc);
    }

  template<typename _ForwardIterator, typename _Tp, typename _Allocator>
    void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   for (; __cur != __last; ++__cur)
     __alloc.construct(&*__cur, __x);
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Tp, typename _Tp2>
    inline void
    __uninitialized_fill_a(_ForwardIterator __first, _ForwardIterator __last,
      const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill(__first, __last, __x); }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Allocator>
    void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, _Allocator& __alloc)
    {
      _ForwardIterator __cur = __first;
      try
 {
   for (; __n > 0; --__n, ++__cur)
     __alloc.construct(&*__cur, __x);
 }
      catch(...)
 {
   std::_Destroy(__first, __cur, __alloc);
   throw;
 }
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
    typename _Tp2>
    inline void
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n,
        const _Tp& __x, allocator<_Tp2>&)
    { std::uninitialized_fill_n(__first, __n, __x); }
# 330 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_copy_move(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_copy_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_move_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }





  template<typename _InputIterator1, typename _InputIterator2,
    typename _ForwardIterator, typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_copy(_InputIterator1 __first1,
         _InputIterator1 __last1,
         _InputIterator2 __first2,
         _InputIterator2 __last2,
         _ForwardIterator __result,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid = std::__uninitialized_move_a(__first1, __last1,
          __result,
          __alloc);
      try
 {
   return std::__uninitialized_copy_a(__first2, __last2, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _ForwardIterator, typename _Tp, typename _InputIterator,
    typename _Allocator>
    inline _ForwardIterator
    __uninitialized_fill_move(_ForwardIterator __result, _ForwardIterator __mid,
         const _Tp& __x, _InputIterator __first,
         _InputIterator __last, _Allocator& __alloc)
    {
      std::__uninitialized_fill_a(__result, __mid, __x, __alloc);
      try
 {
   return std::__uninitialized_move_a(__first, __last, __mid, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__result, __mid, __alloc);
   throw;
 }
    }




  template<typename _InputIterator, typename _ForwardIterator, typename _Tp,
    typename _Allocator>
    inline void
    __uninitialized_move_fill(_InputIterator __first1, _InputIterator __last1,
         _ForwardIterator __first2,
         _ForwardIterator __last2, const _Tp& __x,
         _Allocator& __alloc)
    {
      _ForwardIterator __mid2 = std::__uninitialized_move_a(__first1, __last1,
           __first2,
           __alloc);
      try
 {
   std::__uninitialized_fill_a(__mid2, __last2, __x, __alloc);
 }
      catch(...)
 {
   std::_Destroy(__first2, __mid2, __alloc);
   throw;
 }
    }
# 476 "/usr/include/c++/4.4/bits/stl_uninitialized.h" 3
}
# 65 "/usr/include/c++/4.4/vector" 2 3
# 1 "/usr/include/c++/4.4/bits/stl_vector.h" 1 3
# 65 "/usr/include/c++/4.4/bits/stl_vector.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {


  template<typename _Tp, typename _Alloc>
    struct _Vector_base
    {
      typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;

      struct _Vector_impl
      : public _Tp_alloc_type
      {
 typename _Tp_alloc_type::pointer _M_start;
 typename _Tp_alloc_type::pointer _M_finish;
 typename _Tp_alloc_type::pointer _M_end_of_storage;

 _Vector_impl()
 : _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 { }

 _Vector_impl(_Tp_alloc_type const& __a)
 : _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 { }
      };

    public:
      typedef _Alloc allocator_type;

      _Tp_alloc_type&
      _M_get_Tp_allocator()
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }

      const _Tp_alloc_type&
      _M_get_Tp_allocator() const
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Tp_allocator()); }

      _Vector_base()
      : _M_impl() { }

      _Vector_base(const allocator_type& __a)
      : _M_impl(__a) { }

      _Vector_base(size_t __n, const allocator_type& __a)
      : _M_impl(__a)
      {
 this->_M_impl._M_start = this->_M_allocate(__n);
 this->_M_impl._M_finish = this->_M_impl._M_start;
 this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
      }
# 131 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      ~_Vector_base()
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
        - this->_M_impl._M_start); }

    public:
      _Vector_impl _M_impl;

      typename _Tp_alloc_type::pointer
      _M_allocate(size_t __n)
      { return __n != 0 ? _M_impl.allocate(__n) : 0; }

      void
      _M_deallocate(typename _Tp_alloc_type::pointer __p, size_t __n)
      {
 if (__p)
   _M_impl.deallocate(__p, __n);
      }
    };
# 169 "/usr/include/c++/4.4/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
    class vector : protected _Vector_base<_Tp, _Alloc>
    {

      typedef typename _Alloc::value_type _Alloc_value_type;
     
     

      typedef _Vector_base<_Tp, _Alloc> _Base;
      typedef typename _Base::_Tp_alloc_type _Tp_alloc_type;

    public:
      typedef _Tp value_type;
      typedef typename _Tp_alloc_type::pointer pointer;
      typedef typename _Tp_alloc_type::const_pointer const_pointer;
      typedef typename _Tp_alloc_type::reference reference;
      typedef typename _Tp_alloc_type::const_reference const_reference;
      typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
      typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
      const_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

    protected:
      using _Base::_M_allocate;
      using _Base::_M_deallocate;
      using _Base::_M_impl;
      using _Base::_M_get_Tp_allocator;

    public:





      vector()
      : _Base() { }





      explicit
      vector(const allocator_type& __a)
      : _Base(__a) { }
# 226 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      explicit
      vector(size_type __n, const value_type& __value = value_type(),
      const allocator_type& __a = allocator_type())
      : _Base(__n, __a)
      { _M_fill_initialize(__n, __value); }
# 241 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      vector(const vector& __x)
      : _Base(__x.size(), __x._M_get_Tp_allocator())
      { this->_M_impl._M_finish =
   std::__uninitialized_copy_a(__x.begin(), __x.end(),
          this->_M_impl._M_start,
          _M_get_Tp_allocator());
      }
# 296 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      template<typename _InputIterator>
        vector(_InputIterator __first, _InputIterator __last,
        const allocator_type& __a = allocator_type())
 : _Base(__a)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_initialize_dispatch(__first, __last, _Integral());
 }







      ~vector()
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
        _M_get_Tp_allocator()); }
# 324 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      vector&
      operator=(const vector& __x);
# 373 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void
      assign(size_type __n, const value_type& __val)
      { _M_fill_assign(__n, __val); }
# 389 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      template<typename _InputIterator>
        void
        assign(_InputIterator __first, _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_assign_dispatch(__first, __last, _Integral());
 }
# 416 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      using _Base::get_allocator;







      iterator
      begin()
      { return iterator(this->_M_impl._M_start); }






      const_iterator
      begin() const
      { return const_iterator(this->_M_impl._M_start); }






      iterator
      end()
      { return iterator(this->_M_impl._M_finish); }






      const_iterator
      end() const
      { return const_iterator(this->_M_impl._M_finish); }






      reverse_iterator
      rbegin()
      { return reverse_iterator(end()); }






      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(end()); }






      reverse_iterator
      rend()
      { return reverse_iterator(begin()); }






      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(begin()); }
# 531 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      size_type
      size() const
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }


      size_type
      max_size() const
      { return _M_get_Tp_allocator().max_size(); }
# 551 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void
      resize(size_type __new_size, value_type __x = value_type())
      {
 if (__new_size < size())
   _M_erase_at_end(this->_M_impl._M_start + __new_size);
 else
   insert(end(), __new_size - size(), __x);
      }





      size_type
      capacity() const
      { return size_type(this->_M_impl._M_end_of_storage
    - this->_M_impl._M_start); }





      bool
      empty() const
      { return begin() == end(); }
# 594 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void
      reserve(size_type __n);
# 609 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      reference
      operator[](size_type __n)
      { return *(this->_M_impl._M_start + __n); }
# 624 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      const_reference
      operator[](size_type __n) const
      { return *(this->_M_impl._M_start + __n); }

    protected:

      void
      _M_range_check(size_type __n) const
      {
 if (__n >= this->size())
   __throw_out_of_range(("vector::_M_range_check"));
      }

    public:
# 649 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      reference
      at(size_type __n)
      {
 _M_range_check(__n);
 return (*this)[__n];
      }
# 667 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      const_reference
      at(size_type __n) const
      {
 _M_range_check(__n);
 return (*this)[__n];
      }





      reference
      front()
      { return *begin(); }





      const_reference
      front() const
      { return *begin(); }





      reference
      back()
      { return *(end() - 1); }





      const_reference
      back() const
      { return *(end() - 1); }
# 713 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      pointer
      data()
      { return pointer(this->_M_impl._M_start); }

      const_pointer
      data() const
      { return const_pointer(this->_M_impl._M_start); }
# 732 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void
      push_back(const value_type& __x)
      {
 if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   {
     this->_M_impl.construct(this->_M_impl._M_finish, __x);
     ++this->_M_impl._M_finish;
   }
 else
   _M_insert_aux(end(), __x);
      }
# 763 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void
      pop_back()
      {
 --this->_M_impl._M_finish;
 this->_M_impl.destroy(this->_M_impl._M_finish);
      }
# 799 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      iterator
      insert(iterator __position, const value_type& __x);
# 849 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void
      insert(iterator __position, size_type __n, const value_type& __x)
      { _M_fill_insert(__position, __n, __x); }
# 867 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      template<typename _InputIterator>
        void
        insert(iterator __position, _InputIterator __first,
        _InputIterator __last)
        {

   typedef typename std::__is_integer<_InputIterator>::__type _Integral;
   _M_insert_dispatch(__position, __first, __last, _Integral());
 }
# 892 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      iterator
      erase(iterator __position);
# 913 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      iterator
      erase(iterator __first, iterator __last);
# 925 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      void



      swap(vector& __x)

      {
 std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
 std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
 std::swap(this->_M_impl._M_end_of_storage,
    __x._M_impl._M_end_of_storage);



 std::__alloc_swap<_Tp_alloc_type>::_S_do_it(_M_get_Tp_allocator(),
          __x._M_get_Tp_allocator());
      }







      void
      clear()
      { _M_erase_at_end(this->_M_impl._M_start); }

    protected:




      template<typename _ForwardIterator>
        pointer
        _M_allocate_and_copy(size_type __n,
        _ForwardIterator __first, _ForwardIterator __last)
        {
   pointer __result = this->_M_allocate(__n);
   try
     {
       std::__uninitialized_copy_a(__first, __last, __result,
       _M_get_Tp_allocator());
       return __result;
     }
   catch(...)
     {
       _M_deallocate(__result, __n);
       throw;
     }
 }
# 984 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_initialize_dispatch(_Integer __n, _Integer __value, __true_type)
        {
   this->_M_impl._M_start = _M_allocate(static_cast<size_type>(__n));
   this->_M_impl._M_end_of_storage =
     this->_M_impl._M_start + static_cast<size_type>(__n);
   _M_fill_initialize(static_cast<size_type>(__n), __value);
 }


      template<typename _InputIterator>
        void
        _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
          __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_initialize(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_initialize(_InputIterator __first,
       _InputIterator __last, std::input_iterator_tag)
        {
   for (; __first != __last; ++__first)
     push_back(*__first);
 }


      template<typename _ForwardIterator>
        void
        _M_range_initialize(_ForwardIterator __first,
       _ForwardIterator __last, std::forward_iterator_tag)
        {
   const size_type __n = std::distance(__first, __last);
   this->_M_impl._M_start = this->_M_allocate(__n);
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
   this->_M_impl._M_finish =
     std::__uninitialized_copy_a(__first, __last,
     this->_M_impl._M_start,
     _M_get_Tp_allocator());
 }



      void
      _M_fill_initialize(size_type __n, const value_type& __value)
      {
 std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
          _M_get_Tp_allocator());
 this->_M_impl._M_finish = this->_M_impl._M_end_of_storage;
      }
# 1048 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
        { _M_fill_assign(__n, __val); }


      template<typename _InputIterator>
        void
        _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
      __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_assign_aux(__first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_assign_aux(_InputIterator __first, _InputIterator __last,
        std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
        std::forward_iterator_tag);



      void
      _M_fill_assign(size_type __n, const value_type& __val);
# 1088 "/usr/include/c++/4.4/bits/stl_vector.h" 3
      template<typename _Integer>
        void
        _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __val,
      __true_type)
        { _M_fill_insert(__pos, __n, __val); }


      template<typename _InputIterator>
        void
        _M_insert_dispatch(iterator __pos, _InputIterator __first,
      _InputIterator __last, __false_type)
        {
   typedef typename std::iterator_traits<_InputIterator>::
     iterator_category _IterCategory;
   _M_range_insert(__pos, __first, __last, _IterCategory());
 }


      template<typename _InputIterator>
        void
        _M_range_insert(iterator __pos, _InputIterator __first,
   _InputIterator __last, std::input_iterator_tag);


      template<typename _ForwardIterator>
        void
        _M_range_insert(iterator __pos, _ForwardIterator __first,
   _ForwardIterator __last, std::forward_iterator_tag);



      void
      _M_fill_insert(iterator __pos, size_type __n, const value_type& __x);



      void
      _M_insert_aux(iterator __position, const value_type& __x);







      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
 if (max_size() - size() < __n)
   __throw_length_error((__s));

 const size_type __len = size() + std::max(size(), __n);
 return (__len < size() || __len > max_size()) ? max_size() : __len;
      }





      void
      _M_erase_at_end(pointer __pos)
      {
 std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 this->_M_impl._M_finish = __pos;
      }
    };
# 1166 "/usr/include/c++/4.4/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator==(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return (__x.size() == __y.size()
       && std::equal(__x.begin(), __x.end(), __y.begin())); }
# 1183 "/usr/include/c++/4.4/bits/stl_vector.h" 3
  template<typename _Tp, typename _Alloc>
    inline bool
    operator<(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end()); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator!=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator<=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Tp, typename _Alloc>
    inline bool
    operator>=(const vector<_Tp, _Alloc>& __x, const vector<_Tp, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Tp, typename _Alloc>
    inline void
    swap(vector<_Tp, _Alloc>& __x, vector<_Tp, _Alloc>& __y)
    { __x.swap(__y); }
# 1231 "/usr/include/c++/4.4/bits/stl_vector.h" 3
}
# 66 "/usr/include/c++/4.4/vector" 2 3
# 1 "/usr/include/c++/4.4/bits/stl_bvector.h" 1 3
# 62 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  typedef unsigned long _Bit_type;
  enum { _S_word_bit = int(8 * sizeof(_Bit_type)) };

  struct _Bit_reference
  {
    _Bit_type * _M_p;
    _Bit_type _M_mask;

    _Bit_reference(_Bit_type * __x, _Bit_type __y)
    : _M_p(__x), _M_mask(__y) { }

    _Bit_reference() : _M_p(0), _M_mask(0) { }

    operator bool() const
    { return !!(*_M_p & _M_mask); }

    _Bit_reference&
    operator=(bool __x)
    {
      if (__x)
 *_M_p |= _M_mask;
      else
 *_M_p &= ~_M_mask;
      return *this;
    }

    _Bit_reference&
    operator=(const _Bit_reference& __x)
    { return *this = bool(__x); }

    bool
    operator==(const _Bit_reference& __x) const
    { return bool(*this) == bool(__x); }

    bool
    operator<(const _Bit_reference& __x) const
    { return !bool(*this) && bool(__x); }

    void
    flip()
    { *_M_p ^= _M_mask; }
  };

  struct _Bit_iterator_base
  : public std::iterator<std::random_access_iterator_tag, bool>
  {
    _Bit_type * _M_p;
    unsigned int _M_offset;

    _Bit_iterator_base(_Bit_type * __x, unsigned int __y)
    : _M_p(__x), _M_offset(__y) { }

    void
    _M_bump_up()
    {
      if (_M_offset++ == int(_S_word_bit) - 1)
 {
   _M_offset = 0;
   ++_M_p;
 }
    }

    void
    _M_bump_down()
    {
      if (_M_offset-- == 0)
 {
   _M_offset = int(_S_word_bit) - 1;
   --_M_p;
 }
    }

    void
    _M_incr(ptrdiff_t __i)
    {
      difference_type __n = __i + _M_offset;
      _M_p += __n / int(_S_word_bit);
      __n = __n % int(_S_word_bit);
      if (__n < 0)
 {
   __n += int(_S_word_bit);
   --_M_p;
 }
      _M_offset = static_cast<unsigned int>(__n);
    }

    bool
    operator==(const _Bit_iterator_base& __i) const
    { return _M_p == __i._M_p && _M_offset == __i._M_offset; }

    bool
    operator<(const _Bit_iterator_base& __i) const
    {
      return _M_p < __i._M_p
      || (_M_p == __i._M_p && _M_offset < __i._M_offset);
    }

    bool
    operator!=(const _Bit_iterator_base& __i) const
    { return !(*this == __i); }

    bool
    operator>(const _Bit_iterator_base& __i) const
    { return __i < *this; }

    bool
    operator<=(const _Bit_iterator_base& __i) const
    { return !(__i < *this); }

    bool
    operator>=(const _Bit_iterator_base& __i) const
    { return !(*this < __i); }
  };

  inline ptrdiff_t
  operator-(const _Bit_iterator_base& __x, const _Bit_iterator_base& __y)
  {
    return (int(_S_word_bit) * (__x._M_p - __y._M_p)
     + __x._M_offset - __y._M_offset);
  }

  struct _Bit_iterator : public _Bit_iterator_base
  {
    typedef _Bit_reference reference;
    typedef _Bit_reference* pointer;
    typedef _Bit_iterator iterator;

    _Bit_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    reference
    operator*() const
    { return reference(_M_p, 1UL << _M_offset); }

    iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    iterator
    operator++(int)
    {
      iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    iterator
    operator--(int)
    {
      iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    iterator
    operator+(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp += __i;
    }

    iterator
    operator-(difference_type __i) const
    {
      iterator __tmp = *this;
      return __tmp -= __i;
    }

    reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_iterator
  operator+(ptrdiff_t __n, const _Bit_iterator& __x)
  { return __x + __n; }

  struct _Bit_const_iterator : public _Bit_iterator_base
  {
    typedef bool reference;
    typedef bool const_reference;
    typedef const bool* pointer;
    typedef _Bit_const_iterator const_iterator;

    _Bit_const_iterator() : _Bit_iterator_base(0, 0) { }

    _Bit_const_iterator(_Bit_type * __x, unsigned int __y)
    : _Bit_iterator_base(__x, __y) { }

    _Bit_const_iterator(const _Bit_iterator& __x)
    : _Bit_iterator_base(__x._M_p, __x._M_offset) { }

    const_reference
    operator*() const
    { return _Bit_reference(_M_p, 1UL << _M_offset); }

    const_iterator&
    operator++()
    {
      _M_bump_up();
      return *this;
    }

    const_iterator
    operator++(int)
    {
      const_iterator __tmp = *this;
      _M_bump_up();
      return __tmp;
    }

    const_iterator&
    operator--()
    {
      _M_bump_down();
      return *this;
    }

    const_iterator
    operator--(int)
    {
      const_iterator __tmp = *this;
      _M_bump_down();
      return __tmp;
    }

    const_iterator&
    operator+=(difference_type __i)
    {
      _M_incr(__i);
      return *this;
    }

    const_iterator&
    operator-=(difference_type __i)
    {
      *this += -__i;
      return *this;
    }

    const_iterator
    operator+(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp += __i;
    }

    const_iterator
    operator-(difference_type __i) const
    {
      const_iterator __tmp = *this;
      return __tmp -= __i;
    }

    const_reference
    operator[](difference_type __i) const
    { return *(*this + __i); }
  };

  inline _Bit_const_iterator
  operator+(ptrdiff_t __n, const _Bit_const_iterator& __x)
  { return __x + __n; }

  inline void
  __fill_bvector(_Bit_iterator __first, _Bit_iterator __last, bool __x)
  {
    for (; __first != __last; ++__first)
      *__first = __x;
  }

  inline void
  fill(_Bit_iterator __first, _Bit_iterator __last, const bool& __x)
  {
    if (__first._M_p != __last._M_p)
      {
 std::fill(__first._M_p + 1, __last._M_p, __x ? ~0 : 0);
 __fill_bvector(__first, _Bit_iterator(__first._M_p + 1, 0), __x);
 __fill_bvector(_Bit_iterator(__last._M_p, 0), __last, __x);
      }
    else
      __fill_bvector(__first, __last, __x);
  }

  template<typename _Alloc>
    struct _Bvector_base
    {
      typedef typename _Alloc::template rebind<_Bit_type>::other
        _Bit_alloc_type;

      struct _Bvector_impl
      : public _Bit_alloc_type
      {
 _Bit_iterator _M_start;
 _Bit_iterator _M_finish;
 _Bit_type* _M_end_of_storage;

 _Bvector_impl()
 : _Bit_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage(0)
 { }

 _Bvector_impl(const _Bit_alloc_type& __a)
 : _Bit_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage(0)
 { }
      };

    public:
      typedef _Alloc allocator_type;

      _Bit_alloc_type&
      _M_get_Bit_allocator()
      { return *static_cast<_Bit_alloc_type*>(&this->_M_impl); }

      const _Bit_alloc_type&
      _M_get_Bit_allocator() const
      { return *static_cast<const _Bit_alloc_type*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Bit_allocator()); }

      _Bvector_base()
      : _M_impl() { }

      _Bvector_base(const allocator_type& __a)
      : _M_impl(__a) { }
# 429 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
      ~_Bvector_base()
      { this->_M_deallocate(); }

    protected:
      _Bvector_impl _M_impl;

      _Bit_type*
      _M_allocate(size_t __n)
      { return _M_impl.allocate((__n + int(_S_word_bit) - 1)
    / int(_S_word_bit)); }

      void
      _M_deallocate()
      {
 if (_M_impl._M_start._M_p)
   _M_impl.deallocate(_M_impl._M_start._M_p,
        _M_impl._M_end_of_storage - _M_impl._M_start._M_p);
      }
    };

}




namespace std __attribute__ ((__visibility__ ("default"))) {
# 473 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
template<typename _Alloc>
  class vector<bool, _Alloc> : protected _Bvector_base<_Alloc>
  {
    typedef _Bvector_base<_Alloc> _Base;

  public:
    typedef bool value_type;
    typedef size_t size_type;
    typedef ptrdiff_t difference_type;
    typedef _Bit_reference reference;
    typedef bool const_reference;
    typedef _Bit_reference* pointer;
    typedef const bool* const_pointer;
    typedef _Bit_iterator iterator;
    typedef _Bit_const_iterator const_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
    typedef std::reverse_iterator<iterator> reverse_iterator;
    typedef _Alloc allocator_type;

    allocator_type get_allocator() const
    { return _Base::get_allocator(); }

  protected:
    using _Base::_M_allocate;
    using _Base::_M_deallocate;
    using _Base::_M_get_Bit_allocator;

  public:
    vector()
    : _Base() { }

    explicit
    vector(const allocator_type& __a)
    : _Base(__a) { }

    explicit
    vector(size_type __n, const bool& __value = bool(),
    const allocator_type& __a = allocator_type())
    : _Base(__a)
    {
      _M_initialize(__n);
      std::fill(this->_M_impl._M_start._M_p, this->_M_impl._M_end_of_storage,
  __value ? ~0 : 0);
    }

    vector(const vector& __x)
    : _Base(__x._M_get_Bit_allocator())
    {
      _M_initialize(__x.size());
      _M_copy_aligned(__x.begin(), __x.end(), this->_M_impl._M_start);
    }
# 538 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
    template<typename _InputIterator>
      vector(_InputIterator __first, _InputIterator __last,
      const allocator_type& __a = allocator_type())
      : _Base(__a)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_initialize_dispatch(__first, __last, _Integral());
      }

    ~vector() { }

    vector&
    operator=(const vector& __x)
    {
      if (&__x == this)
 return *this;
      if (__x.size() > capacity())
 {
   this->_M_deallocate();
   _M_initialize(__x.size());
 }
      this->_M_impl._M_finish = _M_copy_aligned(__x.begin(), __x.end(),
      begin());
      return *this;
    }
# 586 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
    void
    assign(size_type __n, const bool& __x)
    { _M_fill_assign(__n, __x); }

    template<typename _InputIterator>
      void
      assign(_InputIterator __first, _InputIterator __last)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_assign_dispatch(__first, __last, _Integral());
      }







    iterator
    begin()
    { return this->_M_impl._M_start; }

    const_iterator
    begin() const
    { return this->_M_impl._M_start; }

    iterator
    end()
    { return this->_M_impl._M_finish; }

    const_iterator
    end() const
    { return this->_M_impl._M_finish; }

    reverse_iterator
    rbegin()
    { return reverse_iterator(end()); }

    const_reverse_iterator
    rbegin() const
    { return const_reverse_iterator(end()); }

    reverse_iterator
    rend()
    { return reverse_iterator(begin()); }

    const_reverse_iterator
    rend() const
    { return const_reverse_iterator(begin()); }
# 654 "/usr/include/c++/4.4/bits/stl_bvector.h" 3
    size_type
    size() const
    { return size_type(end() - begin()); }

    size_type
    max_size() const
    {
      const size_type __isize =
 __gnu_cxx::__numeric_traits<difference_type>::__max
 - int(_S_word_bit) + 1;
      const size_type __asize = _M_get_Bit_allocator().max_size();
      return (__asize <= __isize / int(_S_word_bit)
       ? __asize * int(_S_word_bit) : __isize);
    }

    size_type
    capacity() const
    { return size_type(const_iterator(this->_M_impl._M_end_of_storage, 0)
         - begin()); }

    bool
    empty() const
    { return begin() == end(); }

    reference
    operator[](size_type __n)
    {
      return *iterator(this->_M_impl._M_start._M_p
         + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

    const_reference
    operator[](size_type __n) const
    {
      return *const_iterator(this->_M_impl._M_start._M_p
        + __n / int(_S_word_bit), __n % int(_S_word_bit));
    }

  protected:
    void
    _M_range_check(size_type __n) const
    {
      if (__n >= this->size())
        __throw_out_of_range(("vector<bool>::_M_range_check"));
    }

  public:
    reference
    at(size_type __n)
    { _M_range_check(__n); return (*this)[__n]; }

    const_reference
    at(size_type __n) const
    { _M_range_check(__n); return (*this)[__n]; }

    void
    reserve(size_type __n);

    reference
    front()
    { return *begin(); }

    const_reference
    front() const
    { return *begin(); }

    reference
    back()
    { return *(end() - 1); }

    const_reference
    back() const
    { return *(end() - 1); }






    void
    data() { }

    void
    push_back(bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(end(), __x);
    }

    void



    swap(vector& __x)

    {
      std::swap(this->_M_impl._M_start, __x._M_impl._M_start);
      std::swap(this->_M_impl._M_finish, __x._M_impl._M_finish);
      std::swap(this->_M_impl._M_end_of_storage,
  __x._M_impl._M_end_of_storage);



      std::__alloc_swap<typename _Base::_Bit_alloc_type>::
 _S_do_it(_M_get_Bit_allocator(), __x._M_get_Bit_allocator());
    }


    static void
    swap(reference __x, reference __y)
    {
      bool __tmp = __x;
      __x = __y;
      __y = __tmp;
    }

    iterator
    insert(iterator __position, const bool& __x = bool())
    {
      const difference_type __n = __position - begin();
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage
   && __position == end())
        *this->_M_impl._M_finish++ = __x;
      else
        _M_insert_aux(__position, __x);
      return begin() + __n;
    }

    template<typename _InputIterator>
      void
      insert(iterator __position,
      _InputIterator __first, _InputIterator __last)
      {
 typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 _M_insert_dispatch(__position, __first, __last, _Integral());
      }

    void
    insert(iterator __position, size_type __n, const bool& __x)
    { _M_fill_insert(__position, __n, __x); }






    void
    pop_back()
    { --this->_M_impl._M_finish; }

    iterator
    erase(iterator __position)
    {
      if (__position + 1 != end())
        std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      return __position;
    }

    iterator
    erase(iterator __first, iterator __last)
    {
      _M_erase_at_end(std::copy(__last, end(), __first));
      return __first;
    }

    void
    resize(size_type __new_size, bool __x = bool())
    {
      if (__new_size < size())
        _M_erase_at_end(begin() + difference_type(__new_size));
      else
        insert(end(), __new_size - size(), __x);
    }

    void
    flip()
    {
      for (_Bit_type * __p = this->_M_impl._M_start._M_p;
    __p != this->_M_impl._M_end_of_storage; ++__p)
        *__p = ~*__p;
    }

    void
    clear()
    { _M_erase_at_end(begin()); }


  protected:

    iterator
    _M_copy_aligned(const_iterator __first, const_iterator __last,
      iterator __result)
    {
      _Bit_type* __q = std::copy(__first._M_p, __last._M_p, __result._M_p);
      return std::copy(const_iterator(__last._M_p, 0), __last,
         iterator(__q, 0));
    }

    void
    _M_initialize(size_type __n)
    {
      _Bit_type* __q = this->_M_allocate(__n);
      this->_M_impl._M_end_of_storage = (__q
      + ((__n + int(_S_word_bit) - 1)
         / int(_S_word_bit)));
      this->_M_impl._M_start = iterator(__q, 0);
      this->_M_impl._M_finish = this->_M_impl._M_start + difference_type(__n);
    }





    template<typename _Integer>
      void
      _M_initialize_dispatch(_Integer __n, _Integer __x, __true_type)
      {
 _M_initialize(static_cast<size_type>(__n));
 std::fill(this->_M_impl._M_start._M_p,
    this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
      }

    template<typename _InputIterator>
      void
      _M_initialize_dispatch(_InputIterator __first, _InputIterator __last,
        __false_type)
      { _M_initialize_range(__first, __last,
       std::__iterator_category(__first)); }

    template<typename _InputIterator>
      void
      _M_initialize_range(_InputIterator __first, _InputIterator __last,
     std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   push_back(*__first);
      }

    template<typename _ForwardIterator>
      void
      _M_initialize_range(_ForwardIterator __first, _ForwardIterator __last,
     std::forward_iterator_tag)
      {
 const size_type __n = std::distance(__first, __last);
 _M_initialize(__n);
 std::copy(__first, __last, this->_M_impl._M_start);
      }



    template<typename _Integer>
      void
      _M_assign_dispatch(_Integer __n, _Integer __val, __true_type)
      { _M_fill_assign(__n, __val); }

    template<class _InputIterator>
      void
      _M_assign_dispatch(_InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_assign_aux(__first, __last, std::__iterator_category(__first)); }

    void
    _M_fill_assign(size_t __n, bool __x)
    {
      if (__n > size())
 {
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
   insert(end(), __n - size(), __x);
 }
      else
 {
   _M_erase_at_end(begin() + __n);
   std::fill(this->_M_impl._M_start._M_p,
      this->_M_impl._M_end_of_storage, __x ? ~0 : 0);
 }
    }

    template<typename _InputIterator>
      void
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 iterator __cur = begin();
 for (; __first != __last && __cur != end(); ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

    template<typename _ForwardIterator>
      void
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);
 if (__len < size())
   _M_erase_at_end(std::copy(__first, __last, begin()));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, begin());
     insert(end(), __mid, __last);
   }
      }





    template<typename _Integer>
      void
      _M_insert_dispatch(iterator __pos, _Integer __n, _Integer __x,
    __true_type)
      { _M_fill_insert(__pos, __n, __x); }

    template<typename _InputIterator>
      void
      _M_insert_dispatch(iterator __pos,
    _InputIterator __first, _InputIterator __last,
    __false_type)
      { _M_insert_range(__pos, __first, __last,
   std::__iterator_category(__first)); }

    void
    _M_fill_insert(iterator __position, size_type __n, bool __x);

    template<typename _InputIterator>
      void
      _M_insert_range(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

    template<typename _ForwardIterator>
      void
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag);

    void
    _M_insert_aux(iterator __position, bool __x);

    size_type
    _M_check_len(size_type __n, const char* __s) const
    {
      if (max_size() - size() < __n)
 __throw_length_error((__s));

      const size_type __len = size() + std::max(size(), __n);
      return (__len < size() || __len > max_size()) ? max_size() : __len;
    }

    void
    _M_erase_at_end(iterator __pos)
    { this->_M_impl._M_finish = __pos; }
  };

}
# 67 "/usr/include/c++/4.4/vector" 2 3


# 1 "/usr/include/c++/4.4/bits/vector.tcc" 1 3
# 60 "/usr/include/c++/4.4/bits/vector.tcc" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   const size_type __old_size = size();
   pointer __tmp = _M_allocate_and_copy(__n,
   (this->_M_impl._M_start),
   (this->_M_impl._M_finish));
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __tmp;
   this->_M_impl._M_finish = __tmp + __old_size;
   this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 }
    }
# 104 "/usr/include/c++/4.4/bits/vector.tcc" 3
  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    insert(iterator __position, const value_type& __x)
    {
      const size_type __n = __position - begin();
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage
   && __position == end())
 {
   this->_M_impl.construct(this->_M_impl._M_finish, __x);
   ++this->_M_impl._M_finish;
 }
      else
 {
# 126 "/usr/include/c++/4.4/bits/vector.tcc" 3
     _M_insert_aux(__position, __x);
 }
      return iterator(this->_M_impl._M_start + __n);
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    erase(iterator __position)
    {
      if (__position + 1 != end())
 std::copy(__position + 1, end(), __position);
      --this->_M_impl._M_finish;
      this->_M_impl.destroy(this->_M_impl._M_finish);
      return __position;
    }

  template<typename _Tp, typename _Alloc>
    typename vector<_Tp, _Alloc>::iterator
    vector<_Tp, _Alloc>::
    erase(iterator __first, iterator __last)
    {
      if (__last != end())
 std::copy(__last, end(), __first);
      _M_erase_at_end(__first.base() + (end() - __last));
      return __first;
    }

  template<typename _Tp, typename _Alloc>
    vector<_Tp, _Alloc>&
    vector<_Tp, _Alloc>::
    operator=(const vector<_Tp, _Alloc>& __x)
    {
      if (&__x != this)
 {
   const size_type __xlen = __x.size();
   if (__xlen > capacity())
     {
       pointer __tmp = _M_allocate_and_copy(__xlen, __x.begin(),
         __x.end());
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __tmp;
       this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
     }
   else if (size() >= __xlen)
     {
       std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
       end(), _M_get_Tp_allocator());
     }
   else
     {
       std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
   this->_M_impl._M_start);
       std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
       __x._M_impl._M_finish,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
     }
   this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 }
      return *this;
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_assign(size_t __n, const value_type& __val)
    {
      if (__n > capacity())
 {
   vector __tmp(__n, __val, _M_get_Tp_allocator());
   __tmp.swap(*this);
 }
      else if (__n > size())
 {
   std::fill(begin(), end(), __val);
   std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
     __n - size(), __val,
     _M_get_Tp_allocator());
   this->_M_impl._M_finish += __n - size();
 }
      else
        _M_erase_at_end(std::fill_n(this->_M_impl._M_start, __n, __val));
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_InputIterator __first, _InputIterator __last,
      std::input_iterator_tag)
      {
 pointer __cur(this->_M_impl._M_start);
 for (; __first != __last && __cur != this->_M_impl._M_finish;
      ++__cur, ++__first)
   *__cur = *__first;
 if (__first == __last)
   _M_erase_at_end(__cur);
 else
   insert(end(), __first, __last);
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_assign_aux(_ForwardIterator __first, _ForwardIterator __last,
      std::forward_iterator_tag)
      {
 const size_type __len = std::distance(__first, __last);

 if (__len > capacity())
   {
     pointer __tmp(_M_allocate_and_copy(__len, __first, __last));
     std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
     _M_get_Tp_allocator());
     _M_deallocate(this->_M_impl._M_start,
     this->_M_impl._M_end_of_storage
     - this->_M_impl._M_start);
     this->_M_impl._M_start = __tmp;
     this->_M_impl._M_finish = this->_M_impl._M_start + __len;
     this->_M_impl._M_end_of_storage = this->_M_impl._M_finish;
   }
 else if (size() >= __len)
   _M_erase_at_end(std::copy(__first, __last, this->_M_impl._M_start));
 else
   {
     _ForwardIterator __mid = __first;
     std::advance(__mid, size());
     std::copy(__first, __mid, this->_M_impl._M_start);
     this->_M_impl._M_finish =
       std::__uninitialized_copy_a(__mid, __last,
       this->_M_impl._M_finish,
       _M_get_Tp_allocator());
   }
      }
# 293 "/usr/include/c++/4.4/bits/vector.tcc" 3
  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_insert_aux(iterator __position, const _Tp& __x)

    {
      if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 {
   this->_M_impl.construct(this->_M_impl._M_finish,
      (*(this->_M_impl._M_finish - 1)));

   ++this->_M_impl._M_finish;

   _Tp __x_copy = __x;

   std::copy_backward(__position.base(), this->_M_impl._M_finish - 2, this->_M_impl._M_finish - 1);



   *__position = __x_copy;



 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector::_M_insert_aux");
   const size_type __elems_before = __position - begin();
   pointer __new_start(this->_M_allocate(__len));
   pointer __new_finish(__new_start);
   try
     {




       this->_M_impl.construct(__new_start + __elems_before,



                               __x);

       __new_finish = 0;

       __new_finish =
  std::__uninitialized_move_a(this->_M_impl._M_start,
         __position.base(), __new_start,
         _M_get_Tp_allocator());
       ++__new_finish;

       __new_finish =
  std::__uninitialized_move_a(__position.base(),
         this->_M_impl._M_finish,
         __new_finish,
         _M_get_Tp_allocator());
     }
          catch(...)
     {
       if (!__new_finish)
  this->_M_impl.destroy(__new_start + __elems_before);
       else
  std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
       _M_deallocate(__new_start, __len);
       throw;
     }
   std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
   _M_get_Tp_allocator());
   _M_deallocate(this->_M_impl._M_start,
   this->_M_impl._M_end_of_storage
   - this->_M_impl._M_start);
   this->_M_impl._M_start = __new_start;
   this->_M_impl._M_finish = __new_finish;
   this->_M_impl._M_end_of_storage = __new_start + __len;
 }
    }

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 {
   if (size_type(this->_M_impl._M_end_of_storage
   - this->_M_impl._M_finish) >= __n)
     {
       value_type __x_copy = __x;
       const size_type __elems_after = end() - __position;
       pointer __old_finish(this->_M_impl._M_finish);
       if (__elems_after > __n)
  {
    std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
           this->_M_impl._M_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n;
    std::copy_backward(__position.base(), __old_finish - __n, __old_finish);

    std::fill(__position.base(), __position.base() + __n,
       __x_copy);
  }
       else
  {
    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
      __n - __elems_after,
      __x_copy,
      _M_get_Tp_allocator());
    this->_M_impl._M_finish += __n - __elems_after;
    std::__uninitialized_move_a(__position.base(), __old_finish,
           this->_M_impl._M_finish,
           _M_get_Tp_allocator());
    this->_M_impl._M_finish += __elems_after;
    std::fill(__position.base(), __old_finish, __x_copy);
  }
     }
   else
     {
       const size_type __len =
  _M_check_len(__n, "vector::_M_fill_insert");
       const size_type __elems_before = __position - begin();
       pointer __new_start(this->_M_allocate(__len));
       pointer __new_finish(__new_start);
       try
  {

    std::__uninitialized_fill_n_a(__new_start + __elems_before,
      __n, __x,
      _M_get_Tp_allocator());
    __new_finish = 0;

    __new_finish =
      std::__uninitialized_move_a(this->_M_impl._M_start,
      __position.base(),
      __new_start,
      _M_get_Tp_allocator());
    __new_finish += __n;

    __new_finish =
      std::__uninitialized_move_a(__position.base(),
      this->_M_impl._M_finish,
      __new_finish,
      _M_get_Tp_allocator());
  }
       catch(...)
  {
    if (!__new_finish)
      std::_Destroy(__new_start + __elems_before,
      __new_start + __elems_before + __n,
      _M_get_Tp_allocator());
    else
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
    _M_deallocate(__new_start, __len);
    throw;
  }
       std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       _M_get_Tp_allocator());
       _M_deallocate(this->_M_impl._M_start,
       this->_M_impl._M_end_of_storage
       - this->_M_impl._M_start);
       this->_M_impl._M_start = __new_start;
       this->_M_impl._M_finish = __new_finish;
       this->_M_impl._M_end_of_storage = __new_start + __len;
     }
 }
    }

  template<typename _Tp, typename _Alloc>
    template<typename _InputIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __pos, _InputIterator __first,
        _InputIterator __last, std::input_iterator_tag)
      {
 for (; __first != __last; ++__first)
   {
     __pos = insert(__pos, *__first);
     ++__pos;
   }
      }

  template<typename _Tp, typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<_Tp, _Alloc>::
      _M_range_insert(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     const size_type __n = std::distance(__first, __last);
     if (size_type(this->_M_impl._M_end_of_storage
     - this->_M_impl._M_finish) >= __n)
       {
  const size_type __elems_after = end() - __position;
  pointer __old_finish(this->_M_impl._M_finish);
  if (__elems_after > __n)
    {
      std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
      this->_M_impl._M_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n;
      std::copy_backward(__position.base(), __old_finish - __n, __old_finish);

      std::copy(__first, __last, __position);
    }
  else
    {
      _ForwardIterator __mid = __first;
      std::advance(__mid, __elems_after);
      std::__uninitialized_copy_a(__mid, __last,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __n - __elems_after;
      std::__uninitialized_move_a(__position.base(),
      __old_finish,
      this->_M_impl._M_finish,
      _M_get_Tp_allocator());
      this->_M_impl._M_finish += __elems_after;
      std::copy(__first, __mid, __position);
    }
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector::_M_range_insert");
  pointer __new_start(this->_M_allocate(__len));
  pointer __new_finish(__new_start);
  try
    {
      __new_finish =
        std::__uninitialized_move_a(this->_M_impl._M_start,
        __position.base(),
        __new_start,
        _M_get_Tp_allocator());
      __new_finish =
        std::__uninitialized_copy_a(__first, __last,
        __new_finish,
        _M_get_Tp_allocator());
      __new_finish =
        std::__uninitialized_move_a(__position.base(),
        this->_M_impl._M_finish,
        __new_finish,
        _M_get_Tp_allocator());
    }
  catch(...)
    {
      std::_Destroy(__new_start, __new_finish,
      _M_get_Tp_allocator());
      _M_deallocate(__new_start, __len);
      throw;
    }
  std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
         _M_get_Tp_allocator());
  _M_deallocate(this->_M_impl._M_start,
         this->_M_impl._M_end_of_storage
         - this->_M_impl._M_start);
  this->_M_impl._M_start = __new_start;
  this->_M_impl._M_finish = __new_finish;
  this->_M_impl._M_end_of_storage = __new_start + __len;
       }
   }
      }




  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    reserve(size_type __n)
    {
      if (__n > this->max_size())
 __throw_length_error(("vector::reserve"));
      if (this->capacity() < __n)
 {
   _Bit_type* __q = this->_M_allocate(__n);
   this->_M_impl._M_finish = _M_copy_aligned(begin(), end(),
          iterator(__q, 0));
   this->_M_deallocate();
   this->_M_impl._M_start = iterator(__q, 0);
   this->_M_impl._M_end_of_storage = (__q + (__n + int(_S_word_bit) - 1)
          / int(_S_word_bit));
 }
    }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_fill_insert(iterator __position, size_type __n, bool __x)
    {
      if (__n == 0)
 return;
      if (capacity() - size() >= __n)
 {
   std::copy_backward(__position, end(),
        this->_M_impl._M_finish + difference_type(__n));
   std::fill(__position, __position + difference_type(__n), __x);
   this->_M_impl._M_finish += difference_type(__n);
 }
      else
 {
   const size_type __len =
     _M_check_len(__n, "vector<bool>::_M_fill_insert");
   _Bit_type * __q = this->_M_allocate(__len);
   iterator __i = _M_copy_aligned(begin(), __position,
      iterator(__q, 0));
   std::fill(__i, __i + difference_type(__n), __x);
   this->_M_impl._M_finish = std::copy(__position, end(),
           __i + difference_type(__n));
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = (__q + ((__len
           + int(_S_word_bit) - 1)
          / int(_S_word_bit)));
   this->_M_impl._M_start = iterator(__q, 0);
 }
    }

  template<typename _Alloc>
    template<typename _ForwardIterator>
      void
      vector<bool, _Alloc>::
      _M_insert_range(iterator __position, _ForwardIterator __first,
        _ForwardIterator __last, std::forward_iterator_tag)
      {
 if (__first != __last)
   {
     size_type __n = std::distance(__first, __last);
     if (capacity() - size() >= __n)
       {
  std::copy_backward(__position, end(),
       this->_M_impl._M_finish
       + difference_type(__n));
  std::copy(__first, __last, __position);
  this->_M_impl._M_finish += difference_type(__n);
       }
     else
       {
  const size_type __len =
    _M_check_len(__n, "vector<bool>::_M_insert_range");
  _Bit_type * __q = this->_M_allocate(__len);
  iterator __i = _M_copy_aligned(begin(), __position,
            iterator(__q, 0));
  __i = std::copy(__first, __last, __i);
  this->_M_impl._M_finish = std::copy(__position, end(), __i);
  this->_M_deallocate();
  this->_M_impl._M_end_of_storage = (__q
         + ((__len
             + int(_S_word_bit) - 1)
            / int(_S_word_bit)));
  this->_M_impl._M_start = iterator(__q, 0);
       }
   }
      }

  template<typename _Alloc>
    void
    vector<bool, _Alloc>::
    _M_insert_aux(iterator __position, bool __x)
    {
      if (this->_M_impl._M_finish._M_p != this->_M_impl._M_end_of_storage)
 {
   std::copy_backward(__position, this->_M_impl._M_finish,
        this->_M_impl._M_finish + 1);
   *__position = __x;
   ++this->_M_impl._M_finish;
 }
      else
 {
   const size_type __len =
     _M_check_len(size_type(1), "vector<bool>::_M_insert_aux");
   _Bit_type * __q = this->_M_allocate(__len);
   iterator __i = _M_copy_aligned(begin(), __position,
      iterator(__q, 0));
   *__i++ = __x;
   this->_M_impl._M_finish = std::copy(__position, end(), __i);
   this->_M_deallocate();
   this->_M_impl._M_end_of_storage = (__q + ((__len
           + int(_S_word_bit) - 1)
          / int(_S_word_bit)));
   this->_M_impl._M_start = iterator(__q, 0);
 }
    }

}
# 70 "/usr/include/c++/4.4/vector" 2 3
# 12 "lsystem.l" 2




# 1 "/usr/include/c++/4.4/map" 1 3
# 58 "/usr/include/c++/4.4/map" 3
       
# 59 "/usr/include/c++/4.4/map" 3

# 1 "/usr/include/c++/4.4/bits/stl_tree.h" 1 3
# 67 "/usr/include/c++/4.4/bits/stl_tree.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {
# 85 "/usr/include/c++/4.4/bits/stl_tree.h" 3
  enum _Rb_tree_color { _S_red = false, _S_black = true };

  struct _Rb_tree_node_base
  {
    typedef _Rb_tree_node_base* _Base_ptr;
    typedef const _Rb_tree_node_base* _Const_Base_ptr;

    _Rb_tree_color _M_color;
    _Base_ptr _M_parent;
    _Base_ptr _M_left;
    _Base_ptr _M_right;

    static _Base_ptr
    _S_minimum(_Base_ptr __x)
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Const_Base_ptr
    _S_minimum(_Const_Base_ptr __x)
    {
      while (__x->_M_left != 0) __x = __x->_M_left;
      return __x;
    }

    static _Base_ptr
    _S_maximum(_Base_ptr __x)
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }

    static _Const_Base_ptr
    _S_maximum(_Const_Base_ptr __x)
    {
      while (__x->_M_right != 0) __x = __x->_M_right;
      return __x;
    }
  };

  template<typename _Val>
    struct _Rb_tree_node : public _Rb_tree_node_base
    {
      typedef _Rb_tree_node<_Val>* _Link_type;
      _Val _M_value_field;







    };

  _Rb_tree_node_base*
  _Rb_tree_increment(_Rb_tree_node_base* __x);

  const _Rb_tree_node_base*
  _Rb_tree_increment(const _Rb_tree_node_base* __x);

  _Rb_tree_node_base*
  _Rb_tree_decrement(_Rb_tree_node_base* __x);

  const _Rb_tree_node_base*
  _Rb_tree_decrement(const _Rb_tree_node_base* __x);

  template<typename _Tp>
    struct _Rb_tree_iterator
    {
      typedef _Tp value_type;
      typedef _Tp& reference;
      typedef _Tp* pointer;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Base_ptr _Base_ptr;
      typedef _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_iterator()
      : _M_node() { }

      explicit
      _Rb_tree_iterator(_Link_type __x)
      : _M_node(__x) { }

      reference
      operator*() const
      { return static_cast<_Link_type>(_M_node)->_M_value_field; }

      pointer
      operator->() const
      { return &static_cast<_Link_type>(_M_node)->_M_value_field; }

      _Self&
      operator++()
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--()
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
  };

  template<typename _Tp>
    struct _Rb_tree_const_iterator
    {
      typedef _Tp value_type;
      typedef const _Tp& reference;
      typedef const _Tp* pointer;

      typedef _Rb_tree_iterator<_Tp> iterator;

      typedef bidirectional_iterator_tag iterator_category;
      typedef ptrdiff_t difference_type;

      typedef _Rb_tree_const_iterator<_Tp> _Self;
      typedef _Rb_tree_node_base::_Const_Base_ptr _Base_ptr;
      typedef const _Rb_tree_node<_Tp>* _Link_type;

      _Rb_tree_const_iterator()
      : _M_node() { }

      explicit
      _Rb_tree_const_iterator(_Link_type __x)
      : _M_node(__x) { }

      _Rb_tree_const_iterator(const iterator& __it)
      : _M_node(__it._M_node) { }

      reference
      operator*() const
      { return static_cast<_Link_type>(_M_node)->_M_value_field; }

      pointer
      operator->() const
      { return &static_cast<_Link_type>(_M_node)->_M_value_field; }

      _Self&
      operator++()
      {
 _M_node = _Rb_tree_increment(_M_node);
 return *this;
      }

      _Self
      operator++(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_increment(_M_node);
 return __tmp;
      }

      _Self&
      operator--()
      {
 _M_node = _Rb_tree_decrement(_M_node);
 return *this;
      }

      _Self
      operator--(int)
      {
 _Self __tmp = *this;
 _M_node = _Rb_tree_decrement(_M_node);
 return __tmp;
      }

      bool
      operator==(const _Self& __x) const
      { return _M_node == __x._M_node; }

      bool
      operator!=(const _Self& __x) const
      { return _M_node != __x._M_node; }

      _Base_ptr _M_node;
    };

  template<typename _Val>
    inline bool
    operator==(const _Rb_tree_iterator<_Val>& __x,
               const _Rb_tree_const_iterator<_Val>& __y)
    { return __x._M_node == __y._M_node; }

  template<typename _Val>
    inline bool
    operator!=(const _Rb_tree_iterator<_Val>& __x,
               const _Rb_tree_const_iterator<_Val>& __y)
    { return __x._M_node != __y._M_node; }

  void
  _Rb_tree_insert_and_rebalance(const bool __insert_left,
                                _Rb_tree_node_base* __x,
                                _Rb_tree_node_base* __p,
                                _Rb_tree_node_base& __header);

  _Rb_tree_node_base*
  _Rb_tree_rebalance_for_erase(_Rb_tree_node_base* const __z,
          _Rb_tree_node_base& __header);


  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc = allocator<_Val> >
    class _Rb_tree
    {
      typedef typename _Alloc::template rebind<_Rb_tree_node<_Val> >::other
              _Node_allocator;

    protected:
      typedef _Rb_tree_node_base* _Base_ptr;
      typedef const _Rb_tree_node_base* _Const_Base_ptr;

    public:
      typedef _Key key_type;
      typedef _Val value_type;
      typedef value_type* pointer;
      typedef const value_type* const_pointer;
      typedef value_type& reference;
      typedef const value_type& const_reference;
      typedef _Rb_tree_node<_Val>* _Link_type;
      typedef const _Rb_tree_node<_Val>* _Const_Link_type;
      typedef size_t size_type;
      typedef ptrdiff_t difference_type;
      typedef _Alloc allocator_type;

      _Node_allocator&
      _M_get_Node_allocator()
      { return *static_cast<_Node_allocator*>(&this->_M_impl); }

      const _Node_allocator&
      _M_get_Node_allocator() const
      { return *static_cast<const _Node_allocator*>(&this->_M_impl); }

      allocator_type
      get_allocator() const
      { return allocator_type(_M_get_Node_allocator()); }

    protected:
      _Link_type
      _M_get_node()
      { return _M_impl._Node_allocator::allocate(1); }

      void
      _M_put_node(_Link_type __p)
      { _M_impl._Node_allocator::deallocate(__p, 1); }


      _Link_type
      _M_create_node(const value_type& __x)
      {
 _Link_type __tmp = _M_get_node();
 try
   { get_allocator().construct(&__tmp->_M_value_field, __x); }
 catch(...)
   {
     _M_put_node(__tmp);
     throw;
   }
 return __tmp;
      }

      void
      _M_destroy_node(_Link_type __p)
      {
 get_allocator().destroy(&__p->_M_value_field);
 _M_put_node(__p);
      }
# 413 "/usr/include/c++/4.4/bits/stl_tree.h" 3
      _Link_type
      _M_clone_node(_Const_Link_type __x)
      {
 _Link_type __tmp = _M_create_node(__x->_M_value_field);
 __tmp->_M_color = __x->_M_color;
 __tmp->_M_left = 0;
 __tmp->_M_right = 0;
 return __tmp;
      }

    protected:
      template<typename _Key_compare,
        bool _Is_pod_comparator = __is_pod(_Key_compare)>
        struct _Rb_tree_impl : public _Node_allocator
        {
   _Key_compare _M_key_compare;
   _Rb_tree_node_base _M_header;
   size_type _M_node_count;

   _Rb_tree_impl()
   : _Node_allocator(), _M_key_compare(), _M_header(),
     _M_node_count(0)
   { _M_initialize(); }

   _Rb_tree_impl(const _Key_compare& __comp, const _Node_allocator& __a)
   : _Node_allocator(__a), _M_key_compare(__comp), _M_header(),
     _M_node_count(0)
   { _M_initialize(); }

 private:
   void
   _M_initialize()
   {
     this->_M_header._M_color = _S_red;
     this->_M_header._M_parent = 0;
     this->_M_header._M_left = &this->_M_header;
     this->_M_header._M_right = &this->_M_header;
   }
 };

      _Rb_tree_impl<_Compare> _M_impl;

    protected:
      _Base_ptr&
      _M_root()
      { return this->_M_impl._M_header._M_parent; }

      _Const_Base_ptr
      _M_root() const
      { return this->_M_impl._M_header._M_parent; }

      _Base_ptr&
      _M_leftmost()
      { return this->_M_impl._M_header._M_left; }

      _Const_Base_ptr
      _M_leftmost() const
      { return this->_M_impl._M_header._M_left; }

      _Base_ptr&
      _M_rightmost()
      { return this->_M_impl._M_header._M_right; }

      _Const_Base_ptr
      _M_rightmost() const
      { return this->_M_impl._M_header._M_right; }

      _Link_type
      _M_begin()
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }

      _Const_Link_type
      _M_begin() const
      {
 return static_cast<_Const_Link_type>
   (this->_M_impl._M_header._M_parent);
      }

      _Link_type
      _M_end()
      { return static_cast<_Link_type>(&this->_M_impl._M_header); }

      _Const_Link_type
      _M_end() const
      { return static_cast<_Const_Link_type>(&this->_M_impl._M_header); }

      static const_reference
      _S_value(_Const_Link_type __x)
      { return __x->_M_value_field; }

      static const _Key&
      _S_key(_Const_Link_type __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Link_type
      _S_left(_Base_ptr __x)
      { return static_cast<_Link_type>(__x->_M_left); }

      static _Const_Link_type
      _S_left(_Const_Base_ptr __x)
      { return static_cast<_Const_Link_type>(__x->_M_left); }

      static _Link_type
      _S_right(_Base_ptr __x)
      { return static_cast<_Link_type>(__x->_M_right); }

      static _Const_Link_type
      _S_right(_Const_Base_ptr __x)
      { return static_cast<_Const_Link_type>(__x->_M_right); }

      static const_reference
      _S_value(_Const_Base_ptr __x)
      { return static_cast<_Const_Link_type>(__x)->_M_value_field; }

      static const _Key&
      _S_key(_Const_Base_ptr __x)
      { return _KeyOfValue()(_S_value(__x)); }

      static _Base_ptr
      _S_minimum(_Base_ptr __x)
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Const_Base_ptr
      _S_minimum(_Const_Base_ptr __x)
      { return _Rb_tree_node_base::_S_minimum(__x); }

      static _Base_ptr
      _S_maximum(_Base_ptr __x)
      { return _Rb_tree_node_base::_S_maximum(__x); }

      static _Const_Base_ptr
      _S_maximum(_Const_Base_ptr __x)
      { return _Rb_tree_node_base::_S_maximum(__x); }

    public:
      typedef _Rb_tree_iterator<value_type> iterator;
      typedef _Rb_tree_const_iterator<value_type> const_iterator;

      typedef std::reverse_iterator<iterator> reverse_iterator;
      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

    private:
      iterator
      _M_insert_(_Const_Base_ptr __x, _Const_Base_ptr __y,
   const value_type& __v);



      iterator
      _M_insert_lower(_Base_ptr __x, _Base_ptr __y, const value_type& __v);

      iterator
      _M_insert_equal_lower(const value_type& __x);

      _Link_type
      _M_copy(_Const_Link_type __x, _Link_type __p);

      void
      _M_erase(_Link_type __x);

      iterator
      _M_lower_bound(_Link_type __x, _Link_type __y,
       const _Key& __k);

      const_iterator
      _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y,
       const _Key& __k) const;

      iterator
      _M_upper_bound(_Link_type __x, _Link_type __y,
       const _Key& __k);

      const_iterator
      _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y,
       const _Key& __k) const;

    public:

      _Rb_tree() { }

      _Rb_tree(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_impl(__comp, __a) { }

      _Rb_tree(const _Rb_tree& __x)
      : _M_impl(__x._M_impl._M_key_compare, __x._M_get_Node_allocator())
      {
 if (__x._M_root() != 0)
   {
     _M_root() = _M_copy(__x._M_begin(), _M_end());
     _M_leftmost() = _S_minimum(_M_root());
     _M_rightmost() = _S_maximum(_M_root());
     _M_impl._M_node_count = __x._M_impl._M_node_count;
   }
      }





      ~_Rb_tree()
      { _M_erase(_M_begin()); }

      _Rb_tree&
      operator=(const _Rb_tree& __x);


      _Compare
      key_comp() const
      { return _M_impl._M_key_compare; }

      iterator
      begin()
      {
 return iterator(static_cast<_Link_type>
   (this->_M_impl._M_header._M_left));
      }

      const_iterator
      begin() const
      {
 return const_iterator(static_cast<_Const_Link_type>
         (this->_M_impl._M_header._M_left));
      }

      iterator
      end()
      { return iterator(static_cast<_Link_type>(&this->_M_impl._M_header)); }

      const_iterator
      end() const
      {
 return const_iterator(static_cast<_Const_Link_type>
         (&this->_M_impl._M_header));
      }

      reverse_iterator
      rbegin()
      { return reverse_iterator(end()); }

      const_reverse_iterator
      rbegin() const
      { return const_reverse_iterator(end()); }

      reverse_iterator
      rend()
      { return reverse_iterator(begin()); }

      const_reverse_iterator
      rend() const
      { return const_reverse_iterator(begin()); }

      bool
      empty() const
      { return _M_impl._M_node_count == 0; }

      size_type
      size() const
      { return _M_impl._M_node_count; }

      size_type
      max_size() const
      { return _M_get_Node_allocator().max_size(); }

      void



      swap(_Rb_tree& __t);



      pair<iterator, bool>
      _M_insert_unique(const value_type& __x);

      iterator
      _M_insert_equal(const value_type& __x);

      iterator
      _M_insert_unique_(const_iterator __position, const value_type& __x);

      iterator
      _M_insert_equal_(const_iterator __position, const value_type& __x);

      template<typename _InputIterator>
        void
        _M_insert_unique(_InputIterator __first, _InputIterator __last);

      template<typename _InputIterator>
        void
        _M_insert_equal(_InputIterator __first, _InputIterator __last);

      void
      erase(iterator __position);

      void
      erase(const_iterator __position);

      size_type
      erase(const key_type& __x);

      void
      erase(iterator __first, iterator __last);

      void
      erase(const_iterator __first, const_iterator __last);

      void
      erase(const key_type* __first, const key_type* __last);

      void
      clear()
      {
        _M_erase(_M_begin());
        _M_leftmost() = _M_end();
        _M_root() = 0;
        _M_rightmost() = _M_end();
        _M_impl._M_node_count = 0;
      }


      iterator
      find(const key_type& __k);

      const_iterator
      find(const key_type& __k) const;

      size_type
      count(const key_type& __k) const;

      iterator
      lower_bound(const key_type& __k)
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      lower_bound(const key_type& __k) const
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }

      iterator
      upper_bound(const key_type& __k)
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      const_iterator
      upper_bound(const key_type& __k) const
      { return _M_upper_bound(_M_begin(), _M_end(), __k); }

      pair<iterator, iterator>
      equal_range(const key_type& __k);

      pair<const_iterator, const_iterator>
      equal_range(const key_type& __k) const;


      bool
      __rb_verify() const;
    };

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator==(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return __x.size() == __y.size()
      && std::equal(__x.begin(), __x.end(), __y.begin());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    {
      return std::lexicographical_compare(__x.begin(), __x.end(),
       __y.begin(), __y.end());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator!=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x == __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
       const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return __y < __x; }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator<=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__y < __x); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline bool
    operator>=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
        const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { return !(__x < __y); }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline void
    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x,
  _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __y)
    { __x.swap(__y); }
# 849 "/usr/include/c++/4.4/bits/stl_tree.h" 3
  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>&
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    operator=(const _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __x)
    {
      if (this != &__x)
 {

   clear();
   _M_impl._M_key_compare = __x._M_impl._M_key_compare;
   if (__x._M_root() != 0)
     {
       _M_root() = _M_copy(__x._M_begin(), _M_end());
       _M_leftmost() = _S_minimum(_M_root());
       _M_rightmost() = _S_maximum(_M_root());
       _M_impl._M_node_count = __x._M_impl._M_node_count;
     }
 }
      return *this;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_(_Const_Base_ptr __x, _Const_Base_ptr __p, const _Val& __v)
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
       || _M_impl._M_key_compare(_KeyOfValue()(__v),
            _S_key(__p)));

      _Link_type __z = _M_create_node(__v);

      _Rb_tree_insert_and_rebalance(__insert_left, __z,
        const_cast<_Base_ptr>(__p),
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_lower(_Base_ptr __x, _Base_ptr __p, const _Val& __v)
    {
      bool __insert_left = (__x != 0 || __p == _M_end()
       || !_M_impl._M_key_compare(_S_key(__p),
             _KeyOfValue()(__v)));

      _Link_type __z = _M_create_node(__v);

      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
        this->_M_impl._M_header);
      ++_M_impl._M_node_count;
      return iterator(__z);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_equal_lower(const _Val& __v)
    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = !_M_impl._M_key_compare(_S_key(__x), _KeyOfValue()(__v)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _M_insert_lower(__x, __y, __v);
    }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::_Link_type
    _Rb_tree<_Key, _Val, _KoV, _Compare, _Alloc>::
    _M_copy(_Const_Link_type __x, _Link_type __p)
    {

      _Link_type __top = _M_clone_node(__x);
      __top->_M_parent = __p;

      try
 {
   if (__x->_M_right)
     __top->_M_right = _M_copy(_S_right(__x), __top);
   __p = __top;
   __x = _S_left(__x);

   while (__x != 0)
     {
       _Link_type __y = _M_clone_node(__x);
       __p->_M_left = __y;
       __y->_M_parent = __p;
       if (__x->_M_right)
  __y->_M_right = _M_copy(_S_right(__x), __y);
       __p = __y;
       __x = _S_left(__x);
     }
 }
      catch(...)
 {
   _M_erase(__top);
   throw;
 }
      return __top;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_erase(_Link_type __x)
    {

      while (__x != 0)
 {
   _M_erase(_S_right(__x));
   _Link_type __y = _S_left(__x);
   _M_destroy_node(__x);
   __x = __y;
 }
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Link_type __x, _Link_type __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_lower_bound(_Const_Link_type __x, _Const_Link_type __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (!_M_impl._M_key_compare(_S_key(__x), __k))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Link_type __x, _Link_type __y,
     const _Key& __k)
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_upper_bound(_Const_Link_type __x, _Const_Link_type __y,
     const _Key& __k) const
    {
      while (__x != 0)
 if (_M_impl._M_key_compare(__k, _S_key(__x)))
   __y = __x, __x = _S_left(__x);
 else
   __x = _S_right(__x);
      return const_iterator(__y);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k)
    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Link_type __xu(__x), __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<iterator,
            iterator>(_M_lower_bound(__x, __y, __k),
        _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<iterator, iterator>(iterator(__y),
          iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator,
  typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::const_iterator>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    equal_range(const _Key& __k) const
    {
      _Const_Link_type __x = _M_begin();
      _Const_Link_type __y = _M_end();
      while (__x != 0)
 {
   if (_M_impl._M_key_compare(_S_key(__x), __k))
     __x = _S_right(__x);
   else if (_M_impl._M_key_compare(__k, _S_key(__x)))
     __y = __x, __x = _S_left(__x);
   else
     {
       _Const_Link_type __xu(__x), __yu(__y);
       __y = __x, __x = _S_left(__x);
       __xu = _S_right(__xu);
       return pair<const_iterator,
            const_iterator>(_M_lower_bound(__x, __y, __k),
       _M_upper_bound(__xu, __yu, __k));
     }
 }
      return pair<const_iterator, const_iterator>(const_iterator(__y),
        const_iterator(__y));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::



    swap(_Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>& __t)

    {
      if (_M_root() == 0)
 {
   if (__t._M_root() != 0)
     {
       _M_root() = __t._M_root();
       _M_leftmost() = __t._M_leftmost();
       _M_rightmost() = __t._M_rightmost();
       _M_root()->_M_parent = _M_end();

       __t._M_root() = 0;
       __t._M_leftmost() = __t._M_end();
       __t._M_rightmost() = __t._M_end();
     }
 }
      else if (__t._M_root() == 0)
 {
   __t._M_root() = _M_root();
   __t._M_leftmost() = _M_leftmost();
   __t._M_rightmost() = _M_rightmost();
   __t._M_root()->_M_parent = __t._M_end();

   _M_root() = 0;
   _M_leftmost() = _M_end();
   _M_rightmost() = _M_end();
 }
      else
 {
   std::swap(_M_root(),__t._M_root());
   std::swap(_M_leftmost(),__t._M_leftmost());
   std::swap(_M_rightmost(),__t._M_rightmost());

   _M_root()->_M_parent = _M_end();
   __t._M_root()->_M_parent = __t._M_end();
 }

      std::swap(this->_M_impl._M_node_count, __t._M_impl._M_node_count);
      std::swap(this->_M_impl._M_key_compare, __t._M_impl._M_key_compare);



      std::__alloc_swap<_Node_allocator>::
 _S_do_it(_M_get_Node_allocator(), __t._M_get_Node_allocator());
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    pair<typename _Rb_tree<_Key, _Val, _KeyOfValue,
      _Compare, _Alloc>::iterator, bool>
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_unique(const _Val& __v)
    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      bool __comp = true;
      while (__x != 0)
 {
   __y = __x;
   __comp = _M_impl._M_key_compare(_KeyOfValue()(__v), _S_key(__x));
   __x = __comp ? _S_left(__x) : _S_right(__x);
 }
      iterator __j = iterator(__y);
      if (__comp)
 {
   if (__j == begin())
     return pair<iterator, bool>(_M_insert_(__x, __y, __v), true);
   else
     --__j;
 }
      if (_M_impl._M_key_compare(_S_key(__j._M_node), _KeyOfValue()(__v)))
 return pair<iterator, bool>(_M_insert_(__x, __y, __v), true);
      return pair<iterator, bool>(__j, false);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_equal(const _Val& __v)
    {
      _Link_type __x = _M_begin();
      _Link_type __y = _M_end();
      while (__x != 0)
 {
   __y = __x;
   __x = _M_impl._M_key_compare(_KeyOfValue()(__v), _S_key(__x)) ?
         _S_left(__x) : _S_right(__x);
 }
      return _M_insert_(__x, __y, __v);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_unique_(const_iterator __position, const _Val& __v)
    {

      if (__position._M_node == _M_end())
 {
   if (size() > 0
       && _M_impl._M_key_compare(_S_key(_M_rightmost()),
     _KeyOfValue()(__v)))
     return _M_insert_(0, _M_rightmost(), __v);
   else
     return _M_insert_unique(__v).first;
 }
      else if (_M_impl._M_key_compare(_KeyOfValue()(__v),
          _S_key(__position._M_node)))
 {

   const_iterator __before = __position;
   if (__position._M_node == _M_leftmost())
     return _M_insert_(_M_leftmost(), _M_leftmost(), __v);
   else if (_M_impl._M_key_compare(_S_key((--__before)._M_node),
       _KeyOfValue()(__v)))
     {
       if (_S_right(__before._M_node) == 0)
  return _M_insert_(0, __before._M_node, __v);
       else
  return _M_insert_(__position._M_node,
      __position._M_node, __v);
     }
   else
     return _M_insert_unique(__v).first;
 }
      else if (_M_impl._M_key_compare(_S_key(__position._M_node),
          _KeyOfValue()(__v)))
 {

   const_iterator __after = __position;
   if (__position._M_node == _M_rightmost())
     return _M_insert_(0, _M_rightmost(), __v);
   else if (_M_impl._M_key_compare(_KeyOfValue()(__v),
       _S_key((++__after)._M_node)))
     {
       if (_S_right(__position._M_node) == 0)
  return _M_insert_(0, __position._M_node, __v);
       else
  return _M_insert_(__after._M_node, __after._M_node, __v);
     }
   else
     return _M_insert_unique(__v).first;
 }
      else

 return iterator(static_cast<_Link_type>
   (const_cast<_Base_ptr>(__position._M_node)));
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    _M_insert_equal_(const_iterator __position, const _Val& __v)
    {

      if (__position._M_node == _M_end())
 {
   if (size() > 0
       && !_M_impl._M_key_compare(_KeyOfValue()(__v),
      _S_key(_M_rightmost())))
     return _M_insert_(0, _M_rightmost(), __v);
   else
     return _M_insert_equal(__v);
 }
      else if (!_M_impl._M_key_compare(_S_key(__position._M_node),
           _KeyOfValue()(__v)))
 {

   const_iterator __before = __position;
   if (__position._M_node == _M_leftmost())
     return _M_insert_(_M_leftmost(), _M_leftmost(), __v);
   else if (!_M_impl._M_key_compare(_KeyOfValue()(__v),
        _S_key((--__before)._M_node)))
     {
       if (_S_right(__before._M_node) == 0)
  return _M_insert_(0, __before._M_node, __v);
       else
  return _M_insert_(__position._M_node,
      __position._M_node, __v);
     }
   else
     return _M_insert_equal(__v);
 }
      else
 {

   const_iterator __after = __position;
   if (__position._M_node == _M_rightmost())
     return _M_insert_(0, _M_rightmost(), __v);
   else if (!_M_impl._M_key_compare(_S_key((++__after)._M_node),
        _KeyOfValue()(__v)))
     {
       if (_S_right(__position._M_node) == 0)
  return _M_insert_(0, __position._M_node, __v);
       else
  return _M_insert_(__after._M_node, __after._M_node, __v);
     }
   else
     return _M_insert_equal_lower(__v);
 }
    }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_unique(_II __first, _II __last)
      {
 for (; __first != __last; ++__first)
   _M_insert_unique_(end(), *__first);
      }

  template<typename _Key, typename _Val, typename _KoV,
           typename _Cmp, typename _Alloc>
    template<class _II>
      void
      _Rb_tree<_Key, _Val, _KoV, _Cmp, _Alloc>::
      _M_insert_equal(_II __first, _II __last)
      {
 for (; __first != __last; ++__first)
   _M_insert_equal_(end(), *__first);
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(iterator __position)
    {
      _Link_type __y =
 static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
    (__position._M_node,
     this->_M_impl._M_header));
      _M_destroy_node(__y);
      --_M_impl._M_node_count;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    inline void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const_iterator __position)
    {
      _Link_type __y =
 static_cast<_Link_type>(_Rb_tree_rebalance_for_erase
    (const_cast<_Base_ptr>(__position._M_node),
     this->_M_impl._M_header));
      _M_destroy_node(__y);
      --_M_impl._M_node_count;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key& __x)
    {
      pair<iterator, iterator> __p = equal_range(__x);
      const size_type __old_size = size();
      erase(__p.first, __p.second);
      return __old_size - size();
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(iterator __first, iterator __last)
    {
      if (__first == begin() && __last == end())
 clear();
      else
 while (__first != __last)
   erase(__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const_iterator __first, const_iterator __last)
    {
      if (__first == begin() && __last == end())
 clear();
      else
 while (__first != __last)
   erase(__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    erase(const _Key* __first, const _Key* __last)
    {
      while (__first != __last)
 erase(*__first++);
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
        _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
       || _M_impl._M_key_compare(__k,
     _S_key(__j._M_node))) ? end() : __j;
    }

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::size_type
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
    count(const _Key& __k) const
    {
      pair<const_iterator, const_iterator> __p = equal_range(__k);
      const size_type __n = std::distance(__p.first, __p.second);
      return __n;
    }

  unsigned int
  _Rb_tree_black_count(const _Rb_tree_node_base* __node,
                       const _Rb_tree_node_base* __root);

  template<typename _Key, typename _Val, typename _KeyOfValue,
           typename _Compare, typename _Alloc>
    bool
    _Rb_tree<_Key,_Val,_KeyOfValue,_Compare,_Alloc>::__rb_verify() const
    {
      if (_M_impl._M_node_count == 0 || begin() == end())
 return _M_impl._M_node_count == 0 && begin() == end()
        && this->_M_impl._M_header._M_left == _M_end()
        && this->_M_impl._M_header._M_right == _M_end();

      unsigned int __len = _Rb_tree_black_count(_M_leftmost(), _M_root());
      for (const_iterator __it = begin(); __it != end(); ++__it)
 {
   _Const_Link_type __x = static_cast<_Const_Link_type>(__it._M_node);
   _Const_Link_type __L = _S_left(__x);
   _Const_Link_type __R = _S_right(__x);

   if (__x->_M_color == _S_red)
     if ((__L && __L->_M_color == _S_red)
  || (__R && __R->_M_color == _S_red))
       return false;

   if (__L && _M_impl._M_key_compare(_S_key(__x), _S_key(__L)))
     return false;
   if (__R && _M_impl._M_key_compare(_S_key(__R), _S_key(__x)))
     return false;

   if (!__L && !__R && _Rb_tree_black_count(__x, _M_root()) != __len)
     return false;
 }

      if (_M_leftmost() != _Rb_tree_node_base::_S_minimum(_M_root()))
 return false;
      if (_M_rightmost() != _Rb_tree_node_base::_S_maximum(_M_root()))
 return false;
      return true;
    }

}
# 61 "/usr/include/c++/4.4/map" 2 3
# 1 "/usr/include/c++/4.4/bits/stl_map.h" 1 3
# 64 "/usr/include/c++/4.4/bits/stl_map.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {
# 84 "/usr/include/c++/4.4/bits/stl_map.h" 3
  template <typename _Key, typename _Tp, typename _Compare = std::less<_Key>,
            typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class map
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:

      typedef typename _Alloc::value_type _Alloc_value_type;
     
     

     

    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class map<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename _Alloc::template rebind<value_type>::other
        _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;


      _Rep_type _M_t;

    public:


      typedef typename _Pair_alloc_type::pointer pointer;
      typedef typename _Pair_alloc_type::const_pointer const_pointer;
      typedef typename _Pair_alloc_type::reference reference;
      typedef typename _Pair_alloc_type::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;







      map()
      : _M_t() { }






      explicit
      map(const _Compare& __comp,
   const allocator_type& __a = allocator_type())
      : _M_t(__comp, __a) { }
# 170 "/usr/include/c++/4.4/bits/stl_map.h" 3
      map(const map& __x)
      : _M_t(__x._M_t) { }
# 211 "/usr/include/c++/4.4/bits/stl_map.h" 3
      template<typename _InputIterator>
        map(_InputIterator __first, _InputIterator __last)
 : _M_t()
        { _M_t._M_insert_unique(__first, __last); }
# 227 "/usr/include/c++/4.4/bits/stl_map.h" 3
      template<typename _InputIterator>
        map(_InputIterator __first, _InputIterator __last,
     const _Compare& __comp,
     const allocator_type& __a = allocator_type())
 : _M_t(__comp, __a)
        { _M_t._M_insert_unique(__first, __last); }
# 250 "/usr/include/c++/4.4/bits/stl_map.h" 3
      map&
      operator=(const map& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }
# 295 "/usr/include/c++/4.4/bits/stl_map.h" 3
      allocator_type
      get_allocator() const
      { return _M_t.get_allocator(); }







      iterator
      begin()
      { return _M_t.begin(); }






      const_iterator
      begin() const
      { return _M_t.begin(); }






      iterator
      end()
      { return _M_t.end(); }






      const_iterator
      end() const
      { return _M_t.end(); }






      reverse_iterator
      rbegin()
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const
      { return _M_t.rbegin(); }






      reverse_iterator
      rend()
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const
      { return _M_t.rend(); }
# 414 "/usr/include/c++/4.4/bits/stl_map.h" 3
      bool
      empty() const
      { return _M_t.empty(); }


      size_type
      size() const
      { return _M_t.size(); }


      size_type
      max_size() const
      { return _M_t.max_size(); }
# 441 "/usr/include/c++/4.4/bits/stl_map.h" 3
      mapped_type&
      operator[](const key_type& __k)
      {



 iterator __i = lower_bound(__k);

 if (__i == end() || key_comp()(__k, (*__i).first))
          __i = insert(__i, value_type(__k, mapped_type()));
 return (*__i).second;
      }
# 463 "/usr/include/c++/4.4/bits/stl_map.h" 3
      mapped_type&
      at(const key_type& __k)
      {
 iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }

      const mapped_type&
      at(const key_type& __k) const
      {
 const_iterator __i = lower_bound(__k);
 if (__i == end() || key_comp()(__k, (*__i).first))
   __throw_out_of_range(("map::at"));
 return (*__i).second;
      }
# 498 "/usr/include/c++/4.4/bits/stl_map.h" 3
      std::pair<iterator, bool>
      insert(const value_type& __x)
      { return _M_t._M_insert_unique(__x); }
# 538 "/usr/include/c++/4.4/bits/stl_map.h" 3
      iterator
      insert(iterator __position, const value_type& __x)
      { return _M_t._M_insert_unique_(__position, __x); }
# 550 "/usr/include/c++/4.4/bits/stl_map.h" 3
      template<typename _InputIterator>
        void
        insert(_InputIterator __first, _InputIterator __last)
        { _M_t._M_insert_unique(__first, __last); }
# 565 "/usr/include/c++/4.4/bits/stl_map.h" 3
      void
      erase(iterator __position)
      { _M_t.erase(__position); }
# 580 "/usr/include/c++/4.4/bits/stl_map.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 595 "/usr/include/c++/4.4/bits/stl_map.h" 3
      void
      erase(iterator __first, iterator __last)
      { _M_t.erase(__first, __last); }
# 610 "/usr/include/c++/4.4/bits/stl_map.h" 3
      void



      swap(map& __x)

      { _M_t.swap(__x._M_t); }







      void
      clear()
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 657 "/usr/include/c++/4.4/bits/stl_map.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }
# 672 "/usr/include/c++/4.4/bits/stl_map.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }
# 684 "/usr/include/c++/4.4/bits/stl_map.h" 3
      size_type
      count(const key_type& __x) const
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
# 699 "/usr/include/c++/4.4/bits/stl_map.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }
# 714 "/usr/include/c++/4.4/bits/stl_map.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }







      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }







      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 753 "/usr/include/c++/4.4/bits/stl_map.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }
# 772 "/usr/include/c++/4.4/bits/stl_map.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator==(const map<_K1, _T1, _C1, _A1>&,
     const map<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator<(const map<_K1, _T1, _C1, _A1>&,
    const map<_K1, _T1, _C1, _A1>&);
    };
# 797 "/usr/include/c++/4.4/bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 814 "/usr/include/c++/4.4/bits/stl_map.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const map<_Key, _Tp, _Compare, _Alloc>& __x,
              const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const map<_Key, _Tp, _Compare, _Alloc>& __x,
              const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const map<_Key, _Tp, _Compare, _Alloc>& __x,
               const map<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(map<_Key, _Tp, _Compare, _Alloc>& __x,
  map<_Key, _Tp, _Compare, _Alloc>& __y)
    { __x.swap(__y); }
# 869 "/usr/include/c++/4.4/bits/stl_map.h" 3
}
# 62 "/usr/include/c++/4.4/map" 2 3
# 1 "/usr/include/c++/4.4/bits/stl_multimap.h" 1 3
# 63 "/usr/include/c++/4.4/bits/stl_multimap.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {
# 83 "/usr/include/c++/4.4/bits/stl_multimap.h" 3
  template <typename _Key, typename _Tp,
     typename _Compare = std::less<_Key>,
     typename _Alloc = std::allocator<std::pair<const _Key, _Tp> > >
    class multimap
    {
    public:
      typedef _Key key_type;
      typedef _Tp mapped_type;
      typedef std::pair<const _Key, _Tp> value_type;
      typedef _Compare key_compare;
      typedef _Alloc allocator_type;

    private:

      typedef typename _Alloc::value_type _Alloc_value_type;
     
     

     

    public:
      class value_compare
      : public std::binary_function<value_type, value_type, bool>
      {
 friend class multimap<_Key, _Tp, _Compare, _Alloc>;
      protected:
 _Compare comp;

 value_compare(_Compare __c)
 : comp(__c) { }

      public:
 bool operator()(const value_type& __x, const value_type& __y) const
 { return comp(__x.first, __y.first); }
      };

    private:

      typedef typename _Alloc::template rebind<value_type>::other
        _Pair_alloc_type;

      typedef _Rb_tree<key_type, value_type, _Select1st<value_type>,
         key_compare, _Pair_alloc_type> _Rep_type;

      _Rep_type _M_t;

    public:


      typedef typename _Pair_alloc_type::pointer pointer;
      typedef typename _Pair_alloc_type::const_pointer const_pointer;
      typedef typename _Pair_alloc_type::reference reference;
      typedef typename _Pair_alloc_type::const_reference const_reference;
      typedef typename _Rep_type::iterator iterator;
      typedef typename _Rep_type::const_iterator const_iterator;
      typedef typename _Rep_type::size_type size_type;
      typedef typename _Rep_type::difference_type difference_type;
      typedef typename _Rep_type::reverse_iterator reverse_iterator;
      typedef typename _Rep_type::const_reverse_iterator const_reverse_iterator;






      multimap()
      : _M_t() { }






      explicit
      multimap(const _Compare& __comp,
        const allocator_type& __a = allocator_type())
      : _M_t(__comp, __a) { }
# 168 "/usr/include/c++/4.4/bits/stl_multimap.h" 3
      multimap(const multimap& __x)
      : _M_t(__x._M_t) { }
# 208 "/usr/include/c++/4.4/bits/stl_multimap.h" 3
      template<typename _InputIterator>
        multimap(_InputIterator __first, _InputIterator __last)
 : _M_t()
        { _M_t._M_insert_equal(__first, __last); }
# 224 "/usr/include/c++/4.4/bits/stl_multimap.h" 3
      template<typename _InputIterator>
        multimap(_InputIterator __first, _InputIterator __last,
   const _Compare& __comp,
   const allocator_type& __a = allocator_type())
        : _M_t(__comp, __a)
        { _M_t._M_insert_equal(__first, __last); }
# 247 "/usr/include/c++/4.4/bits/stl_multimap.h" 3
      multimap&
      operator=(const multimap& __x)
      {
 _M_t = __x._M_t;
 return *this;
      }
# 292 "/usr/include/c++/4.4/bits/stl_multimap.h" 3
      allocator_type
      get_allocator() const
      { return _M_t.get_allocator(); }







      iterator
      begin()
      { return _M_t.begin(); }






      const_iterator
      begin() const
      { return _M_t.begin(); }






      iterator
      end()
      { return _M_t.end(); }






      const_iterator
      end() const
      { return _M_t.end(); }






      reverse_iterator
      rbegin()
      { return _M_t.rbegin(); }






      const_reverse_iterator
      rbegin() const
      { return _M_t.rbegin(); }






      reverse_iterator
      rend()
      { return _M_t.rend(); }






      const_reverse_iterator
      rend() const
      { return _M_t.rend(); }
# 409 "/usr/include/c++/4.4/bits/stl_multimap.h" 3
      bool
      empty() const
      { return _M_t.empty(); }


      size_type
      size() const
      { return _M_t.size(); }


      size_type
      max_size() const
      { return _M_t.max_size(); }
# 436 "/usr/include/c++/4.4/bits/stl_multimap.h" 3
      iterator
      insert(const value_type& __x)
      { return _M_t._M_insert_equal(__x); }
# 460 "/usr/include/c++/4.4/bits/stl_multimap.h" 3
      iterator
      insert(iterator __position, const value_type& __x)
      { return _M_t._M_insert_equal_(__position, __x); }
# 473 "/usr/include/c++/4.4/bits/stl_multimap.h" 3
      template<typename _InputIterator>
        void
        insert(_InputIterator __first, _InputIterator __last)
        { _M_t._M_insert_equal(__first, __last); }
# 501 "/usr/include/c++/4.4/bits/stl_multimap.h" 3
      void
      erase(iterator __position)
      { _M_t.erase(__position); }
# 516 "/usr/include/c++/4.4/bits/stl_multimap.h" 3
      size_type
      erase(const key_type& __x)
      { return _M_t.erase(__x); }
# 531 "/usr/include/c++/4.4/bits/stl_multimap.h" 3
      void
      erase(iterator __first, iterator __last)
      { _M_t.erase(__first, __last); }
# 546 "/usr/include/c++/4.4/bits/stl_multimap.h" 3
      void



      swap(multimap& __x)

      { _M_t.swap(__x._M_t); }







      void
      clear()
      { _M_t.clear(); }






      key_compare
      key_comp() const
      { return _M_t.key_comp(); }





      value_compare
      value_comp() const
      { return value_compare(_M_t.key_comp()); }
# 593 "/usr/include/c++/4.4/bits/stl_multimap.h" 3
      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }
# 608 "/usr/include/c++/4.4/bits/stl_multimap.h" 3
      const_iterator
      find(const key_type& __x) const
      { return _M_t.find(__x); }






      size_type
      count(const key_type& __x) const
      { return _M_t.count(__x); }
# 632 "/usr/include/c++/4.4/bits/stl_multimap.h" 3
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }
# 647 "/usr/include/c++/4.4/bits/stl_multimap.h" 3
      const_iterator
      lower_bound(const key_type& __x) const
      { return _M_t.lower_bound(__x); }







      iterator
      upper_bound(const key_type& __x)
      { return _M_t.upper_bound(__x); }







      const_iterator
      upper_bound(const key_type& __x) const
      { return _M_t.upper_bound(__x); }
# 684 "/usr/include/c++/4.4/bits/stl_multimap.h" 3
      std::pair<iterator, iterator>
      equal_range(const key_type& __x)
      { return _M_t.equal_range(__x); }
# 701 "/usr/include/c++/4.4/bits/stl_multimap.h" 3
      std::pair<const_iterator, const_iterator>
      equal_range(const key_type& __x) const
      { return _M_t.equal_range(__x); }

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator==(const multimap<_K1, _T1, _C1, _A1>&,
     const multimap<_K1, _T1, _C1, _A1>&);

      template<typename _K1, typename _T1, typename _C1, typename _A1>
        friend bool
        operator<(const multimap<_K1, _T1, _C1, _A1>&,
    const multimap<_K1, _T1, _C1, _A1>&);
  };
# 726 "/usr/include/c++/4.4/bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator==(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t == __y._M_t; }
# 743 "/usr/include/c++/4.4/bits/stl_multimap.h" 3
  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
              const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __x._M_t < __y._M_t; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator!=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x == __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
              const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return __y < __x; }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator<=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__y < __x); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline bool
    operator>=(const multimap<_Key, _Tp, _Compare, _Alloc>& __x,
               const multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { return !(__x < __y); }


  template<typename _Key, typename _Tp, typename _Compare, typename _Alloc>
    inline void
    swap(multimap<_Key, _Tp, _Compare, _Alloc>& __x,
         multimap<_Key, _Tp, _Compare, _Alloc>& __y)
    { __x.swap(__y); }
# 798 "/usr/include/c++/4.4/bits/stl_multimap.h" 3
}
# 63 "/usr/include/c++/4.4/map" 2 3
# 17 "lsystem.l" 2

using namespace std;
using std::max;
using std::min;

# 1 "env.hpp" 1


# 1 "/usr/include/c++/4.4/algorithm" 1 3
# 59 "/usr/include/c++/4.4/algorithm" 3
       
# 60 "/usr/include/c++/4.4/algorithm" 3


# 1 "/usr/include/c++/4.4/bits/stl_algo.h" 1 3
# 60 "/usr/include/c++/4.4/bits/stl_algo.h" 3
# 1 "/usr/include/c++/4.4/cstdlib" 1 3
# 41 "/usr/include/c++/4.4/cstdlib" 3
       
# 42 "/usr/include/c++/4.4/cstdlib" 3


# 1 "/usr/include/c++/4.4/cstddef" 1 3
# 41 "/usr/include/c++/4.4/cstddef" 3
       
# 42 "/usr/include/c++/4.4/cstddef" 3


# 1 "/usr/lib/gcc/x86_64-linux-gnu/4.4.3/include/stddef.h" 1 3 4
# 45 "/usr/include/c++/4.4/cstddef" 2 3
# 45 "/usr/include/c++/4.4/cstdlib" 2 3
# 100 "/usr/include/c++/4.4/cstdlib" 3
namespace std __attribute__ ((__visibility__ ("default"))) {

  using ::div_t;
  using ::ldiv_t;

  using ::abort;
  using ::abs;
  using ::atexit;
  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;
  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;


  inline long
  abs(long __i) { return labs(__i); }

  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }

}
# 157 "/usr/include/c++/4.4/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default"))) {


  using ::lldiv_t;





  using ::_Exit;


  inline long long
  abs(long long __x) { return __x >= 0 ? __x : -__x; }


  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 190 "/usr/include/c++/4.4/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;

}

namespace std __attribute__ ((__visibility__ ("default"))) {


  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;
  using ::__gnu_cxx::abs;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;

}
# 61 "/usr/include/c++/4.4/bits/stl_algo.h" 2 3
# 1 "/usr/include/c++/4.4/bits/algorithmfwd.h" 1 3
# 33 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
       
# 34 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3






namespace std __attribute__ ((__visibility__ ("default"))) {
# 198 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
  template<typename _FIter, typename _Tp>
    bool
    binary_search(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    bool
    binary_search(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _IIter, typename _OIter>
    _OIter
    copy(_IIter, _IIter, _OIter);

  template<typename _BIter1, typename _BIter2>
    _BIter2
    copy_backward(_BIter1, _BIter1, _BIter2);
# 227 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
  template<typename _FIter, typename _Tp>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    pair<_FIter, _FIter>
    equal_range(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _FIter, typename _Tp>
    void
    fill(_FIter, _FIter, const _Tp&);
# 246 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
  template<typename _OIter, typename _Size, typename _Tp>
    _OIter
    fill_n(_OIter, _Size, const _Tp&);



  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_end(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);
# 273 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
  template<typename _IIter1, typename _IIter2>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    includes(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _BIter>
    void
    inplace_merge(_BIter, _BIter, _BIter);

  template<typename _BIter, typename _Compare>
    void
    inplace_merge(_BIter, _BIter, _BIter, _Compare);
# 327 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
  template<typename _FIter1, typename _FIter2>
    void
    iter_swap(_FIter1, _FIter2);

  template<typename _FIter, typename _Tp>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    lower_bound(_FIter, _FIter, const _Tp&, _Compare);

  template<typename _RAIter>
    void
    make_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    make_heap(_RAIter, _RAIter, _Compare);

  template<typename _Tp>
    const _Tp&
    max(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    const _Tp&
    max(const _Tp&, const _Tp&, _Compare);




  template<typename _Tp>
    const _Tp&
    min(const _Tp&, const _Tp&);

  template<typename _Tp, typename _Compare>
    const _Tp&
    min(const _Tp&, const _Tp&, _Compare);
# 412 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
  template<typename _BIter>
    bool
    next_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    next_permutation(_BIter, _BIter, _Compare);
# 429 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
  template<typename _IIter, typename _RAIter>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter);

  template<typename _IIter, typename _RAIter, typename _Compare>
    _RAIter
    partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare);
# 450 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
  template<typename _RAIter>
    void
    pop_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    pop_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter>
    bool
    prev_permutation(_BIter, _BIter);

  template<typename _BIter, typename _Compare>
    bool
    prev_permutation(_BIter, _BIter, _Compare);

  template<typename _RAIter>
    void
    push_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    push_heap(_RAIter, _RAIter, _Compare);



  template<typename _FIter, typename _Tp>
    _FIter
    remove(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Predicate>
    _FIter
    remove_if(_FIter, _FIter, _Predicate);

  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    remove_copy(_IIter, _IIter, _OIter, const _Tp&);

  template<typename _IIter, typename _OIter, typename _Predicate>
    _OIter
    remove_copy_if(_IIter, _IIter, _OIter, _Predicate);



  template<typename _IIter, typename _OIter, typename _Tp>
    _OIter
    replace_copy(_IIter, _IIter, _OIter, const _Tp&, const _Tp&);

  template<typename _Iter, typename _OIter, typename _Predicate, typename _Tp>
    _OIter
    replace_copy_if(_Iter, _Iter, _OIter, _Predicate, const _Tp&);



  template<typename _BIter>
    void
    reverse(_BIter, _BIter);

  template<typename _BIter, typename _OIter>
    _OIter
    reverse_copy(_BIter, _BIter, _OIter);

  template<typename _FIter>
    void
    rotate(_FIter, _FIter, _FIter);

  template<typename _FIter, typename _OIter>
    _OIter
    rotate_copy(_FIter, _FIter, _FIter, _OIter);
# 527 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
  template<typename _RAIter>
    void
    sort_heap(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort_heap(_RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    stable_partition(_BIter, _BIter, _Predicate);

  template<typename _Tp>
    void
    swap(_Tp&, _Tp&);

  template<typename _Tp, size_t _Nm>
    void
    swap(_Tp (&)[_Nm], _Tp (&)[_Nm]);

  template<typename _FIter1, typename _FIter2>
    _FIter2
    swap_ranges(_FIter1, _FIter1, _FIter2);



  template<typename _FIter>
    _FIter
    unique(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    unique(_FIter, _FIter, _BinaryPredicate);



  template<typename _FIter, typename _Tp>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&);

  template<typename _FIter, typename _Tp, typename _Compare>
    _FIter
    upper_bound(_FIter, _FIter, const _Tp&, _Compare);

}

namespace std __attribute__ ((__visibility__ ("default"))) {

  template<typename _FIter>
    _FIter
    adjacent_find(_FIter, _FIter);

  template<typename _FIter, typename _BinaryPredicate>
    _FIter
    adjacent_find(_FIter, _FIter, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    typename iterator_traits<_IIter>::difference_type
    count(_IIter, _IIter, const _Tp&);

  template<typename _IIter, typename _Predicate>
    typename iterator_traits<_IIter>::difference_type
    count_if(_IIter, _IIter, _Predicate);

  template<typename _IIter1, typename _IIter2>
    bool
    equal(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    bool
    equal(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _IIter, typename _Tp>
    _IIter
    find(_IIter, _IIter, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    find_first_of(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _IIter, typename _Predicate>
    _IIter
    find_if(_IIter, _IIter, _Predicate);

  template<typename _IIter, typename _Funct>
    _Funct
    for_each(_IIter, _IIter, _Funct);

  template<typename _FIter, typename _Generator>
    void
    generate(_FIter, _FIter, _Generator);
# 630 "/usr/include/c++/4.4/bits/algorithmfwd.h" 3
  template<typename _OIter, typename _Size, typename _Generator>
    _OIter
    generate_n(_OIter, _Size, _Generator);

  template<typename _IIter1, typename _IIter2>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _Compare>
    bool
    lexicographical_compare(_IIter1, _IIter1, _IIter2, _IIter2, _Compare);

  template<typename _FIter>
    _FIter
    max_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    max_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    merge(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _FIter>
    _FIter
    min_element(_FIter, _FIter);

  template<typename _FIter, typename _Compare>
    _FIter
    min_element(_FIter, _FIter, _Compare);

  template<typename _IIter1, typename _IIter2>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2);

  template<typename _IIter1, typename _IIter2, typename _BinaryPredicate>
    pair<_IIter1, _IIter2>
    mismatch(_IIter1, _IIter1, _IIter2, _BinaryPredicate);

  template<typename _RAIter>
    void
    nth_element(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    nth_element(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    partial_sort(_RAIter, _RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    partial_sort(_RAIter, _RAIter, _RAIter, _Compare);

  template<typename _BIter, typename _Predicate>
    _BIter
    partition(_BIter, _BIter, _Predicate);

  template<typename _RAIter>
    void
    random_shuffle(_RAIter, _RAIter);

  template<typename _RAIter, typename _Generator>
    void
    random_shuffle(_RAIter, _RAIter, _Generator&);

  template<typename _FIter, typename _Tp>
    void
    replace(_FIter, _FIter, const _Tp&, const _Tp&);

  template<typename _FIter, typename _Predicate, typename _Tp>
    void
    replace_if(_FIter, _FIter, _Predicate, const _Tp&);

  template<typename _FIter1, typename _FIter2>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2);

  template<typename _FIter1, typename _FIter2, typename _BinaryPredicate>
    _FIter1
    search(_FIter1, _FIter1, _FIter2, _FIter2, _BinaryPredicate);

  template<typename _FIter, typename _Size, typename _Tp>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&);

  template<typename _FIter, typename _Size, typename _Tp,
    typename _BinaryPredicate>
    _FIter
    search_n(_FIter, _FIter, _Size, const _Tp&, _BinaryPredicate);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_intersection(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_symmetric_difference(_IIter1, _IIter1, _IIter2, _IIter2,
        _OIter, _Compare);

  template<typename _IIter1, typename _IIter2, typename _OIter>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _Compare>
    _OIter
    set_union(_IIter1, _IIter1, _IIter2, _IIter2, _OIter, _Compare);

  template<typename _RAIter>
    void
    sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    sort(_RAIter, _RAIter, _Compare);

  template<typename _RAIter>
    void
    stable_sort(_RAIter, _RAIter);

  template<typename _RAIter, typename _Compare>
    void
    stable_sort(_RAIter, _RAIter, _Compare);

  template<typename _IIter, typename _OIter, typename _UnaryOperation>
    _OIter
    transform(_IIter, _IIter, _OIter, _UnaryOperation);

  template<typename _IIter1, typename _IIter2, typename _OIter,
    typename _BinaryOperation>
    _OIter
    transform(_IIter1, _IIter1, _IIter2, _OIter, _BinaryOperation);

  template<typename _IIter, typename _OIter>
    _OIter
    unique_copy(_IIter, _IIter, _OIter);

  template<typename _IIter, typename _OIter, typename _BinaryPredicate>
    _OIter
    unique_copy(_IIter, _IIter, _OIter, _BinaryPredicate);

}
# 62 "/usr/include/c++/4.4/bits/stl_algo.h" 2 3
# 1 "/usr/include/c++/4.4/bits/stl_heap.h" 1 3
# 62 "/usr/include/c++/4.4/bits/stl_heap.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {






  template<typename _RandomAccessIterator, typename _Distance>
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__first[__parent] < __first[__child])
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    _Distance
    __is_heap_until(_RandomAccessIterator __first, _Distance __n,
      _Compare __comp)
    {
      _Distance __parent = 0;
      for (_Distance __child = 1; __child < __n; ++__child)
 {
   if (__comp(__first[__parent], __first[__child]))
     return __child;
   if ((__child & 1) == 0)
     ++__parent;
 }
      return __n;
    }



  template<typename _RandomAccessIterator, typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Distance __n)
    { return std::__is_heap_until(__first, __n) == __n; }

  template<typename _RandomAccessIterator, typename _Compare,
    typename _Distance>
    inline bool
    __is_heap(_RandomAccessIterator __first, _Compare __comp, _Distance __n)
    { return std::__is_heap_until(__first, __n, __comp) == __n; }

  template<typename _RandomAccessIterator>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    { return std::__is_heap(__first, std::distance(__first, __last)); }

  template<typename _RandomAccessIterator, typename _Compare>
    inline bool
    __is_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    { return std::__is_heap(__first, __comp, std::distance(__first, __last)); }




  template<typename _RandomAccessIterator, typename _Distance, typename _Tp>
    void
    __push_heap(_RandomAccessIterator __first,
  _Distance __holeIndex, _Distance __topIndex, _Tp __value)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex && *(__first + __parent) < __value)
 {
   *(__first + __holeIndex) = (*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = (__value);
    }
# 152 "/usr/include/c++/4.4/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

     
      ;
      ;

      _ValueType __value = (*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), (__value));
    }

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp,
    typename _Compare>
    void
    __push_heap(_RandomAccessIterator __first, _Distance __holeIndex,
  _Distance __topIndex, _Tp __value, _Compare __comp)
    {
      _Distance __parent = (__holeIndex - 1) / 2;
      while (__holeIndex > __topIndex
      && __comp(*(__first + __parent), __value))
 {
   *(__first + __holeIndex) = (*(__first + __parent));
   __holeIndex = __parent;
   __parent = (__holeIndex - 1) / 2;
 }
      *(__first + __holeIndex) = (__value);
    }
# 201 "/usr/include/c++/4.4/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    push_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

      ;
      ;

      _ValueType __value = (*(__last - 1));
      std::__push_heap(__first, _DistanceType((__last - __first) - 1),
         _DistanceType(0), (__value), __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance, typename _Tp>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (*(__first + __secondChild) < *(__first + (__secondChild - 1)))
     __secondChild--;
   *(__first + __holeIndex) = (*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = (*(__first + (__secondChild - 1)));

   __holeIndex = __secondChild - 1;
 }
      std::__push_heap(__first, __holeIndex, __topIndex,
         (__value));
    }

  template<typename _RandomAccessIterator>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = (*__result);
      *__result = (*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    (__value));
    }
# 274 "/usr/include/c++/4.4/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    inline void
    pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     
      ;
      ;

      --__last;
      std::__pop_heap(__first, __last, __last);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Tp, typename _Compare>
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
    _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   if (__comp(*(__first + __secondChild),
       *(__first + (__secondChild - 1))))
     __secondChild--;
   *(__first + __holeIndex) = (*(__first + __secondChild));
   __holeIndex = __secondChild;
 }
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 {
   __secondChild = 2 * (__secondChild + 1);
   *(__first + __holeIndex) = (*(__first + (__secondChild - 1)));

   __holeIndex = __secondChild - 1;
 }
      std::__push_heap(__first, __holeIndex, __topIndex,
         (__value), __comp);
    }

  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __pop_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
        _RandomAccessIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;

      _ValueType __value = (*__result);
      *__result = (*__first);
      std::__adjust_heap(__first, _DistanceType(0),
    _DistanceType(__last - __first),
    (__value), __comp);
    }
# 348 "/usr/include/c++/4.4/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    pop_heap(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {

     

      ;
      ;

      --__last;
      std::__pop_heap(__first, __last, __last, __comp);
    }
# 371 "/usr/include/c++/4.4/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

     
      ;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = (*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, (__value));
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 411 "/usr/include/c++/4.4/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    void
    make_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
   _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
   _DistanceType;


     

      ;

      if (__last - __first < 2)
 return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
      while (true)
 {
   _ValueType __value = (*(__first + __parent));
   std::__adjust_heap(__first, __parent, __len, (__value),
        __comp);
   if (__parent == 0)
     return;
   __parent--;
 }
    }
# 450 "/usr/include/c++/4.4/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

     

      ;
      ;

      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last);
 }
    }
# 479 "/usr/include/c++/4.4/bits/stl_heap.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    void
    sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Compare __comp)
    {

     

      ;
      ;

      while (__last - __first > 1)
 {
   --__last;
   std::__pop_heap(__first, __last, __last, __comp);
 }
    }
# 576 "/usr/include/c++/4.4/bits/stl_heap.h" 3
}
# 63 "/usr/include/c++/4.4/bits/stl_algo.h" 2 3
# 1 "/usr/include/c++/4.4/bits/stl_tempbuf.h" 1 3
# 64 "/usr/include/c++/4.4/bits/stl_tempbuf.h" 3
namespace std __attribute__ ((__visibility__ ("default"))) {
# 83 "/usr/include/c++/4.4/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    pair<_Tp*, ptrdiff_t>
    get_temporary_buffer(ptrdiff_t __len)
    {
      const ptrdiff_t __max =
 __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
      if (__len > __max)
 __len = __max;

      while (__len > 0)
 {
   _Tp* __tmp = static_cast<_Tp*>(::operator new(__len * sizeof(_Tp),
       std::nothrow));
   if (__tmp != 0)
     return std::pair<_Tp*, ptrdiff_t>(__tmp, __len);
   __len /= 2;
 }
      return std::pair<_Tp*, ptrdiff_t>(static_cast<_Tp*>(0), 0);
    }
# 110 "/usr/include/c++/4.4/bits/stl_tempbuf.h" 3
  template<typename _Tp>
    inline void
    return_temporary_buffer(_Tp* __p)
    { ::operator delete(__p, std::nothrow); }







  template<typename _ForwardIterator, typename _Tp>
    class _Temporary_buffer
    {

     

    public:
      typedef _Tp value_type;
      typedef value_type* pointer;
      typedef pointer iterator;
      typedef ptrdiff_t size_type;

    protected:
      size_type _M_original_len;
      size_type _M_len;
      pointer _M_buffer;

    public:

      size_type
      size() const
      { return _M_len; }


      size_type
      requested_size() const
      { return _M_original_len; }


      iterator
      begin()
      { return _M_buffer; }


      iterator
      end()
      { return _M_buffer + _M_len; }





      _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last);

      ~_Temporary_buffer()
      {
 std::_Destroy(_M_buffer, _M_buffer + _M_len);
 std::return_temporary_buffer(_M_buffer);
      }

    private:

      _Temporary_buffer(const _Temporary_buffer&);

      void
      operator=(const _Temporary_buffer&);
    };

  template<typename _ForwardIterator, typename _Tp>
    _Temporary_buffer<_ForwardIterator, _Tp>::
    _Temporary_buffer(_ForwardIterator __first, _ForwardIterator __last)
    : _M_original_len(std::distance(__first, __last)),
      _M_len(0), _M_buffer(0)
    {
      try
 {
   std::pair<pointer, size_type> __p(std::get_temporary_buffer<
         value_type>(_M_original_len));
   _M_buffer = __p.first;
   _M_len = __p.second;
   if (!__is_pod(_Tp) && _M_len > 0)
     std::uninitialized_fill_n(_M_buffer, _M_len, *__first);
 }
      catch(...)
 {
   std::return_temporary_buffer(_M_buffer);
   _M_buffer = 0;
   _M_len = 0;
   throw;
 }
    }

}
# 64 "/usr/include/c++/4.4/bits/stl_algo.h" 2 3





namespace std __attribute__ ((__visibility__ ("default"))) {
# 83 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _Tp>
    inline const _Tp&
    __median(const _Tp& __a, const _Tp& __b, const _Tp& __c)
    {

     
      if (__a < __b)
 if (__b < __c)
   return __b;
 else if (__a < __c)
   return __c;
 else
   return __a;
      else if (__a < __c)
 return __a;
      else if (__b < __c)
 return __c;
      else
 return __b;
    }
# 117 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _Tp, typename _Compare>
    inline const _Tp&
    __median(const _Tp& __a, const _Tp& __b, const _Tp& __c, _Compare __comp)
    {

     

      if (__comp(__a, __b))
 if (__comp(__b, __c))
   return __b;
 else if (__comp(__a, __c))
   return __c;
 else
   return __a;
      else if (__comp(__a, __c))
 return __a;
      else if (__comp(__b, __c))
 return __c;
      else
 return __b;
    }




  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    __find(_InputIterator __first, _InputIterator __last,
    const _Tp& __val, input_iterator_tag)
    {
      while (__first != __last && !(*__first == __val))
 ++__first;
      return __first;
    }


  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    __find_if(_InputIterator __first, _InputIterator __last,
       _Predicate __pred, input_iterator_tag)
    {
      while (__first != __last && !bool(__pred(*__first)))
 ++__first;
      return __first;
    }


  template<typename _RandomAccessIterator, typename _Tp>
    _RandomAccessIterator
    __find(_RandomAccessIterator __first, _RandomAccessIterator __last,
    const _Tp& __val, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;

   if (*__first == __val)
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (*__first == __val)
     return __first;
   ++__first;
 case 2:
   if (*__first == __val)
     return __first;
   ++__first;
 case 1:
   if (*__first == __val)
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }


  template<typename _RandomAccessIterator, typename _Predicate>
    _RandomAccessIterator
    __find_if(_RandomAccessIterator __first, _RandomAccessIterator __last,
       _Predicate __pred, random_access_iterator_tag)
    {
      typename iterator_traits<_RandomAccessIterator>::difference_type
 __trip_count = (__last - __first) >> 2;

      for (; __trip_count > 0; --__trip_count)
 {
   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;

   if (__pred(*__first))
     return __first;
   ++__first;
 }

      switch (__last - __first)
 {
 case 3:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 2:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 1:
   if (__pred(*__first))
     return __first;
   ++__first;
 case 0:
 default:
   return __last;
 }
    }
# 338 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp>
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count, const _Tp& __val,
        std::forward_iterator_tag)
    {
      __first = std::find(__first, __last, __val);
      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && *__i == __val)
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = std::find(++__i, __last, __val);
 }
      return __last;
    }






  template<typename _RandomAccessIter, typename _Integer, typename _Tp>
    _RandomAccessIter
    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,
        _Integer __count, const _Tp& __val,
        std::random_access_iterator_tag)
    {

      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      const _DistanceType __pattSize = __count;

      if (__tailSize < __pattSize)
        return __last;

      const _DistanceType __skipOffset = __pattSize - 1;
      _RandomAccessIter __lookAhead = __first + __skipOffset;
      __tailSize -= __pattSize;

      while (1)
 {


   while (!(*__lookAhead == __val))
     {
       if (__tailSize < __pattSize)
  return __last;
       __lookAhead += __pattSize;
       __tailSize -= __pattSize;
     }
   _DistanceType __remainder = __skipOffset;
   for (_RandomAccessIter __backTrack = __lookAhead - 1;
        *__backTrack == __val; --__backTrack)
     {
       if (--__remainder == 0)
  return (__lookAhead - __skipOffset);
     }
   if (__remainder > __tailSize)
     return __last;
   __lookAhead += __remainder;
   __tailSize -= __remainder;
 }
    }
# 423 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate>
    _ForwardIterator
    __search_n(_ForwardIterator __first, _ForwardIterator __last,
        _Integer __count, const _Tp& __val,
        _BinaryPredicate __binary_pred, std::forward_iterator_tag)
    {
      while (__first != __last && !bool(__binary_pred(*__first, __val)))
        ++__first;

      while (__first != __last)
 {
   typename iterator_traits<_ForwardIterator>::difference_type
     __n = __count;
   _ForwardIterator __i = __first;
   ++__i;
   while (__i != __last && __n != 1 && bool(__binary_pred(*__i, __val)))
     {
       ++__i;
       --__n;
     }
   if (__n == 1)
     return __first;
   if (__i == __last)
     return __last;
   __first = ++__i;
   while (__first != __last
   && !bool(__binary_pred(*__first, __val)))
     ++__first;
 }
      return __last;
    }







  template<typename _RandomAccessIter, typename _Integer, typename _Tp,
    typename _BinaryPredicate>
    _RandomAccessIter
    __search_n(_RandomAccessIter __first, _RandomAccessIter __last,
        _Integer __count, const _Tp& __val,
        _BinaryPredicate __binary_pred, std::random_access_iterator_tag)
    {

      typedef typename std::iterator_traits<_RandomAccessIter>::difference_type
 _DistanceType;

      _DistanceType __tailSize = __last - __first;
      const _DistanceType __pattSize = __count;

      if (__tailSize < __pattSize)
        return __last;

      const _DistanceType __skipOffset = __pattSize - 1;
      _RandomAccessIter __lookAhead = __first + __skipOffset;
      __tailSize -= __pattSize;

      while (1)
 {


   while (!bool(__binary_pred(*__lookAhead, __val)))
     {
       if (__tailSize < __pattSize)
  return __last;
       __lookAhead += __pattSize;
       __tailSize -= __pattSize;
     }
   _DistanceType __remainder = __skipOffset;
   for (_RandomAccessIter __backTrack = __lookAhead - 1;
        __binary_pred(*__backTrack, __val); --__backTrack)
     {
       if (--__remainder == 0)
  return (__lookAhead - __skipOffset);
     }
   if (__remainder > __tailSize)
     return __last;
   __lookAhead += __remainder;
   __tailSize -= __remainder;
 }
    }


  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag)
    {
      if (__first2 == __last2)
 return __last1;
      else
 {
   _ForwardIterator1 __result = __last1;
   while (1)
     {
       _ForwardIterator1 __new_result
  = std::search(__first1, __last1, __first2, __last2);
       if (__new_result == __last1)
  return __result;
       else
  {
    __result = __new_result;
    __first1 = __new_result;
    ++__first1;
  }
     }
 }
    }

  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    __find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
        _ForwardIterator2 __first2, _ForwardIterator2 __last2,
        forward_iterator_tag, forward_iterator_tag,
        _BinaryPredicate __comp)
    {
      if (__first2 == __last2)
 return __last1;
      else
 {
   _ForwardIterator1 __result = __last1;
   while (1)
     {
       _ForwardIterator1 __new_result
  = std::search(__first1, __last1, __first2,
      __last2, __comp);
       if (__new_result == __last1)
  return __result;
       else
  {
    __result = __new_result;
    __first1 = __new_result;
    ++__first1;
  }
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2>
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag)
    {

     

     


      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::search(_RevIterator1(__last1),
             __rlast1,
             _RevIterator2(__last2),
             __rlast2);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }

  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BinaryPredicate>
    _BidirectionalIterator1
    __find_end(_BidirectionalIterator1 __first1,
        _BidirectionalIterator1 __last1,
        _BidirectionalIterator2 __first2,
        _BidirectionalIterator2 __last2,
        bidirectional_iterator_tag, bidirectional_iterator_tag,
        _BinaryPredicate __comp)
    {

     

     


      typedef reverse_iterator<_BidirectionalIterator1> _RevIterator1;
      typedef reverse_iterator<_BidirectionalIterator2> _RevIterator2;

      _RevIterator1 __rlast1(__first1);
      _RevIterator2 __rlast2(__first2);
      _RevIterator1 __rresult = std::search(_RevIterator1(__last1), __rlast1,
         _RevIterator2(__last2), __rlast2,
         __comp);

      if (__rresult == __rlast1)
 return __last1;
      else
 {
   _BidirectionalIterator1 __result = __rresult.base();
   std::advance(__result, -std::distance(__first2, __last2));
   return __result;
 }
    }
# 661 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {

     
     
     


      ;
      ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2));
    }
# 707 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    inline _ForwardIterator1
    find_end(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
      _ForwardIterator2 __first2, _ForwardIterator2 __last2,
      _BinaryPredicate __comp)
    {

     
     
     


      ;
      ;

      return std::__find_end(__first1, __last1, __first2, __last2,
        std::__iterator_category(__first1),
        std::__iterator_category(__first2),
        __comp);
    }
# 886 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    _OutputIterator
    remove_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result, const _Tp& __value)
    {

     
     

     

      ;

      for (; __first != __last; ++__first)
 if (!(*__first == __value))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 923 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate>
    _OutputIterator
    remove_copy_if(_InputIterator __first, _InputIterator __last,
     _OutputIterator __result, _Predicate __pred)
    {

     
     

     

      ;

      for (; __first != __last; ++__first)
 if (!bool(__pred(*__first)))
   {
     *__result = *__first;
     ++__result;
   }
      return __result;
    }
# 1098 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    remove(_ForwardIterator __first, _ForwardIterator __last,
    const _Tp& __value)
    {

     

     

      ;

      __first = std::find(__first, __last, __value);
      if(__first == __last)
        return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for(; __first != __last; ++__first)
        if(!(*__first == __value))
          {
            *__result = (*__first);
            ++__result;
          }
      return __result;
    }
# 1141 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    remove_if(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      __first = std::find_if(__first, __last, __pred);
      if(__first == __last)
        return __first;
      _ForwardIterator __result = __first;
      ++__first;
      for(; __first != __last; ++__first)
        if(!bool(__pred(*__first)))
          {
            *__result = (*__first);
            ++__result;
          }
      return __result;
    }
# 1181 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last)
    {

     

     

      ;


      __first = std::adjacent_find(__first, __last);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!(*__dest == *__first))
   *++__dest = (*__first);
      return ++__dest;
    }
# 1221 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    unique(_ForwardIterator __first, _ForwardIterator __last,
           _BinaryPredicate __binary_pred)
    {

     

     


      ;


      __first = std::adjacent_find(__first, __last, __binary_pred);
      if (__first == __last)
 return __last;


      _ForwardIterator __dest = __first;
      ++__first;
      while (++__first != __last)
 if (!bool(__binary_pred(*__dest, *__first)))
   *++__dest = (*__first);
      return ++__dest;
    }






  template<typename _ForwardIterator, typename _OutputIterator>
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result,
    forward_iterator_tag, output_iterator_tag)
    {

      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!(*__first == *__next))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }






  template<typename _InputIterator, typename _OutputIterator>
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result,
    input_iterator_tag, output_iterator_tag)
    {

      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      *__result = __value;
      while (++__first != __last)
 if (!(__value == *__first))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }






  template<typename _InputIterator, typename _ForwardIterator>
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result,
    input_iterator_tag, forward_iterator_tag)
    {

      *__result = *__first;
      while (++__first != __last)
 if (!(*__result == *__first))
   *++__result = *__first;
      return ++__result;
    }







  template<typename _ForwardIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_ForwardIterator __first, _ForwardIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    forward_iterator_tag, output_iterator_tag)
    {

     



      _ForwardIterator __next = __first;
      *__result = *__first;
      while (++__next != __last)
 if (!bool(__binary_pred(*__first, *__next)))
   {
     __first = __next;
     *++__result = *__first;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    _OutputIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _OutputIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, output_iterator_tag)
    {

     



      typename iterator_traits<_InputIterator>::value_type __value = *__first;
      *__result = __value;
      while (++__first != __last)
 if (!bool(__binary_pred(__value, *__first)))
   {
     __value = *__first;
     *++__result = __value;
   }
      return ++__result;
    }







  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _ForwardIterator
    __unique_copy(_InputIterator __first, _InputIterator __last,
    _ForwardIterator __result, _BinaryPredicate __binary_pred,
    input_iterator_tag, forward_iterator_tag)
    {

     



      *__result = *__first;
      while (++__first != __last)
 if (!bool(__binary_pred(*__result, *__first)))
   *++__result = *__first;
      return ++__result;
    }






  template<typename _BidirectionalIterator>
    void
    __reverse(_BidirectionalIterator __first, _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {
      while (true)
 if (__first == __last || __first == --__last)
   return;
 else
   {
     std::iter_swap(__first, __last);
     ++__first;
   }
    }






  template<typename _RandomAccessIterator>
    void
    __reverse(_RandomAccessIterator __first, _RandomAccessIterator __last,
       random_access_iterator_tag)
    {
      if (__first == __last)
 return;
      --__last;
      while (__first < __last)
 {
   std::iter_swap(__first, __last);
   ++__first;
   --__last;
 }
    }
# 1449 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    inline void
    reverse(_BidirectionalIterator __first, _BidirectionalIterator __last)
    {

     

      ;
      std::__reverse(__first, __last, std::__iterator_category(__first));
    }
# 1476 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _OutputIterator>
    _OutputIterator
    reverse_copy(_BidirectionalIterator __first, _BidirectionalIterator __last,
   _OutputIterator __result)
    {

     

     

      ;

      while (__first != __last)
 {
   --__last;
   *__result = *__last;
   ++__result;
 }
      return __result;
    }





  template<typename _EuclideanRingElement>
    _EuclideanRingElement
    __gcd(_EuclideanRingElement __m, _EuclideanRingElement __n)
    {
      while (__n != 0)
 {
   _EuclideanRingElement __t = __m % __n;
   __m = __n;
   __n = __t;
 }
      return __m;
    }


  template<typename _ForwardIterator>
    void
    __rotate(_ForwardIterator __first,
      _ForwardIterator __middle,
      _ForwardIterator __last,
      forward_iterator_tag)
    {
      if (__first == __middle || __last == __middle)
 return;

      _ForwardIterator __first2 = __middle;
      do
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
 }
      while (__first2 != __last);

      __first2 = __middle;

      while (__first2 != __last)
 {
   std::iter_swap(__first, __first2);
   ++__first;
   ++__first2;
   if (__first == __middle)
     __middle = __first2;
   else if (__first2 == __last)
     __first2 = __middle;
 }
    }


  template<typename _BidirectionalIterator>
    void
    __rotate(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
       bidirectional_iterator_tag)
    {

     


      if (__first == __middle || __last == __middle)
 return;

      std::__reverse(__first, __middle, bidirectional_iterator_tag());
      std::__reverse(__middle, __last, bidirectional_iterator_tag());

      while (__first != __middle && __middle != __last)
 {
   std::iter_swap(__first, --__last);
   ++__first;
 }

      if (__first == __middle)
 std::__reverse(__middle, __last, bidirectional_iterator_tag());
      else
 std::__reverse(__first, __middle, bidirectional_iterator_tag());
    }


  template<typename _RandomAccessIterator>
    void
    __rotate(_RandomAccessIterator __first,
      _RandomAccessIterator __middle,
      _RandomAccessIterator __last,
      random_access_iterator_tag)
    {

     


      if (__first == __middle || __last == __middle)
 return;

      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      const _Distance __n = __last - __first;
      const _Distance __k = __middle - __first;
      const _Distance __l = __n - __k;

      if (__k == __l)
 {
   std::swap_ranges(__first, __middle, __middle);
   return;
 }

      const _Distance __d = std::__gcd(__n, __k);

      for (_Distance __i = 0; __i < __d; __i++)
 {
   _ValueType __tmp = (*__first);
   _RandomAccessIterator __p = __first;

   if (__k < __l)
     {
       for (_Distance __j = 0; __j < __l / __d; __j++)
  {
    if (__p > __first + __l)
      {
        *__p = (*(__p - __l));
        __p -= __l;
      }

    *__p = (*(__p + __k));
    __p += __k;
  }
     }
   else
     {
       for (_Distance __j = 0; __j < __k / __d - 1; __j ++)
  {
    if (__p < __last - __k)
      {
        *__p = (*(__p + __k));
        __p += __k;
      }
    *__p = (*(__p - __l));
    __p -= __l;
  }
     }

   *__p = (__tmp);
   ++__first;
 }
    }
# 1669 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    inline void
    rotate(_ForwardIterator __first, _ForwardIterator __middle,
    _ForwardIterator __last)
    {

     

      ;
      ;

      typedef typename iterator_traits<_ForwardIterator>::iterator_category
 _IterType;
      std::__rotate(__first, __middle, __last, _IterType());
    }
# 1703 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _OutputIterator>
    _OutputIterator
    rotate_copy(_ForwardIterator __first, _ForwardIterator __middle,
                _ForwardIterator __last, _OutputIterator __result)
    {

     
     

      ;
      ;

      return std::copy(__first, __middle,
                       std::copy(__middle, __last, __result));
    }


  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    __partition(_ForwardIterator __first, _ForwardIterator __last,
  _Predicate __pred, forward_iterator_tag)
    {
      if (__first == __last)
 return __first;

      while (__pred(*__first))
 if (++__first == __last)
   return __first;

      _ForwardIterator __next = __first;

      while (++__next != __last)
 if (__pred(*__next))
   {
     std::iter_swap(__first, __next);
     ++__first;
   }

      return __first;
    }


  template<typename _BidirectionalIterator, typename _Predicate>
    _BidirectionalIterator
    __partition(_BidirectionalIterator __first, _BidirectionalIterator __last,
  _Predicate __pred, bidirectional_iterator_tag)
    {
      while (true)
 {
   while (true)
     if (__first == __last)
       return __first;
     else if (__pred(*__first))
       ++__first;
     else
       break;
   --__last;
   while (true)
     if (__first == __last)
       return __first;
     else if (!bool(__pred(*__last)))
       --__last;
     else
       break;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }




  template<typename _ForwardIterator, typename _Predicate, typename _Distance>
    _ForwardIterator
    __inplace_stable_partition(_ForwardIterator __first,
          _ForwardIterator __last,
          _Predicate __pred, _Distance __len)
    {
      if (__len == 1)
 return __pred(*__first) ? __last : __first;
      _ForwardIterator __middle = __first;
      std::advance(__middle, __len / 2);
      _ForwardIterator __begin = std::__inplace_stable_partition(__first,
         __middle,
         __pred,
         __len / 2);
      _ForwardIterator __end = std::__inplace_stable_partition(__middle, __last,
              __pred,
              __len
              - __len / 2);
      std::rotate(__begin, __middle, __end);
      std::advance(__begin, std::distance(__middle, __end));
      return __begin;
    }


  template<typename _ForwardIterator, typename _Pointer, typename _Predicate,
    typename _Distance>
    _ForwardIterator
    __stable_partition_adaptive(_ForwardIterator __first,
    _ForwardIterator __last,
    _Predicate __pred, _Distance __len,
    _Pointer __buffer,
    _Distance __buffer_size)
    {
      if (__len <= __buffer_size)
 {
   _ForwardIterator __result1 = __first;
   _Pointer __result2 = __buffer;
   for (; __first != __last; ++__first)
     if (__pred(*__first))
       {
  *__result1 = *__first;
  ++__result1;
       }
     else
       {
  *__result2 = *__first;
  ++__result2;
       }
   std::copy(__buffer, __result2, __result1);
   return __result1;
 }
      else
 {
   _ForwardIterator __middle = __first;
   std::advance(__middle, __len / 2);
   _ForwardIterator __begin =
     std::__stable_partition_adaptive(__first, __middle, __pred,
          __len / 2, __buffer,
          __buffer_size);
   _ForwardIterator __end =
     std::__stable_partition_adaptive(__middle, __last, __pred,
          __len - __len / 2,
          __buffer, __buffer_size);
   std::rotate(__begin, __middle, __end);
   std::advance(__begin, std::distance(__middle, __end));
   return __begin;
 }
    }
# 1861 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    _ForwardIterator
    stable_partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      if (__first == __last)
 return __first;
      else
 {
   typedef typename iterator_traits<_ForwardIterator>::value_type
     _ValueType;
   typedef typename iterator_traits<_ForwardIterator>::difference_type
     _DistanceType;

   _Temporary_buffer<_ForwardIterator, _ValueType> __buf(__first,
        __last);
 if (__buf.size() > 0)
   return
     std::__stable_partition_adaptive(__first, __last, __pred,
       _DistanceType(__buf.requested_size()),
       __buf.begin(),
       _DistanceType(__buf.size()));
 else
   return
     std::__inplace_stable_partition(__first, __last, __pred,
      _DistanceType(__buf.requested_size()));
 }
    }


  template<typename _RandomAccessIterator>
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last)
    {
      std::make_heap(__first, __middle);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (*__i < *__first)
   std::__pop_heap(__first, __middle, __i);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __heap_select(_RandomAccessIterator __first,
    _RandomAccessIterator __middle,
    _RandomAccessIterator __last, _Compare __comp)
    {
      std::make_heap(__first, __middle, __comp);
      for (_RandomAccessIterator __i = __middle; __i < __last; ++__i)
 if (__comp(*__i, *__first))
   std::__pop_heap(__first, __middle, __i, __comp);
    }
# 1943 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator>
    _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;


     
     

     

     
      ;
      ;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while(__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }
      std::make_heap(__result_first, __result_real_last);
      while (__first != __last)
 {
   if (*__first < *__result_first)
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first));
   ++__first;
 }
      std::sort_heap(__result_first, __result_real_last);
      return __result_real_last;
    }
# 2009 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _RandomAccessIterator, typename _Compare>
    _RandomAccessIterator
    partial_sort_copy(_InputIterator __first, _InputIterator __last,
        _RandomAccessIterator __result_first,
        _RandomAccessIterator __result_last,
        _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator>::value_type
 _InputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _OutputValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;


     
     

     

     

     

      ;
      ;

      if (__result_first == __result_last)
 return __result_last;
      _RandomAccessIterator __result_real_last = __result_first;
      while(__first != __last && __result_real_last != __result_last)
 {
   *__result_real_last = *__first;
   ++__result_real_last;
   ++__first;
 }
      std::make_heap(__result_first, __result_real_last, __comp);
      while (__first != __last)
 {
   if (__comp(*__first, *__result_first))
     std::__adjust_heap(__result_first, _DistanceType(0),
          _DistanceType(__result_real_last
          - __result_first),
          _InputValueType(*__first),
          __comp);
   ++__first;
 }
      std::sort_heap(__result_first, __result_real_last, __comp);
      return __result_real_last;
    }


  template<typename _RandomAccessIterator, typename _Tp>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last, _Tp __val)
    {
      _RandomAccessIterator __next = __last;
      --__next;
      while (__val < *__next)
 {
   *__last = *__next;
   __last = __next;
   --__next;
 }
      *__last = __val;
    }


  template<typename _RandomAccessIterator, typename _Tp, typename _Compare>
    void
    __unguarded_linear_insert(_RandomAccessIterator __last, _Tp __val,
         _Compare __comp)
    {
      _RandomAccessIterator __next = __last;
      --__next;
      while (__comp(__val, *__next))
 {
   *__last = *__next;
   __last = __next;
   --__next;
 }
      *__last = __val;
    }


  template<typename _RandomAccessIterator>
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last)
    {
      if (__first == __last)
 return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   typename iterator_traits<_RandomAccessIterator>::value_type
     __val = *__i;
   if (__val < *__first)
     {
       std::copy_backward(__first, __i, __i + 1);
       *__first = __val;
     }
   else
     std::__unguarded_linear_insert(__i, __val);
 }
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __insertion_sort(_RandomAccessIterator __first,
       _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 {
   typename iterator_traits<_RandomAccessIterator>::value_type
     __val = *__i;
   if (__comp(__val, *__first))
     {
       std::copy_backward(__first, __i, __i + 1);
       *__first = __val;
     }
   else
     std::__unguarded_linear_insert(__i, __val, __comp);
 }
    }


  template<typename _RandomAccessIterator>
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i, _ValueType(*__i));
    }


  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    __unguarded_insertion_sort(_RandomAccessIterator __first,
          _RandomAccessIterator __last, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 std::__unguarded_linear_insert(__i, _ValueType(*__i), __comp);
    }





  enum { _S_threshold = 16 };


  template<typename _RandomAccessIterator>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold));
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last);
 }
      else
 std::__insertion_sort(__first, __last);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __final_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first > int(_S_threshold))
 {
   std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
   std::__unguarded_insertion_sort(__first + int(_S_threshold), __last,
       __comp);
 }
      else
 std::__insertion_sort(__first, __last, __comp);
    }


  template<typename _RandomAccessIterator, typename _Tp>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last, _Tp __pivot)
    {
      while (true)
 {
   while (*__first < __pivot)
     ++__first;
   --__last;
   while (__pivot < *__last)
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }


  template<typename _RandomAccessIterator, typename _Tp, typename _Compare>
    _RandomAccessIterator
    __unguarded_partition(_RandomAccessIterator __first,
     _RandomAccessIterator __last,
     _Tp __pivot, _Compare __comp)
    {
      while (true)
 {
   while (__comp(*__first, __pivot))
     ++__first;
   --__last;
   while (__comp(__pivot, *__last))
     --__last;
   if (!(__first < __last))
     return __first;
   std::iter_swap(__first, __last);
   ++__first;
 }
    }


  template<typename _RandomAccessIterator, typename _Size>
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::partial_sort(__first, __last, __last);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition(__first, __last,
           _ValueType(std::__median(*__first,
        *(__first
          + (__last
             - __first)
          / 2),
        *(__last
          - 1))));
   std::__introsort_loop(__cut, __last, __depth_limit);
   __last = __cut;
 }
    }


  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introsort_loop(_RandomAccessIterator __first,
       _RandomAccessIterator __last,
       _Size __depth_limit, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      while (__last - __first > int(_S_threshold))
 {
   if (__depth_limit == 0)
     {
       std::partial_sort(__first, __last, __last, __comp);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition(__first, __last,
           _ValueType(std::__median(*__first,
        *(__first
          + (__last
             - __first)
          / 2),
        *(__last - 1),
        __comp)),
           __comp);
   std::__introsort_loop(__cut, __last, __depth_limit, __comp);
   __last = __cut;
 }
    }


  template<typename _Size>
    inline _Size
    __lg(_Size __n)
    {
      _Size __k;
      for (__k = 0; __n != 0; __n >>= 1)
 ++__k;
      return __k - 1;
    }

  inline int
  __lg(int __n)
  { return sizeof(int) * 8 - 1 - __builtin_clz(__n); }

  inline long
  __lg(long __n)
  { return sizeof(long) * 8 - 1 - __builtin_clzl(__n); }

  inline long long
  __lg(long long __n)
  { return sizeof(long long) * 8 - 1 - __builtin_clzll(__n); }



  template<typename _RandomAccessIterator, typename _Size>
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last);


       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition(__first, __last,
           _ValueType(std::__median(*__first,
        *(__first
          + (__last
             - __first)
          / 2),
        *(__last
          - 1))));
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last);
    }

  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    void
    __introselect(_RandomAccessIterator __first, _RandomAccessIterator __nth,
    _RandomAccessIterator __last, _Size __depth_limit,
    _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;

      while (__last - __first > 3)
 {
   if (__depth_limit == 0)
     {
       std::__heap_select(__first, __nth + 1, __last, __comp);

       std::iter_swap(__first, __nth);
       return;
     }
   --__depth_limit;
   _RandomAccessIterator __cut =
     std::__unguarded_partition(__first, __last,
           _ValueType(std::__median(*__first,
        *(__first
          + (__last
             - __first)
          / 2),
        *(__last - 1),
        __comp)),
           __comp);
   if (__cut <= __nth)
     __first = __cut;
   else
     __last = __cut;
 }
      std::__insertion_sort(__first, __last, __comp);
    }
# 2418 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;


     
     
      ;

      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (*__middle < __val)
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 2469 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    lower_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;


     
     

      ;


      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (__comp(*__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else
     __len = __half;
 }
      return __first;
    }
# 2518 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;


     
     
      ;

      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (__val < *__middle)
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2569 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    _ForwardIterator
    upper_bound(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;


     
     

      ;


      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (__comp(__val, *__middle))
     __len = __half;
   else
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
 }
      return __first;
    }
# 2624 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;


     
     
     
      ;
      ;

      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle, __left, __right;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (*__middle < __val)
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__val < *__middle)
     __len = __half;
   else
     {
       __left = std::lower_bound(__first, __middle, __val);
       std::advance(__first, __len);
       __right = std::upper_bound(++__middle, __first, __val);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 2686 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    pair<_ForwardIterator, _ForwardIterator>
    equal_range(_ForwardIterator __first, _ForwardIterator __last,
  const _Tp& __val,
  _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_ForwardIterator>::difference_type
 _DistanceType;


     
     

     

      ;

      ;


      _DistanceType __len = std::distance(__first, __last);
      _DistanceType __half;
      _ForwardIterator __middle, __left, __right;

      while (__len > 0)
 {
   __half = __len >> 1;
   __middle = __first;
   std::advance(__middle, __half);
   if (__comp(*__middle, __val))
     {
       __first = __middle;
       ++__first;
       __len = __len - __half - 1;
     }
   else if (__comp(__val, *__middle))
     __len = __half;
   else
     {
       __left = std::lower_bound(__first, __middle, __val, __comp);
       std::advance(__first, __len);
       __right = std::upper_bound(++__middle, __first, __val, __comp);
       return pair<_ForwardIterator, _ForwardIterator>(__left, __right);
     }
 }
      return pair<_ForwardIterator, _ForwardIterator>(__first, __first);
    }
# 2747 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;


     
     
      ;
      ;

      _ForwardIterator __i = std::lower_bound(__first, __last, __val);
      return __i != __last && !(__val < *__i);
    }
# 2780 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp, typename _Compare>
    bool
    binary_search(_ForwardIterator __first, _ForwardIterator __last,
                  const _Tp& __val, _Compare __comp)
    {
      typedef typename iterator_traits<_ForwardIterator>::value_type
 _ValueType;


     
     

      ;

      ;


      _ForwardIterator __i = std::lower_bound(__first, __last, __val, __comp);
      return __i != __last && !bool(__comp(__val, *__i));
    }




  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3>
    _BidirectionalIterator3
    __merge_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result)
    {
      if (__first1 == __last1)
 return std::copy_backward(__first2, __last2, __result);
      if (__first2 == __last2)
 return std::copy_backward(__first1, __last1, __result);
      --__last1;
      --__last2;
      while (true)
 {
   if (*__last2 < *__last1)
     {
       *--__result = *__last1;
       if (__first1 == __last1)
  return std::copy_backward(__first2, ++__last2, __result);
       --__last1;
     }
   else
     {
       *--__result = *__last2;
       if (__first2 == __last2)
  return std::copy_backward(__first1, ++__last1, __result);
       --__last2;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _BidirectionalIterator3, typename _Compare>
    _BidirectionalIterator3
    __merge_backward(_BidirectionalIterator1 __first1,
       _BidirectionalIterator1 __last1,
       _BidirectionalIterator2 __first2,
       _BidirectionalIterator2 __last2,
       _BidirectionalIterator3 __result,
       _Compare __comp)
    {
      if (__first1 == __last1)
 return std::copy_backward(__first2, __last2, __result);
      if (__first2 == __last2)
 return std::copy_backward(__first1, __last1, __result);
      --__last1;
      --__last2;
      while (true)
 {
   if (__comp(*__last2, *__last1))
     {
       *--__result = *__last1;
       if (__first1 == __last1)
  return std::copy_backward(__first2, ++__last2, __result);
       --__last1;
     }
   else
     {
       *--__result = *__last2;
       if (__first2 == __last2)
  return std::copy_backward(__first1, ++__last1, __result);
       --__last2;
     }
 }
    }


  template<typename _BidirectionalIterator1, typename _BidirectionalIterator2,
    typename _Distance>
    _BidirectionalIterator1
    __rotate_adaptive(_BidirectionalIterator1 __first,
        _BidirectionalIterator1 __middle,
        _BidirectionalIterator1 __last,
        _Distance __len1, _Distance __len2,
        _BidirectionalIterator2 __buffer,
        _Distance __buffer_size)
    {
      _BidirectionalIterator2 __buffer_end;
      if (__len1 > __len2 && __len2 <= __buffer_size)
 {
   __buffer_end = std::copy(__middle, __last, __buffer);
   std::copy_backward(__first, __middle, __last);
   return std::copy(__buffer, __buffer_end, __first);
 }
      else if (__len1 <= __buffer_size)
 {
   __buffer_end = std::copy(__first, __middle, __buffer);
   std::copy(__middle, __last, __first);
   return std::copy_backward(__buffer, __buffer_end, __last);
 }
      else
 {
   std::rotate(__first, __middle, __last);
   std::advance(__first, std::distance(__middle, __last));
   return __first;
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer>
    void
    __merge_adaptive(_BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::copy(__first, __middle, __buffer);
   std::merge(__buffer, __buffer_end, __middle, __last,
    __first);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::copy(__middle, __last, __buffer);
   std::__merge_backward(__first, __middle, __buffer,
    __buffer_end, __last);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut = std::lower_bound(__middle, __last,
           *__first_cut);
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut = std::upper_bound(__first, __middle,
          *__second_cut);
       __len11 = std::distance(__first, __first_cut);
     }
   _BidirectionalIterator __new_middle =
     std::__rotate_adaptive(__first_cut, __middle, __second_cut,
       __len1 - __len11, __len22, __buffer,
       __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer, __buffer_size);
 }
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Pointer, typename _Compare>
    void
    __merge_adaptive(_BidirectionalIterator __first,
                     _BidirectionalIterator __middle,
       _BidirectionalIterator __last,
       _Distance __len1, _Distance __len2,
       _Pointer __buffer, _Distance __buffer_size,
       _Compare __comp)
    {
      if (__len1 <= __len2 && __len1 <= __buffer_size)
 {
   _Pointer __buffer_end = std::copy(__first, __middle, __buffer);
   std::merge(__buffer, __buffer_end, __middle, __last,
    __first, __comp);
 }
      else if (__len2 <= __buffer_size)
 {
   _Pointer __buffer_end = std::copy(__middle, __last, __buffer);
   std::__merge_backward(__first, __middle, __buffer, __buffer_end,
    __last, __comp);
 }
      else
 {
   _BidirectionalIterator __first_cut = __first;
   _BidirectionalIterator __second_cut = __middle;
   _Distance __len11 = 0;
   _Distance __len22 = 0;
   if (__len1 > __len2)
     {
       __len11 = __len1 / 2;
       std::advance(__first_cut, __len11);
       __second_cut = std::lower_bound(__middle, __last, *__first_cut,
           __comp);
       __len22 = std::distance(__middle, __second_cut);
     }
   else
     {
       __len22 = __len2 / 2;
       std::advance(__second_cut, __len22);
       __first_cut = std::upper_bound(__first, __middle, *__second_cut,
          __comp);
       __len11 = std::distance(__first, __first_cut);
     }
   _BidirectionalIterator __new_middle =
     std::__rotate_adaptive(__first_cut, __middle, __second_cut,
       __len1 - __len11, __len22, __buffer,
       __buffer_size);
   std::__merge_adaptive(__first, __first_cut, __new_middle, __len11,
    __len22, __buffer, __buffer_size, __comp);
   std::__merge_adaptive(__new_middle, __second_cut, __last,
    __len1 - __len11,
    __len2 - __len22, __buffer,
    __buffer_size, __comp);
 }
    }


  template<typename _BidirectionalIterator, typename _Distance>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
      _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2)
    {
      if (__len1 == 0 || __len2 == 0)
 return;
      if (__len1 + __len2 == 2)
 {
   if (*__middle < *__first)
     std::iter_swap(__first, __middle);
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut = std::lower_bound(__middle, __last, *__first_cut);
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut = std::upper_bound(__first, __middle, *__second_cut);
   __len11 = std::distance(__first, __first_cut);
 }
      std::rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIterator __new_middle = __first_cut;
      std::advance(__new_middle, std::distance(__middle, __second_cut));
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22);
    }


  template<typename _BidirectionalIterator, typename _Distance,
    typename _Compare>
    void
    __merge_without_buffer(_BidirectionalIterator __first,
                           _BidirectionalIterator __middle,
      _BidirectionalIterator __last,
      _Distance __len1, _Distance __len2,
      _Compare __comp)
    {
      if (__len1 == 0 || __len2 == 0)
 return;
      if (__len1 + __len2 == 2)
 {
   if (__comp(*__middle, *__first))
     std::iter_swap(__first, __middle);
   return;
 }
      _BidirectionalIterator __first_cut = __first;
      _BidirectionalIterator __second_cut = __middle;
      _Distance __len11 = 0;
      _Distance __len22 = 0;
      if (__len1 > __len2)
 {
   __len11 = __len1 / 2;
   std::advance(__first_cut, __len11);
   __second_cut = std::lower_bound(__middle, __last, *__first_cut,
       __comp);
   __len22 = std::distance(__middle, __second_cut);
 }
      else
 {
   __len22 = __len2 / 2;
   std::advance(__second_cut, __len22);
   __first_cut = std::upper_bound(__first, __middle, *__second_cut,
      __comp);
   __len11 = std::distance(__first, __first_cut);
 }
      std::rotate(__first_cut, __middle, __second_cut);
      _BidirectionalIterator __new_middle = __first_cut;
      std::advance(__new_middle, std::distance(__middle, __second_cut));
      std::__merge_without_buffer(__first, __first_cut, __new_middle,
      __len11, __len22, __comp);
      std::__merge_without_buffer(__new_middle, __second_cut, __last,
      __len1 - __len11, __len2 - __len22, __comp);
    }
# 3128 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
          _DistanceType;


     

     
      ;
      ;

      if (__first == __middle || __middle == __last)
 return;

      _DistanceType __len1 = std::distance(__first, __middle);
      _DistanceType __len2 = std::distance(__middle, __last);

      _Temporary_buffer<_BidirectionalIterator, _ValueType> __buf(__first,
          __last);
      if (__buf.begin() == 0)
 std::__merge_without_buffer(__first, __middle, __last, __len1, __len2);
      else
 std::__merge_adaptive(__first, __middle, __last, __len1, __len2,
         __buf.begin(), _DistanceType(__buf.size()));
    }
# 3183 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    void
    inplace_merge(_BidirectionalIterator __first,
    _BidirectionalIterator __middle,
    _BidirectionalIterator __last,
    _Compare __comp)
    {
      typedef typename iterator_traits<_BidirectionalIterator>::value_type
          _ValueType;
      typedef typename iterator_traits<_BidirectionalIterator>::difference_type
          _DistanceType;


     

     

      ;
      ;

      if (__first == __middle || __middle == __last)
 return;

      const _DistanceType __len1 = std::distance(__first, __middle);
      const _DistanceType __len2 = std::distance(__middle, __last);

      _Temporary_buffer<_BidirectionalIterator, _ValueType> __buf(__first,
          __last);
      if (__buf.begin() == 0)
 std::__merge_without_buffer(__first, __middle, __last, __len1,
        __len2, __comp);
      else
 std::__merge_adaptive(__first, __middle, __last, __len1, __len2,
         __buf.begin(), _DistanceType(__buf.size()),
         __comp);
    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result,
        _Distance __step_size)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::merge(__first, __first + __step_size,
        __first + __step_size,
        __first + __two_step,
        __result);
   __first += __two_step;
 }

      __step_size = std::min(_Distance(__last - __first), __step_size);
      std::merge(__first, __first + __step_size,
       __first + __step_size, __last,
       __result);
    }

  template<typename _RandomAccessIterator1, typename _RandomAccessIterator2,
    typename _Distance, typename _Compare>
    void
    __merge_sort_loop(_RandomAccessIterator1 __first,
        _RandomAccessIterator1 __last,
        _RandomAccessIterator2 __result, _Distance __step_size,
        _Compare __comp)
    {
      const _Distance __two_step = 2 * __step_size;

      while (__last - __first >= __two_step)
 {
   __result = std::merge(__first, __first + __step_size,
    __first + __step_size, __first + __two_step,
    __result,
    __comp);
   __first += __two_step;
 }
      __step_size = std::min(_Distance(__last - __first), __step_size);

      std::merge(__first, __first + __step_size,
       __first + __step_size, __last, __result, __comp);
    }

  template<typename _RandomAccessIterator, typename _Distance>
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last);
    }

  template<typename _RandomAccessIterator, typename _Distance,
    typename _Compare>
    void
    __chunk_insertion_sort(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
      _Distance __chunk_size, _Compare __comp)
    {
      while (__last - __first >= __chunk_size)
 {
   std::__insertion_sort(__first, __first + __chunk_size, __comp);
   __first += __chunk_size;
 }
      std::__insertion_sort(__first, __last, __comp);
    }

  enum { _S_chunk_size = 7 };

  template<typename _RandomAccessIterator, typename _Pointer>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer, __step_size);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first, __step_size);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer, typename _Compare>
    void
    __merge_sort_with_buffer(_RandomAccessIterator __first,
        _RandomAccessIterator __last,
                             _Pointer __buffer, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _Distance;

      const _Distance __len = __last - __first;
      const _Pointer __buffer_last = __buffer + __len;

      _Distance __step_size = _S_chunk_size;
      std::__chunk_insertion_sort(__first, __last, __step_size, __comp);

      while (__step_size < __len)
 {
   std::__merge_sort_loop(__first, __last, __buffer,
     __step_size, __comp);
   __step_size *= 2;
   std::__merge_sort_loop(__buffer, __buffer_last, __first,
     __step_size, __comp);
   __step_size *= 2;
 }
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle,
          __buffer, __buffer_size);
   std::__stable_sort_adaptive(__middle, __last,
          __buffer, __buffer_size);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer);
   std::__merge_sort_with_buffer(__middle, __last, __buffer);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size);
    }

  template<typename _RandomAccessIterator, typename _Pointer,
    typename _Distance, typename _Compare>
    void
    __stable_sort_adaptive(_RandomAccessIterator __first,
      _RandomAccessIterator __last,
                           _Pointer __buffer, _Distance __buffer_size,
                           _Compare __comp)
    {
      const _Distance __len = (__last - __first + 1) / 2;
      const _RandomAccessIterator __middle = __first + __len;
      if (__len > __buffer_size)
 {
   std::__stable_sort_adaptive(__first, __middle, __buffer,
          __buffer_size, __comp);
   std::__stable_sort_adaptive(__middle, __last, __buffer,
          __buffer_size, __comp);
 }
      else
 {
   std::__merge_sort_with_buffer(__first, __middle, __buffer, __comp);
   std::__merge_sort_with_buffer(__middle, __last, __buffer, __comp);
 }
      std::__merge_adaptive(__first, __middle, __last,
       _Distance(__middle - __first),
       _Distance(__last - __middle),
       __buffer, __buffer_size,
       __comp);
    }


  template<typename _RandomAccessIterator>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle);
      std::__inplace_stable_sort(__middle, __last);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle);
    }


  template<typename _RandomAccessIterator, typename _Compare>
    void
    __inplace_stable_sort(_RandomAccessIterator __first,
     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__last - __first < 15)
 {
   std::__insertion_sort(__first, __last, __comp);
   return;
 }
      _RandomAccessIterator __middle = __first + (__last - __first) / 2;
      std::__inplace_stable_sort(__first, __middle, __comp);
      std::__inplace_stable_sort(__middle, __last, __comp);
      std::__merge_without_buffer(__first, __middle, __last,
      __middle - __first,
      __last - __middle,
      __comp);
    }
# 3468 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2>
    bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     
     
      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first2 < *__first1)
   return false;
 else if(*__first1 < *__first2)
   ++__first1;
 else
   ++__first1, ++__first2;

      return __first2 == __last2;
    }
# 3517 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _Compare>
    bool
    includes(_InputIterator1 __first1, _InputIterator1 __last1,
      _InputIterator2 __first2, _InputIterator2 __last2,
      _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first2, *__first1))
   return false;
 else if(__comp(*__first1, *__first2))
   ++__first1;
 else
   ++__first1, ++__first2;

      return __first2 == __last2;
    }
# 3572 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {

     

     

      ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (*__i < *__ii)
     {
       _BidirectionalIterator __j = __last;
       while (!(*__i < *--__j))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3629 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    bool
    next_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {

     

     


      ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(*__i, *__ii))
     {
       _BidirectionalIterator __j = __last;
       while (!bool(__comp(*__i, *--__j)))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3685 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator>
    bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last)
    {

     

     

      ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (*__ii < *__i)
     {
       _BidirectionalIterator __j = __last;
       while (!(*--__j < *__i))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3742 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _BidirectionalIterator, typename _Compare>
    bool
    prev_permutation(_BidirectionalIterator __first,
       _BidirectionalIterator __last, _Compare __comp)
    {

     

     


      ;

      if (__first == __last)
 return false;
      _BidirectionalIterator __i = __first;
      ++__i;
      if (__i == __last)
 return false;
      __i = __last;
      --__i;

      for(;;)
 {
   _BidirectionalIterator __ii = __i;
   --__i;
   if (__comp(*__ii, *__i))
     {
       _BidirectionalIterator __j = __last;
       while (!bool(__comp(*--__j, *__i)))
  {}
       std::iter_swap(__i, __j);
       std::reverse(__ii, __last);
       return true;
     }
   if (__i == __first)
     {
       std::reverse(__first, __last);
       return false;
     }
 }
    }
# 3802 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator, typename _Tp>
    _OutputIterator
    replace_copy(_InputIterator __first, _InputIterator __last,
   _OutputIterator __result,
   const _Tp& __old_value, const _Tp& __new_value)
    {

     
     

     

      ;

      for (; __first != __last; ++__first, ++__result)
 if (*__first == __old_value)
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 3839 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _Predicate, typename _Tp>
    _OutputIterator
    replace_copy_if(_InputIterator __first, _InputIterator __last,
      _OutputIterator __result,
      _Predicate __pred, const _Tp& __new_value)
    {

     
     

     

      ;

      for (; __first != __last; ++__first, ++__result)
 if (__pred(*__first))
   *__result = __new_value;
 else
   *__result = *__first;
      return __result;
    }
# 4176 "/usr/include/c++/4.4/bits/stl_algo.h" 3
}

namespace std __attribute__ ((__visibility__ ("default"))) {
# 4192 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Function>
    _Function
    for_each(_InputIterator __first, _InputIterator __last, _Function __f)
    {

     
      ;
      for (; __first != __last; ++__first)
 __f(*__first);
      return __f;
    }
# 4213 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    inline _InputIterator
    find(_InputIterator __first, _InputIterator __last,
  const _Tp& __val)
    {

     
     

      ;
      return std::__find(__first, __last, __val,
           std::__iterator_category(__first));
    }
# 4237 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    inline _InputIterator
    find_if(_InputIterator __first, _InputIterator __last,
     _Predicate __pred)
    {

     
     

      ;
      return std::__find_if(__first, __last, __pred,
       std::__iterator_category(__first));
    }
# 4266 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2)
    {

     
     
     


      ;
      ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (*__first1 == *__iter)
     return __first1;
      return __last1;
    }
# 4305 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _ForwardIterator,
    typename _BinaryPredicate>
    _InputIterator
    find_first_of(_InputIterator __first1, _InputIterator __last1,
    _ForwardIterator __first2, _ForwardIterator __last2,
    _BinaryPredicate __comp)
    {

     
     
     


      ;
      ;

      for (; __first1 != __last1; ++__first1)
 for (_ForwardIterator __iter = __first2; __iter != __last2; ++__iter)
   if (__comp(*__first1, *__iter))
     return __first1;
      return __last1;
    }
# 4337 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while(++__next != __last)
 {
   if (*__first == *__next)
     return __first;
   __first = __next;
 }
      return __last;
    }
# 4369 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _BinaryPredicate>
    _ForwardIterator
    adjacent_find(_ForwardIterator __first, _ForwardIterator __last,
    _BinaryPredicate __binary_pred)
    {

     
     


      ;
      if (__first == __last)
 return __last;
      _ForwardIterator __next = __first;
      while(++__next != __last)
 {
   if (__binary_pred(*__first, *__next))
     return __first;
   __first = __next;
 }
      return __last;
    }
# 4401 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Tp>
    typename iterator_traits<_InputIterator>::difference_type
    count(_InputIterator __first, _InputIterator __last, const _Tp& __value)
    {

     
     

      ;
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (*__first == __value)
   ++__n;
      return __n;
    }
# 4426 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _Predicate>
    typename iterator_traits<_InputIterator>::difference_type
    count_if(_InputIterator __first, _InputIterator __last, _Predicate __pred)
    {

     
     

      ;
      typename iterator_traits<_InputIterator>::difference_type __n = 0;
      for (; __first != __last; ++__first)
 if (__pred(*__first))
   ++__n;
      return __n;
    }
# 4466 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2>
    _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2)
    {

     
     
     


      ;
      ;


      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 return std::find(__first1, __last1, *__first2);


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   __first1 = std::find(__first1, __last1, *__first2);
   if (__first1 == __last1)
     return __last1;

   __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (*__current == *__p)
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }
# 4537 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator1, typename _ForwardIterator2,
    typename _BinaryPredicate>
    _ForwardIterator1
    search(_ForwardIterator1 __first1, _ForwardIterator1 __last1,
    _ForwardIterator2 __first2, _ForwardIterator2 __last2,
    _BinaryPredicate __predicate)
    {

     
     
     


      ;
      ;


      if (__first1 == __last1 || __first2 == __last2)
 return __first1;


      _ForwardIterator2 __p1(__first2);
      if (++__p1 == __last2)
 {
   while (__first1 != __last1
   && !bool(__predicate(*__first1, *__first2)))
     ++__first1;
   return __first1;
 }


      _ForwardIterator2 __p;
      _ForwardIterator1 __current = __first1;

      for (;;)
 {
   while (__first1 != __last1
   && !bool(__predicate(*__first1, *__first2)))
     ++__first1;
   if (__first1 == __last1)
     return __last1;

   __p = __p1;
   __current = __first1;
   if (++__current == __last1)
     return __last1;

   while (__predicate(*__current, *__p))
     {
       if (++__p == __last2)
  return __first1;
       if (++__current == __last1)
  return __last1;
     }
   ++__first1;
 }
      return __first1;
    }
# 4611 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp>
    _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val)
    {

     
     

      ;

      if (__count <= 0)
 return __first;
      if (__count == 1)
 return std::find(__first, __last, __val);
      return std::__search_n(__first, __last, __count, __val,
        std::__iterator_category(__first));
    }
# 4647 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Integer, typename _Tp,
           typename _BinaryPredicate>
    _ForwardIterator
    search_n(_ForwardIterator __first, _ForwardIterator __last,
      _Integer __count, const _Tp& __val,
      _BinaryPredicate __binary_pred)
    {

     
     

      ;

      if (__count <= 0)
 return __first;
      if (__count == 1)
 {
   while (__first != __last && !bool(__binary_pred(*__first, __val)))
     ++__first;
   return __first;
 }
      return std::__search_n(__first, __last, __count, __val, __binary_pred,
        std::__iterator_category(__first));
    }
# 4689 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _UnaryOperation>
    _OutputIterator
    transform(_InputIterator __first, _InputIterator __last,
       _OutputIterator __result, _UnaryOperation __unary_op)
    {

     
     


      ;

      for (; __first != __last; ++__first, ++__result)
 *__result = __unary_op(*__first);
      return __result;
    }
# 4725 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _BinaryOperation>
    _OutputIterator
    transform(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _OutputIterator __result,
       _BinaryOperation __binary_op)
    {

     
     
     


      ;

      for (; __first1 != __last1; ++__first1, ++__first2, ++__result)
 *__result = __binary_op(*__first1, *__first2);
      return __result;
    }
# 4758 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Tp>
    void
    replace(_ForwardIterator __first, _ForwardIterator __last,
     const _Tp& __old_value, const _Tp& __new_value)
    {

     

     

     

      ;

      for (; __first != __last; ++__first)
 if (*__first == __old_value)
   *__first = __new_value;
    }
# 4790 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate, typename _Tp>
    void
    replace_if(_ForwardIterator __first, _ForwardIterator __last,
        _Predicate __pred, const _Tp& __new_value)
    {

     

     

     

      ;

      for (; __first != __last; ++__first)
 if (__pred(*__first))
   *__first = __new_value;
    }
# 4822 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Generator>
    void
    generate(_ForwardIterator __first, _ForwardIterator __last,
      _Generator __gen)
    {

     
     

      ;

      for (; __first != __last; ++__first)
 *__first = __gen();
    }
# 4850 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _OutputIterator, typename _Size, typename _Generator>
    _OutputIterator
    generate_n(_OutputIterator __first, _Size __n, _Generator __gen)
    {

     



      for (; __n > 0; --__n, ++__first)
 *__first = __gen();
      return __first;
    }
# 4886 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result)
    {

     
     

     

      ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result,
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 4925 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator, typename _OutputIterator,
    typename _BinaryPredicate>
    inline _OutputIterator
    unique_copy(_InputIterator __first, _InputIterator __last,
  _OutputIterator __result,
  _BinaryPredicate __binary_pred)
    {

     
     

      ;

      if (__first == __last)
 return __result;
      return std::__unique_copy(__first, __last, __result, __binary_pred,
    std::__iterator_category(__first),
    std::__iterator_category(__result));
    }
# 4957 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {

     

      ;

      if (__first != __last)
 for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
   std::iter_swap(__i, __first + (std::rand() % ((__i - __first) + 1)));
    }
# 4985 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _RandomNumberGenerator>
    void
    random_shuffle(_RandomAccessIterator __first, _RandomAccessIterator __last,
     _RandomNumberGenerator& __rand)
    {

     

      ;

      if (__first == __last)
 return;
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 std::iter_swap(__i, __first + __rand((__i - __first) + 1));
    }
# 5017 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Predicate>
    inline _ForwardIterator
    partition(_ForwardIterator __first, _ForwardIterator __last,
       _Predicate __pred)
    {

     

     

      ;

      return std::__partition(__first, __last, __pred,
         std::__iterator_category(__first));
    }
# 5051 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     
      ;
      ;

      std::__heap_select(__first, __middle, __last);
      std::sort_heap(__first, __middle);
    }
# 5090 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    partial_sort(_RandomAccessIterator __first,
   _RandomAccessIterator __middle,
   _RandomAccessIterator __last,
   _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     

      ;
      ;

      std::__heap_select(__first, __middle, __last, __comp);
      std::sort_heap(__first, __middle, __comp);
    }
# 5128 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     
      ;
      ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2);
    }
# 5167 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    nth_element(_RandomAccessIterator __first, _RandomAccessIterator __nth,
  _RandomAccessIterator __last, _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     

      ;
      ;

      if (__first == __last || __nth == __last)
 return;

      std::__introselect(__first, __nth, __last,
    std::__lg(__last - __first) * 2, __comp);
    }
# 5205 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     
      ;

      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2);
   std::__final_insertion_sort(__first, __last);
 }
    }
# 5241 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;


     

     

      ;

      if (__first != __last)
 {
   std::__introsort_loop(__first, __last,
    std::__lg(__last - __first) * 2, __comp);
   std::__final_insertion_sort(__first, __last, __comp);
 }
    }
# 5282 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

     
      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first2 < *__first1)
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5345 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    merge(_InputIterator1 __first1, _InputIterator1 __last1,
   _InputIterator2 __first2, _InputIterator2 __last2,
   _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

     

      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first2, *__first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5405 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;


     

     
      ;

      _Temporary_buffer<_RandomAccessIterator, _ValueType> __buf(__first,
         __last);
      if (__buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last);
      else
 std::__stable_sort_adaptive(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()));
    }
# 5447 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _RandomAccessIterator, typename _Compare>
    inline void
    stable_sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
  _Compare __comp)
    {
      typedef typename iterator_traits<_RandomAccessIterator>::value_type
 _ValueType;
      typedef typename iterator_traits<_RandomAccessIterator>::difference_type
 _DistanceType;


     

     


      ;

      _Temporary_buffer<_RandomAccessIterator, _ValueType> __buf(__first,
         __last);
      if (__buf.begin() == 0)
 std::__inplace_stable_sort(__first, __last, __comp);
      else
 std::__stable_sort_adaptive(__first, __last, __buf.begin(),
        _DistanceType(__buf.size()), __comp);
    }
# 5493 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

     
     
      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (*__first1 < *__first2)
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (*__first2 < *__first1)
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5560 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_union(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

     

     

      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 {
   if (__comp(*__first1, *__first2))
     {
       *__result = *__first1;
       ++__first1;
     }
   else if (__comp(*__first2, *__first1))
     {
       *__result = *__first2;
       ++__first2;
     }
   else
     {
       *__result = *__first1;
       ++__first1;
       ++__first2;
     }
   ++__result;
 }
      return std::copy(__first2, __last2, std::copy(__first1, __last1,
          __result));
    }
# 5627 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     
     
      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   ++__first1;
 else if (*__first2 < *__first1)
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 5684 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_intersection(_InputIterator1 __first1, _InputIterator1 __last1,
       _InputIterator2 __first2, _InputIterator2 __last2,
       _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

     

      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   ++__first1;
 else if (__comp(*__first2, *__first1))
   ++__first2;
 else
   {
     *__result = *__first1;
     ++__first1;
     ++__first2;
     ++__result;
   }
      return __result;
    }
# 5742 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     
     
      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (*__first2 < *__first1)
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 5803 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_difference(_InputIterator1 __first1, _InputIterator1 __last1,
     _InputIterator2 __first2, _InputIterator2 __last2,
     _OutputIterator __result, _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

     

      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(*__first2, *__first1))
   ++__first2;
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first1, __last1, __result);
    }
# 5861 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator>
    _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

     
     
      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (*__first1 < *__first2)
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (*__first2 < *__first1)
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2, std::copy(__first1,
          __last1, __result));
    }
# 5927 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _InputIterator1, typename _InputIterator2,
    typename _OutputIterator, typename _Compare>
    _OutputIterator
    set_symmetric_difference(_InputIterator1 __first1, _InputIterator1 __last1,
        _InputIterator2 __first2, _InputIterator2 __last2,
        _OutputIterator __result,
        _Compare __comp)
    {
      typedef typename iterator_traits<_InputIterator1>::value_type
 _ValueType1;
      typedef typename iterator_traits<_InputIterator2>::value_type
 _ValueType2;


     
     
     

     

     

     

      ;
      ;

      while (__first1 != __last1 && __first2 != __last2)
 if (__comp(*__first1, *__first2))
   {
     *__result = *__first1;
     ++__first1;
     ++__result;
   }
 else if (__comp(*__first2, *__first1))
   {
     *__result = *__first2;
     ++__first2;
     ++__result;
   }
 else
   {
     ++__first1;
     ++__first2;
   }
      return std::copy(__first2, __last2,
         std::copy(__first1, __last1, __result));
    }
# 5984 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (*__first < *__result)
   __result = __first;
      return __result;
    }
# 6012 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    min_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {

     
     


      ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(*__first, *__result))
   __result = __first;
      return __result;
    }
# 6040 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator>
    _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last)
    {

     
     

      ;

      if (__first == __last)
 return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (*__result < *__first)
   __result = __first;
      return __result;
    }
# 6068 "/usr/include/c++/4.4/bits/stl_algo.h" 3
  template<typename _ForwardIterator, typename _Compare>
    _ForwardIterator
    max_element(_ForwardIterator __first, _ForwardIterator __last,
  _Compare __comp)
    {

     
     


      ;

      if (__first == __last) return __first;
      _ForwardIterator __result = __first;
      while (++__first != __last)
 if (__comp(*__result, *__first))
   __result = __first;
      return __result;
    }

}
# 63 "/usr/include/c++/4.4/algorithm" 2 3
# 4 "env.hpp" 2
# 27 "env.hpp"
class LightModel
{
 int VOXEL_NUMBER;
 float SPAN;
 float WORLDtoVOX;
 float*** exposure;
 float SPREAD;
 int DEPTH;
 float STRENGTH, FADE;
 float RAN, VERT;

public:

 LightModel(int vn, float s)
 {
  VOXEL_NUMBER=vn;
  SPAN=s;
  WORLDtoVOX=((float)(VOXEL_NUMBER-1)/(SPAN*2));

  exposure=new float** [vn];
  for(int i=0;i<vn;i++)
  {
   *(exposure+i)=new float* [vn];
   for(int j=0;j<vn;j++) exposure[i][j]=new float[vn];
  }
 }

 void setParam(float sp, int dp, float ca, float cb, float r, float v)
 {
  SPREAD=sp;
  DEPTH=dp;
  STRENGTH=ca;
  FADE=cb;
  RAN=r;
  VERT=v;
 }

 void initExposureMap()
 {
  for(int k=0;k<VOXEL_NUMBER;k++)
  {
   for(int i=0;i<VOXEL_NUMBER;i++)
   {
    for(int j=0;j<VOXEL_NUMBER;j++)
    {
     exposure[i][j][k] = 1.0f;
    }


   }
  }
 }

 void getVoxelIndex(V3f pos, int &x, int &y, int &z)
 {
  y = (pos.y*WORLDtoVOX);
  x = (pos.x*WORLDtoVOX + ((float)VOXEL_NUMBER)/2.0f);
  z = (pos.z*WORLDtoVOX + ((float)VOXEL_NUMBER)/2.0f);
  x = std::max(std::min(x,VOXEL_NUMBER-1),0);
  y = std::max(std::min(y,VOXEL_NUMBER-1),0);
  z = std::max(std::min(z,VOXEL_NUMBER-1),0);
 }

 void getCornerVoxelIndex(V3f pos, int &x, int &y, int &z)
 {
  y = (pos.y*WORLDtoVOX);
  x = (pos.x*WORLDtoVOX + ((float)VOXEL_NUMBER-1)/2.0f);
  z = (pos.z*WORLDtoVOX + ((float)VOXEL_NUMBER-1)/2.0f);
  x = std::max(std::min(x,VOXEL_NUMBER-2),0);
  y = std::max(std::min(y,VOXEL_NUMBER-2),0);
  z = std::max(std::min(z,VOXEL_NUMBER-2),0);
 }

 float getContinuousExposure(V3f pos)
 {
  int x,y,z;
  getCornerVoxelIndex(pos,x,y,z);

  float U(pos.x*WORLDtoVOX);
  U-=floor(U);
  float V(pos.y*WORLDtoVOX);
  V-=floor(V);
  float W(pos.z*WORLDtoVOX);
  W-=floor(W);

  float interpolated=0;

  interpolated+=(1.0f-U)*(1.0f-V)*(1.0f-W)*exposure[x][y][z];
  interpolated+=(U)*(1.0f-V)*(1.0f-W)*exposure[x+1][y][z];
  interpolated+=(1.0f-U)*(V)*(1.0f-W)*exposure[x][y+1][z];
  interpolated+=(U)*(V)*(1.0f-W)*exposure[x+1][y+1][z];

  interpolated+=(1.0f-U)*(1.0f-V)*(W)*exposure[x][y][z+1];
  interpolated+=(U)*(1.0f-V)*(W)*exposure[x+1][y][z+1];
  interpolated+=(1.0f-U)*(V)*(W)*exposure[x][y+1][z+1];
  interpolated+=(U)*(V)*(W)*exposure[x+1][y+1][z+1];

  return interpolated;
 }


 V3f getContinuousEnvDir(V3f pos, float rad)
 {
  V3f result;

  pos.x=std::max(std::min(pos.x,SPAN*0.9999f),SPAN*-0.9999f);
  pos.y=std::max(std::min(pos.y,SPAN*1.9999f),0.0001f);
  pos.z=std::max(std::min(pos.z,SPAN*0.9999f),SPAN*-0.9999f);
  float xa(std::max(pos.x-rad,SPAN*-0.9999f)), xb(std::min(pos.x+rad,SPAN*0.9999f));
  float ya(std::max(pos.y-rad,0.0001f)), yb(std::min(pos.y+rad,SPAN*1.9999f));
  float za(std::max(pos.z-rad,SPAN*-0.9999f)), zb(std::min(pos.z+rad,SPAN*0.9999f));

  result.x+=getContinuousExposure(V3f(xb,pos.y,pos.z));
  result.x-=getContinuousExposure(V3f(xa,pos.y,pos.z));
  result.y+=getContinuousExposure(V3f(pos.x,yb,pos.z));
  result.y-=getContinuousExposure(V3f(pos.x,ya,pos.z));
  result.z+=getContinuousExposure(V3f(pos.x,pos.y,zb));
  result.z-=getContinuousExposure(V3f(pos.x,pos.y,za));

  return result;
 }


 void shadow3D(V3f pos, bool sub)
 {
  float dist;
  int x, y, z, xb, yb, zb;
  getVoxelIndex(pos,x,y,z);
  int max(DEPTH), min(0);

  if(sub) for(float i=min; i<max; i++)
  {
   int n(i*SPREAD);
   for(float j=-n;j<=n;j++)
    for(float k=-n;k<=n;k++)
    {
     dist = sqrt(i*i+j*j+k*k);
     xb=x+j; yb=y-i; zb = z+k;
     if(xb>=0&&xb<VOXEL_NUMBER&&yb>=0&&yb<VOXEL_NUMBER&&zb>=0&&zb<VOXEL_NUMBER)
     {
      exposure[xb][yb][zb]*=( 1 - (STRENGTH*pow(FADE,-dist)) );
      if(exposure[xb][yb][zb]<0)
       exposure[xb][yb][zb]=0;
     }
    }
  }
  else for(float i=min; i<max; i++)
  {
   int n(i*SPREAD);
   for(float j=-n;j<=n;j++)
    for(float k=-n;k<=n;k++)
    {
     dist = sqrt(i*i+j*j+k*k);
     xb=x+j; yb=y-i; zb = z+k;
     if(xb>=0&&xb<VOXEL_NUMBER&&yb>=0&&yb<VOXEL_NUMBER&&zb>=0&&zb<VOXEL_NUMBER)
     {
      exposure[xb][yb][zb]/=( 1 - (STRENGTH*pow(FADE,-dist)) );
      if(exposure[xb][yb][zb] >1.0)
       exposure[xb][yb][zb]=1.0;
     }
    }
  }
 }

};
# 23 "lsystem.l" 2
# 1 "parameters.inc" 1
# 24 "lsystem.l" 2
# 1 "extra.hpp" 1


int theNodeNum=1;

double randn_trig(double mu=0.0, double sigma=1.0) {
 static bool deviateAvailable=false;
 static float storedDeviate;
 double dist, angle;




 if (!deviateAvailable) {



  dist=sqrt( -2.0 * log(double(rand()) / double(2147483647)) );
  angle=2.0 * 3.141593f * (double(rand()) / double(2147483647));


  storedDeviate=dist*cos(angle);
  deviateAvailable=true;


  return dist * sin(angle) * sigma + mu;
 }



 else {
  deviateAvailable=false;
  return storedDeviate*sigma + mu;
 }
}

float dist3f(V3f sp,V3f ep){
 float dist;
 dist=sqrt(pow(sp.x-ep.x,2.f)+pow(sp.y-ep.y,2.f)+pow(sp.z-ep.z,2.f));
 return dist;
}


double getNorm(double m, double s, double l, double u){
double rn=0.0;
int cnt=0;

while ( rn < l || rn > u) {
  rn = randn_trig(m, s);
  cnt++;
  if (cnt > 1000) {
   rn=m;
   break;
  }
 }
 return rn;
}


std::string randomString(int length) {



 std::string allPossible;
 std::string str;

 for (int i = 65; i <= 90; i++) {
   allPossible += static_cast<char>(i);
   allPossible += static_cast<char>(i+32);
 }

 int numberOfPossibilities = allPossible.length();
 for (int i = 0; i < length; i++) {
   str += allPossible[rand() % numberOfPossibilities];
 }

  return str;
}

int tabs(int ntabs){
 for(int i=0;i<ntabs;i++){
  Printf("   ");
 }
 return 0;
}
# 25 "lsystem.l" 2
# 1 "quaternion.hpp" 1
# 16 "quaternion.hpp"
# 1 "/usr/include/c++/4.4/cmath" 1 3
# 41 "/usr/include/c++/4.4/cmath" 3
       
# 42 "/usr/include/c++/4.4/cmath" 3
# 17 "quaternion.hpp" 2


static const double EPSILON = 1e-6;



template<class T>
struct Quaternion
{

  T scalar;
  V3<T> bivec;


  Quaternion(void) : scalar(0) , bivec(0,0,0) {}
  Quaternion(const T& _scalar, const V3<T>& _bivec = V3<T>(0,0,0))
    : scalar(_scalar) , bivec(_bivec) {}
  Quaternion(const T& w, const T& x, const T& y, const T& z)
    : scalar(w) , bivec(x,y,z) {}
  Quaternion(const Quaternion& q)
    : scalar(q.scalar) , bivec(q.bivec) {}



  Quaternion& operator=(const Quaternion& q)
  {
    scalar = q.scalar;
    bivec = q.bivec;
    return (*this);
  }


  Quaternion operator*(const Quaternion& q) const
  {
    return Quaternion(scalar * q.scalar - bivec * q.bivec,
        scalar * q.bivec + q.scalar * bivec + bivec % q.bivec);
  }
  Quaternion& operator*=(const Quaternion& q)
  {
    return (*this) = (*this) * q;
  }


  Quaternion operator*(const T& mult) const
  {
    return Quaternion(scalar * mult , bivec * mult);
  }
  Quaternion& operator*=(const T& mult)
  {
    return (*this) = (*this) * mult;
  }
  friend Quaternion operator*(const T& mult, const Quaternion& q)
  {
    return Quaternion(mult * q.scalar , mult * q.bivec);
  }


  Quaternion operator/(const Quaternion& q) const
  {
    return (*this) * q.inverse();
  }
  Quaternion& operator/=(const Quaternion& q)
  {
    return (*this) = (*this) / q;
  }


  Quaternion operator/(const T& mult) const
  {
    return Quaternion(scalar / mult , bivec / mult);
  }
  Quaternion& operator/=(const T& mult)
  {
    return (*this) = (*this) / mult;
  }

  friend Quaternion operator/(const T& mult,const Quaternion& q)
  {
    return mult * q.inverse();
  }


  Quaternion operator+(const Quaternion& q) const
  {
    return Quaternion(scalar + q.scalar , bivec + q.bivec);
  }
  Quaternion& operator+=(const Quaternion& q)
  {
    return (*this) = (*this) + q;
  }


  Quaternion operator-(const Quaternion& q) const
  {
    return Quaternion(scalar - q.scalar , bivec - q.bivec);
  }
  Quaternion& operator-=(const Quaternion& q)
  {
    return (*this) = (*this) - q;
  }


  Quaternion operator-(void) const
  {
    return Quaternion(-scalar , -bivec);
  }



  T norm2(void) const
  {
    return scalar * scalar + bivec * bivec;
  }
  T norm(void) const
  {
    return std::sqrt(norm2());
  }


  Quaternion reverse(void) const
  {
    return Quaternion(scalar,-bivec);
  }
  Quaternion& revert(void)
  {
    bivec = -bivec;
    return (*this);
  }


  Quaternion inverse(void) const
  {
    return reverse() / norm2();
  }
  Quaternion& invert(void)
  {
    return (*this) = this->inverse();
  }


  Quaternion normalized(void) const
  {
    Quaternion q(*this);
    return q.normalize();
  }
  Quaternion& normalize(void)
  {
    T length = norm();
    if(length > EPSILON)
      (*this) /= length;
    return (*this);
  }


  V3<T> rotateVector(const V3<T>& vec) const
  {
    return ((*this) * Quaternion(0,vec) * this->reverse()).bivec;
  }


  T getAngle(void) const
  {
    return 2 * atan2(bivec.Length(),scalar);
  }


  V3<T> getAxis(void) const
  {
    V3<T> ans(bivec);
    if(ans.Length() > EPSILON)
      ans.Normalize();
    return ans;
  }
};


typedef Quaternion<float> Qf;
typedef Quaternion<double> Qd;




Qf axisAngle(V3f axis, float angle)
{

  if(axis.Length() < EPSILON)
    return Qf(1);

  angle = 0.5 * ((angle)*3.14159265358979323846/180.);
  return Qf(cos(angle) , sin(angle) * axis.Normalize());
}



Qf axisAngle(const V3f& axis)
{
  return axisAngle(axis,axis.Length());
}


Qf rotateTo(const V3f& from, const V3f& to)
{
  return axisAngle(from % to, ((atan2((from%to).Length(),from*to))*180./3.14159265358979323846));
}


Qf slrp(const Qf& q1, const Qf& q2, float t)
{

  Qf q = q1 * q2.reverse();
  q.normalize();
  float omega = acos(q.scalar);


  if(fabs(omega) < EPSILON) return q1;

  Qf slrp = sin((1-t) * omega) * q1 + sin(t * omega) * q2;
  slrp.normalize();
  return slrp;
}
# 26 "lsystem.l" 2
# 1 "datastruc.inc" 1

struct InternodeData
{
  bool lateral;
  bool isLeaf;
  bool manPrune;
  int node, order;
  int nodenum;
  float light;
  float expose;
  float vigor;
  float demand;
  unsigned int count;
  bool newInternode;
  float budvigor;
  int numSegs;
  float iNodeLen;
  int flushno;
  int c;
  bool wasNAN;
  int tn,rn, pn;

  float length, width;

  InternodeData(bool _lateral = false)
    : node(0), order(0), length(getNorm(4.6, 0.5, 1.0, 12.0)) , width(1.5) , lateral(_lateral) ,
      light(0.) , expose(0.), vigor(0.) , demand(0.) , count(0) , nodenum(0),
      newInternode(true), isLeaf(true), manPrune(false), budvigor(0), numSegs(0), iNodeLen(0.), flushno(0), c(16), wasNAN(false), tn(0), rn(0), pn(0)
  {}

  InternodeData(int _nod, int _ord, float _length, bool _lateral = false , bool _leaf=true)
    : node(_nod), order(_ord), length(_length) , width(1.5) , lateral(_lateral) ,
      light(0.) , expose(0.), vigor(0.) , demand(0.) , count(0) , nodenum(0),
      newInternode(true) , isLeaf(_leaf), manPrune(false), budvigor(0),numSegs(0), iNodeLen(0.), flushno(0),c(16), wasNAN(false), tn(0), rn(0), pn(0)
  {}
};


struct BudData
{
  bool lateral;
  int node, order;
  float light;
  float vigor;
  float activity;

  unsigned int axilIndex;
  unsigned int leafIndex;

  V3f pos;
  int tn, rn, pn;

  BudData(int _nod=0, int _ord=0, unsigned int _leaf = 1,unsigned int _axil=0, bool _lateral = false, float _act=1.0, int _tn=0, int _rn=0, int _pn=0)
    : node(_nod), order(_ord), leafIndex(_leaf), axilIndex(_axil), lateral(_lateral), light(0), vigor(0), activity(_act), pos(), tn(_tn), rn(_rn), pn(_pn)
  {}
};


struct LeafData
{
  int node, order;
  unsigned int leafIndex;
  float leafsize;
  float pitch;
  float down;
  float expose;
  V3f pos;
  bool dead;
  int fdead;
  float light;
  bool newLeaf;

  float bWidth;
  float age;
  int c;
  int tn, rn, pn;

  LeafData(int _nod=0, int _ord=0, unsigned int _index = 1, float _p=0., float _ls=0., float _lt=0., int _tn=0, int _rn=0, int _pn=0)
    : node(_nod), order(_ord), leafIndex(_index), pitch(_p) , down(0.), expose(0.), leafsize(_ls), pos(), dead(false), fdead(0), light(_lt), newLeaf(true), bWidth(0), age(0), c(0), tn(_tn), rn(_rn), pn(_pn)
  {}
};
# 27 "lsystem.l" 2
# 1 "mapBranches.hpp" 1




map<int,int> nbranches;
map<int,int> Descend;
map<int,int> nodesPerAxis;
map<int,int>::iterator it;
map<int,int> ParentOfNode;
map<int,int> LastNodeOfAxis;
map<int,V3f> sxXYZ;
map<int,int> sbeb;
char mtgName [512];
int xN,yN,zN,widthN,lenN,typeN,nodeN, levelN;
int mapBranches (V3f pos)
{
 string sline;
 int axis,nn, ln, descend;

 FILE *fp;
 char line[256];

 ifstream mtg;
 bool foundStart;
 char * cstr, *pch;
 int retValue=1;
 int nodenum, curBranch,nb,curOrder;
 float bx,by,bz;
 int loc;
 int branchLevel [10];
 for(int i=0;i<10;i++){
  branchLevel[i]=0;
 }
 foundStart=false;
 mtg.open(mtgName, ifstream::in);
  if(mtg.good()){
  Printf("all good with %s in mapBranches\n",mtgName);
 } else {
  Printf("%s NOT good in mapBranches ", mtgName);
  if(mtg.fail()){
   Printf("it failed\n");
  }
  if(mtg.eof()){
   Printf("it eof\n");
  }
  if(mtg.bad()){
   Printf("it bad\n");
  }
 }

 char cmdLine[256];

 sprintf(cmdLine,"%s combined.py %s","/usr/bin/python",mtgName);



  fp = popen(cmdLine, "r");

 while ( fgets( line, sizeof line, fp))
 {
  Printf("%s", line);
  }



 pclose(fp);


 fp=fopen("nbranches.txt","r");
 while (fscanf(fp,"%i %i %i", &axis, &loc, &nn) != (-1)) {

  nodesPerAxis[axis]=nn;
 }
 fclose(fp);

 fp=fopen("parents.txt","r");
 while (fscanf(fp,"%i %i", &nn, &axis) != (-1)) {
  ParentOfNode[nn]=axis;
 }
 fclose(fp);

 fp=fopen("lastNodes.txt","r");
 while (fscanf(fp,"%i %i %i", &axis, &ln, &nb) != (-1)) {


   LastNodeOfAxis[axis]=ln;
 }
 fclose(fp);

 fp=fopen("branchXYZ.txt","r");
 while (fscanf(fp,"%i %i %f %f %f", &axis, &loc, &bx, &by, &bz) != (-1)) {
  sxXYZ[loc]=V3f(bx+pos.x,by+pos.y,bz+pos.z);

 }
 fclose(fp);


 while (!mtg.eof() && mtg.good() ){
  getline(mtg,sline);
  if(foundStart){
   cstr = new char [sline.size()+1];
   if(foundStart){
    strcpy (cstr, sline.c_str());
    pch = strtok (cstr,"\t");
    int ic=1;
    while (pch != __null) {
     pch = strtok (__null, "\t");
     if(pch!= __null)
      if(ic==nodeN){nodenum=atoi(pch);}
      if(ic==levelN){curOrder=atoi(pch)-1;}
      ic++;
     }
    }
   if(sline.find("P1") != -1){


    curBranch=nodenum;

   }
   if(sline.find("^/N") != -1 ) {
    curBranch=branchLevel[curOrder-1];
    nb=nbranches.find(curBranch)->second;
    nb++;
    nbranches[curBranch]=nb;


   }
   if(sline.find("^<N") != -1 ) {
    branchLevel[curOrder]=nodenum;
   }
  } else {


   if((int)sline.find("ENTITY-CODE") != -1){
    foundStart=true;
    Printf("Found start of data\n");

    cstr = new char [sline.size()+1];
     strcpy (cstr, sline.c_str());
     pch = strtok (cstr,"\t");

    xN=0;
    yN=0;
    zN=0;
    widthN=0;
    lenN=0;
    typeN=0;
    nodeN=0;
    levelN=0;
    char test[10];
    int ic=1;
      while (pch != __null)
      {
        pch = strtok (__null, "\t");
      if(pch != __null) {
       sprintf(test,"%s",pch);

       if(strcmp("XX",test) ==0) {xN=ic;}
       if(strcmp("YY",test) ==0){yN=ic;}
       if(strcmp("ZZ",test) ==0){zN=ic;}
       if(strcmp("TopDia",test) ==0){widthN=ic;}
       if(strcmp("ILength",test) ==0){lenN=ic;}
       if(strcmp("NType",test) ==0){typeN=ic;}
       if(strcmp("Node",test) ==0){nodeN=ic;}
       if(strcmp("Level",test) ==0){levelN=ic;}
       ic++;
      }
      }
      Printf("Test we have all the data\n");
    if( xN==0 || yN==0 || zN==0 || widthN==0 || lenN==0 || typeN==0 || nodeN==0 || levelN==0){
     Printf("Not all of the the required features were found\n");
     Printf("%i %i %i %i %i %i %i %i \n",xN,yN,zN,widthN,lenN,typeN,nodeN, levelN);
     retValue=1;
    } else {
     Printf("Found all the bits we want\n");
     Printf("%i %i %i %i %i %i %i %i \n",xN,yN,zN,widthN,lenN,typeN,nodeN, levelN);
     retValue=0;
    }
   }
  }

 }

 Printf("Finished with ret = %i\n\n",retValue);
 mtg.close();
  return retValue;
}
# 28 "lsystem.l" 2
# 1 "MTGWriter.hpp" 1







int MTGcurOrder;
int MTGstack[20][2];
bool MTGplantStart, MTGlatStart;

void writeLine(FILE *MTGfile, float x,float y, float z, float wd,int fno,float vig, int nsegs, float nlen, int ntype, int level, int theNodeNum){

 fprintf(MTGfile, "%.2f	%.2f	%.2f	%.2f	%i	%.2f	%i	%.2f	%i	%i	%i\n",x,y,z,wd,fno,vig,nsegs,nlen,ntype,theNodeNum,level);
}

void createMTG(FILE *MTGfile, int (&MTGstack)[20][2], int &MTGcurOrder, bool &MTGplantStart, bool &MTGlatStart)
{
 time_t rawtime;
  struct tm * timeinfo;

  time ( &rawtime );
  timeinfo = localtime ( &rawtime );
  fprintf ( MTGfile,"#Created: %s", asctime (timeinfo) );
  fprintf(MTGfile,"# input file was %s\n","842/Plant06.mtg");





 string line;



 MTGcurOrder=0;
 MTGstack[MTGcurOrder][0]=1;
 MTGstack[MTGcurOrder][1]=1;
 MTGplantStart=true;
 MTGlatStart=false;
# 52 "MTGWriter.hpp"
 fprintf(MTGfile, "CODE:	FORM-A\n");
 fprintf(MTGfile, "CLASSES:\n");
 fprintf(MTGfile, "SYMBOL	SCALE	DECOMPOSITION	INDEXATION	DEFINITION\n");
 fprintf(MTGfile, "$	0	FREE	FREE	IMPLICIT\n");
 fprintf(MTGfile, "P	1	CONNECTED	FREE	EXPLICIT\n");
 fprintf(MTGfile, "S	2	CONNECTED	FREE	EXPLICIT\n");
 fprintf(MTGfile, "N	3	CONNECTED	FREE	EXPLICIT\n");
 fprintf(MTGfile, "\n");

 fprintf(MTGfile, "DESCRIPTION:\n");
 fprintf(MTGfile, "LEFT	RIGHT	RELTYPE	MAX\n");
 fprintf(MTGfile, "S	S	+	?\n");
 fprintf(MTGfile, "S	S	<	?\n");
 fprintf(MTGfile, "N	N	<	?\n");
 fprintf(MTGfile, "N	N	+	?\n");
 fprintf(MTGfile, "\n");
 fprintf(MTGfile, "FEATURES:\n");
 fprintf(MTGfile, "NAME	TYPE\n");
 fprintf(MTGfile, "\n");
 fprintf(MTGfile, "XX\tREAL\n");
 fprintf(MTGfile, "YY\tREAL\n");
 fprintf(MTGfile, "ZZ\tREAL\n");
 fprintf(MTGfile,"TopDia	REAL\n");
 fprintf(MTGfile,"FlushNo\tINT\n");
 fprintf(MTGfile,"FlushLen\tREAL\n");
 fprintf(MTGfile,"NumSegs\tINT\n");
 fprintf(MTGfile,"ILength\tREAL\n");
 fprintf(MTGfile,"NType\tINT\n");
 fprintf(MTGfile,"Node\tINT\n");
 fprintf(MTGfile,"Level\tINT\n");
 fprintf(MTGfile, "\n");
 fprintf(MTGfile, "MTG:\n");
 fprintf(MTGfile, "\n");
 fprintf(MTGfile, "ENTITY-CODE");
 for (int i=0;i<=20; i++) {
    fprintf(MTGfile, "	");
 }
 fprintf(MTGfile, "XX	YY	ZZ	TopDia	FlushNo	FlushLen	NumSegs	ILength	NType	Node	Level\n");
}


void writeMTG(FILE *MTGfile, InternodeData id, bool &MTGplantStart, int (&MTGstack)[20][2], float px, float py, float pz, int ntype, int level, int nodenum)
{
 if (MTGplantStart) {
  fprintf(MTGfile, "/P1/S%d",MTGstack[MTGcurOrder][0]);
  for (int i=0;i<=20; i++) {
   fprintf(MTGfile, "	");
  }

  writeLine(MTGfile,0.,0.,0., id.width*10.,id.flushno,id.budvigor,id.numSegs,id.iNodeLen*10,5,1,nodenum);
  MTGplantStart=false;
 }
 if(MTGcurOrder > id.order){
  if(id.lateral){
   MTGstack[id.order][1]=1;
   MTGstack[id.order][0]++;
  }
  else {
   MTGstack[MTGcurOrder][0]=1;
  }
 }
 if(MTGcurOrder < id.order){
  MTGstack[id.order][0]=1;
  MTGstack[id.order][1]=1;
 }
 if(MTGcurOrder == id.order && id.lateral){
  MTGstack[id.order][0]++;
  MTGstack[id.order][1]=1;
 }
 if(id.order-MTGcurOrder>1)
  Printf("%i %i %i\n",theNodeNum+1,id.order,MTGcurOrder);
  MTGcurOrder=id.order;

 if(id.lateral || (MTGstack[MTGcurOrder][1]==1 && MTGcurOrder >0 ) ) {

  for (int i=1;i<=MTGcurOrder; i++) {
   fprintf(MTGfile, "	");
  }
  fprintf(MTGfile, "+S%d", MTGstack[MTGcurOrder][0]);
  for (int i=MTGcurOrder;i<=20; i++) {
   fprintf(MTGfile, "	");
  }
  writeLine(MTGfile, pz*10.,px*10.,py*10., id.width*10.,id.flushno, id.budvigor,id.numSegs,id.iNodeLen*10.,ntype,level,nodenum);

  for (int i=1;i<=MTGcurOrder; i++) {
   fprintf(MTGfile, "	");
  }
  fprintf(MTGfile, "^/N%d", MTGstack[MTGcurOrder][1]);
  for (int i=MTGcurOrder;i<=20; i++) {
   fprintf(MTGfile, "	");
  }
  writeLine(MTGfile,pz*10.,px*10.,py*10., id.width*10.,id.flushno, id.budvigor,id.numSegs,id.iNodeLen*10.,ntype,level,nodenum);
  MTGlatStart=false;
 }
 else {
  for (int i=1;i<=MTGcurOrder; i++) {
   fprintf(MTGfile, "	");
  }






   fprintf(MTGfile, "^<N%d", MTGstack[MTGcurOrder][1]);

  for (int i=MTGcurOrder;i<=20; i++) {
   fprintf(MTGfile, "	");
  }
  writeLine(MTGfile,pz*10.,px*10.,py*10., id.width*10.,id.flushno, id.budvigor,id.numSegs,id.iNodeLen*10.,ntype,level,nodenum);
 }
 MTGstack[MTGcurOrder][1]++;
}
# 29 "lsystem.l" 2






bool isThisNAN(float px){
 return isnan(px);
}




  const __lc_ModuleIdType Orchard_id = 98;bool GetModuleOrchard(int& param0, int& param1);struct __Orchard_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  int Param0;  int Param1;  __lc_ModuleIdType moduleId2; } data; }; const int __Orchard_ParamsStructSize = sizeof(__Orchard_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Orchard_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Orchard_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Orchard_ParamsStructArr_ { __lc_ModuleIdType arr[__Orchard_ParamsStructSize]; };
  const __lc_ModuleIdType TreeReader_id = 99;bool GetModuleTreeReader(V3f& param0, int& param1, int& param2, int& param3);struct __TreeReader_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V3f Param0;  int Param1;  int Param2;  int Param3;  __lc_ModuleIdType moduleId2; } data; }; const int __TreeReader_ParamsStructSize = sizeof(__TreeReader_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__TreeReader_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__TreeReader_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __TreeReader_ParamsStructArr_ { __lc_ModuleIdType arr[__TreeReader_ParamsStructSize]; };

  const __lc_ModuleIdType Roots_id = 100;bool GetModuleRoots(V3f& param0, int& param1, int& param2, int& param3);struct __Roots_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V3f Param0;  int Param1;  int Param2;  int Param3;  __lc_ModuleIdType moduleId2; } data; }; const int __Roots_ParamsStructSize = sizeof(__Roots_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Roots_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Roots_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Roots_ParamsStructArr_ { __lc_ModuleIdType arr[__Roots_ParamsStructSize]; };
 const __lc_ModuleIdType Internode_id = 101;bool GetModuleInternode(InternodeData& param0);struct __Internode_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  InternodeData Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __Internode_ParamsStructSize = sizeof(__Internode_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Internode_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Internode_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Internode_ParamsStructArr_ { __lc_ModuleIdType arr[__Internode_ParamsStructSize]; };
 const __lc_ModuleIdType Bud_id = 102;bool GetModuleBud(BudData& param0);struct __Bud_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  BudData Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __Bud_ParamsStructSize = sizeof(__Bud_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Bud_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Bud_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Bud_ParamsStructArr_ { __lc_ModuleIdType arr[__Bud_ParamsStructSize]; };
 const __lc_ModuleIdType PruneCap_id = 103;bool GetModulePruneCap(float& param0);struct __PruneCap_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  float Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __PruneCap_ParamsStructSize = sizeof(__PruneCap_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__PruneCap_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__PruneCap_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __PruneCap_ParamsStructArr_ { __lc_ModuleIdType arr[__PruneCap_ParamsStructSize]; };
 const __lc_ModuleIdType Leaf_id = 104;bool GetModuleLeaf(LeafData& param0);struct __Leaf_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  LeafData Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __Leaf_ParamsStructSize = sizeof(__Leaf_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Leaf_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Leaf_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Leaf_ParamsStructArr_ { __lc_ModuleIdType arr[__Leaf_ParamsStructSize]; };


  const __lc_ModuleIdType Parab_id = 105;bool GetModuleParab(V3f& param0, float& param1, float& param2);struct __Parab_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  V3f Param0;  float Param1;  float Param2;  __lc_ModuleIdType moduleId2; } data; }; const int __Parab_ParamsStructSize = sizeof(__Parab_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Parab_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Parab_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Parab_ParamsStructArr_ { __lc_ModuleIdType arr[__Parab_ParamsStructSize]; };

 const __lc_ModuleIdType Box_id = 106;bool GetModuleBox(bool& param0);struct __Box_ParamsStruct_ { struct Data { __lc_ModuleIdType moduleId;  bool Param0;  __lc_ModuleIdType moduleId2; } data; }; const int __Box_ParamsStructSize = sizeof(__Box_ParamsStruct_) % sizeof(__lc_ModuleIdType) == 0 ? sizeof(__Box_ParamsStruct_) / sizeof(__lc_ModuleIdType) : sizeof(__Box_ParamsStruct_) / sizeof(__lc_ModuleIdType) + 1;struct __Box_ParamsStructArr_ { __lc_ModuleIdType arr[__Box_ParamsStructSize]; };


 static const __lc_ModuleIdType __ignoreArr1[] = { Left_id, Right_id, RotateXYZ_id, RotateHLU_id, RollL_id, RollR_id, Up_id, Down_id, SetTropismDirection3f_id, SetHead_id, MoveTo3f_id,0 }; static const __lc_ModuleIdType __considerArr1[] = { 0 }; 
# 71 "lsystem.l"
float maxHt;
float minZ, maxZ, minX, maxX, maxWidth, maxWidthZ, maxWidthX;

V3f Location;
float firstBranch ;
float miny, maxy, minx,maxx,minz,maxz;
float idwidth;
int nPruned;
int tPruned;


bool manPruning;

float gModelDim=3800.0f/2.0f;

int X[4]={gModelDim,gModelDim,-gModelDim,-gModelDim};
int Z[4]={-gModelDim,gModelDim,gModelDim,-gModelDim};
bool outsideBox;

LightModel env(361,gModelDim);

int seed;
int flushno, step, age;
unsigned int phase;
float lambda;
bool PruneFlag;




time_t startsec,endsec;


float difsec;
int totSegs;
int gICount;
int gBCount;

bool doMTG;
FILE *XYZfile, *MTGfile, *MODELFIT;
char fname[24], mname[24];
char randomstring[6];
char flushlab[30];
int lastNodeRead, highNode;


static float float_rand(void) { return rand() / (float) 2147483647; }

int gCalcNodesFlush, gCalcNodesBranch, gCalcBranchFlush=0;
float gPredictedVolume, gCalculatedHeightOfBranches, gCalculatedHeightOfFlush;
float gCp, gCanopyDepth, gCalculatedWidth;




int SkewRan(){
 float r=ran(1.);
 int rn=1;
 if(r>0.80){rn=3;}
 else if(r>0.60){rn=2;}
 return rn;
}


vector<int> getInitVector(const int& size)
{
 vector<int> v(size);
 for (int i=0; i<size; ++i) v[i] = i+1;
 random_shuffle(v.begin(), v.end());
 return v;
}


int nodeType[7];
int nPruneCaps;




int DerivationLength() { return  7 + 6 * 12;}
void Axiom(){   {__SB_ParamsStructArr_* pSBparams = reinterpret_cast<__SB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SB_ParamsStructArr_)));__SB_ParamsStruct_ SBParams; SBParams.data.moduleId = SB_id; memcpy(pSBparams, &SBParams, sizeof(__SB_ParamsStruct_));pSBparams->arr[0] = pSBparams->arr[__SB_ParamsStructSize-1] = SB_id;} {__Box_ParamsStructArr_* pBoxparams = reinterpret_cast<__Box_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Box_ParamsStructArr_)));__Box_ParamsStruct_ BoxParams; BoxParams.data.moduleId = Box_id; BoxParams.data.Param0 = (false);memcpy(pBoxparams, &BoxParams, sizeof(__Box_ParamsStruct_));pBoxparams->arr[0] = pBoxparams->arr[__Box_ParamsStructSize-1] = Box_id;}   {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;} {__SetColor_ParamsStructArr_* pSetColorparams = reinterpret_cast<__SetColor_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SetColor_ParamsStructArr_)));__SetColor_ParamsStruct_ SetColorParams; SetColorParams.data.moduleId = SetColor_id; SetColorParams.data.Param0 = (2);memcpy(pSetColorparams, &SetColorParams, sizeof(__SetColor_ParamsStruct_));pSetColorparams->arr[0] = pSetColorparams->arr[__SetColor_ParamsStructSize-1] = SetColor_id;}  {__Orchard_ParamsStructArr_* pOrchardparams = reinterpret_cast<__Orchard_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Orchard_ParamsStructArr_)));__Orchard_ParamsStruct_ OrchardParams; OrchardParams.data.moduleId = Orchard_id; OrchardParams.data.Param0 = (5);OrchardParams.data.Param1 = ( 5);memcpy(pOrchardparams, &OrchardParams, sizeof(__Orchard_ParamsStruct_));pOrchardparams->arr[0] = pOrchardparams->arr[__Orchard_ParamsStructSize-1] = Orchard_id;} }


# 1 "startup.hpp" 1
void Start()
{

 time(&startsec);
 phase = 0;
 flushno = 8;
 step=0;
 age=4;
 lambda = 0.5;
 seed =time(0);
 seed=1369568156;
 srand (seed);
 totSegs=0;
 gICount=0;
 gBCount=0;
 minx=999999.;
 miny=999999.;
 minz=999999.;
 maxx=-999999.;
 maxy=-999999.;
 maxz=-999999.;
 firstBranch=999999.;
 Printf("Steps: %i\n",7 + 6 * 12);
 sprintf(mtgName,"%s%s","/home/neil/Dropbox/MTGs/","842/Plant06.mtg");

 env.setParam(0.5,6,0.8,3.0,0.001,0.0);
 env.initExposureMap();

 gCalcNodesFlush=0;
 gCalcNodesBranch=0;
 gCalcBranchFlush=0;
 gPredictedVolume=0.0;
 gCalculatedWidth=0.0;
 gCalculatedHeightOfBranches=0.0;
 gCalculatedHeightOfFlush=0.0;
 gCp=0.0;
 gCanopyDepth=0.0;

 tPruned=0;
 PruneFlag=false;

 manPruning=false;
 outsideBox=false;
 doMTG=false;

 for(int i=0;i<7;i++){
  nodeType[i]=0;
 }

 MODELFIT=fopen("ModelFit.csv","w");
 fprintf(MODELFIT,"Flushno,CalcHtBranches,CalcHtFlush,Ht,NodeWidth.Pred,NodeWidth.Model,Volume.Pred,Volume.Model,Node.Pred.Branches,Nodes.Pred.Flush,Nodes.Model,Branches.Pred,Branches.Model,LightAtBase\n");
}

void StartEach()
{
 step++;




 UseGroup(phase);
 switch(phase)
 {
 case 0:
  Printf("READ (%i)\n",step);
  Forward();
  break;
 case 1:
  Printf("Adjusting Widths (%i)\n",step);
  Backward();
  DisplayFrame();
  break;
 case 2:
  Printf("GROW (%i)\n",step);
  Forward();
  flushno++;
  break;

 case 3:
  Printf("INTERPRET_POSITIONS (%i)\n",step);
  Forward();
  break;
 case 4:
  Printf("SET_POSITIONS (%i)\n",step);
  Forward();
  maxHt=0.;
  maxX=0.;
  minX=99999.;
  minZ=99999.;
  maxZ=0.;
  maxWidthX=0.;
  maxWidthZ=0.;
  nPruned=0;
  if(doMTG){
   Printf("\nOpening XYZ file\n");
   if(false) {
    sprintf(randomstring,"%s",randomString(6).c_str());
    sprintf(fname,"ModelXYZ_%s.csv",randomstring);
   }
   else {
    sprintf(fname,"ModelXYZ.csv");
   }
   XYZfile=fopen(fname, "w");
   fprintf(XYZfile, "X,Y,Z,order\n");

   Printf("\nOpening MTG file\n");
   if(false) {
    sprintf(mname,"ModelMTG_%s.mtg",randomstring);
   } else {
    sprintf(mname,"ModelMTG.mtg");
  }
  MTGfile=fopen(mname, "w");
  createMTG(MTGfile, MTGstack, MTGcurOrder, MTGplantStart, MTGlatStart);
  }
  break;

 case 5:
  Printf("BHACCUMULATE (%i)\n",step);
  Backward();
  break;
 case 6:
  Printf("BHDISTRIBUTE (%i)\n",step);
  Forward();
  break;

 case 7:
  nPruneCaps=0;
  Printf("PRUNE (%i)\n",step);
  Backward();
  nPruned=0;
  DisplayFrame();
  break;
 case 8:
  break;
 }

}

void EndEach()
{


 switch(phase)
 {
 case 0:
  if(step==1){
   phase=0;
   Printf("Start READ phase part 2\n");
  }
  else {
   phase=1;
   Printf("READ phase completed\n\n");
  }
  break;
 case 1:
  Printf("Width Adjust complete\nWidth at base is %.3f cm\n\n",idwidth);
  phase=3;
  DisplayFrame();
  break;
 case 2:
  if(flushno % 2 == 0 || flushno==0){age++;}
  if(age<8 +2) {

   if(age>8){
    lambda=((8 +2 -age)*0.5 + (age-8)*0.3)/2;
   } else {lambda=0.5;}
  } else {lambda=0.3;}
  Printf("Lambda now %.2f (step %i, age %i)\n\n",lambda,step,age);
  Printf("Nodes %i Branches %i N:B %.1f\n",gICount,gBCount,gICount/(float)gBCount);
  phase = 3;
  break;

 case 3:
  doMTG=false;
  if(flushno==12 +8 && flushno>=0){
   doMTG=true;
  }
  phase=4;
  break;
 case 4:
  phase = 5;

  Printf("Current height of plant after %i flushes is %.1f cm\n",flushno,maxHt);
  Printf("Pruned %i entities\n",nPruned);
  Printf("End of Growing Flush %i (year %i) (step %i)\n**************\n\n",flushno,age,step);
  if(doMTG){
   fclose(XYZfile);
   Printf("Closed XYZ file\n\n");
   fclose(MTGfile);
   Printf("Closed MTG %s file\n\n",mname);
   Printf("\n Highest nodenum %i\n",highNode);
   doMTG=false;
  }
  if(manPruning){
   manPruning=false;
  }

  if(flushno>=5){
   maxWidth=max(maxWidthX,maxWidthZ);
   gCanopyDepth = maxHt*0.01-firstBranch*0.01;
   gCp=3.141593f*((pow(maxWidth*0.01,2)*(gCanopyDepth))/8.0);
   gCalcNodesFlush=int(1.004f*pow(float(flushno),3.684f));





   gCalcBranchFlush=0.2641*pow((float)flushno,3.361f);
   gCalcNodesBranch=int(8.429f*gBCount);

   gPredictedVolume=0.214*pow(gCanopyDepth,3.4693f);
   gCalculatedWidth=0.03*maxHt-2.06;
   gCalculatedHeightOfFlush=33.981*flushno-0.6726;
   gCalculatedHeightOfBranches=5.5416*gBCount-3.634;


   if(gCalcNodesFlush > 1.5*gICount && false){
    Printf("bailing because of too many nodes\n");
    phase=8;
   }
   if(gCalcBranchFlush > 1.5 * gBCount && false){
    Printf("bailing because of too many branches\n");
    phase=8;
   }
   if(gCalculatedHeightOfFlush > 1.5 * maxHt && false){
    Printf("bailing because of too tall\n");
    phase=8;
   }
   if( (gPredictedVolume > gCp *1.5 || gPredictedVolume < gCp *0.6667 ) && flushno > 10 && false){
    Printf("Expected volume was %.1f, got %.1f instead\n",gPredictedVolume,gCp);
    phase=8;
   }
   if(outsideBox && false){
    Printf("bailing because outside box\n");
    phase=8;
   }


   fprintf(MODELFIT,"%i,%f,%f,%f,%f,%f,%f,%f,%i,%i,%i,%i,%i",flushno,gCalculatedHeightOfBranches, gCalculatedHeightOfFlush, maxHt,gCalculatedWidth,idwidth,gPredictedVolume,gCp,gCalcNodesBranch,gCalcNodesFlush,gICount,gCalcBranchFlush,gBCount);
  }

  break;

 case 5:
  phase = 6;
  break;
 case 6:
  if(step ==6)
   phase = 2;
  else
   phase = 7;
  break;

 case 7:
  phase = 2;
  Printf("Produced %i PruneCaps\n",nPruneCaps);
  break;
 case 8:
  break;
 }
}

void End(){
 Printf("\nTotal Pruned %i\n",tPruned);
 Printf("Max height of plant after %i flushes is %.1f cm\n",flushno,maxHt);
 Printf("Height:Width %.1f\n",maxHt/max(maxWidthX,maxWidthZ));
 Printf("Max Width of Canopy (cm) %.1f\n",max(maxWidthX,maxWidthZ));
 Printf("Ratio of X:Z widths %.3f (%3f %3f) \n",maxWidthX/maxWidthZ,maxWidthX,maxWidthZ);
 Printf("Final Lambda %.2f\n\n",lambda);
 Printf("Nodes %i Branches %i N:B %.1f\n",gICount,gBCount,gICount/(float)gBCount);
 Printf("Total production of Nodes %i\n",totSegs);
 Printf("Width of base of main stem is %.2f\n",idwidth);
 if(outsideBox){
  Printf("\n*********************************\n");
  Printf("	 Warning: Tree Exceeded Light Model\n");
  Printf("\n*********************************\n");
 }
 Printf("\n**************\nEnd of simulation (%i steps)\n\n",step);
 time(&endsec);

 difsec=difftime(endsec,startsec);

 if(difsec > 60.0)
  Printf("It took %.4f minutes\n\n",difsec/60.0f);
 else
  Printf("It took %.4f seconds\n\n",difsec);
 Printf("\n Random Number Seed: %i\n\n",seed);
 srand (seed);
 Printf("\n Highest nodenum %i\n",highNode);
 fclose(MODELFIT);
}
# 155 "lsystem.l" 2


 


void _P1(bool& __res_, int r, int t)
{
 Printf("Creating Orchard Layout\n");
 float xdist=400;
 float zdist=700;
 V3f pos;
 int tn=0;
 if(r==1 && t==1){
  pos=V3f(0,0,0);
  {   {__SB_ParamsStructArr_* pSBparams = reinterpret_cast<__SB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SB_ParamsStructArr_)));__SB_ParamsStruct_ SBParams; SBParams.data.moduleId = SB_id; memcpy(pSBparams, &SBParams, sizeof(__SB_ParamsStruct_));pSBparams->arr[0] = pSBparams->arr[__SB_ParamsStructSize-1] = SB_id;} {__MoveTo3f_ParamsStructArr_* pMoveTo3fparams = reinterpret_cast<__MoveTo3f_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__MoveTo3f_ParamsStructArr_)));__MoveTo3f_ParamsStruct_ MoveTo3fParams; MoveTo3fParams.data.moduleId = MoveTo3f_id; MoveTo3fParams.data.Param0 = (pos);memcpy(pMoveTo3fparams, &MoveTo3fParams, sizeof(__MoveTo3f_ParamsStruct_));pMoveTo3fparams->arr[0] = pMoveTo3fparams->arr[__MoveTo3f_ParamsStructSize-1] = MoveTo3f_id;}  {__TreeReader_ParamsStructArr_* pTreeReaderparams = reinterpret_cast<__TreeReader_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__TreeReader_ParamsStructArr_)));__TreeReader_ParamsStruct_ TreeReaderParams; TreeReaderParams.data.moduleId = TreeReader_id; TreeReaderParams.data.Param0 = (pos);TreeReaderParams.data.Param1 = (0);TreeReaderParams.data.Param2 = (0);TreeReaderParams.data.Param3 = (0);memcpy(pTreeReaderparams, &TreeReaderParams, sizeof(__TreeReader_ParamsStruct_));pTreeReaderparams->arr[0] = pTreeReaderparams->arr[__TreeReader_ParamsStructSize-1] = TreeReader_id;}  {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;}  }
 } else {
  float xpos, zpos;
  float ypos=0.0;
  zpos=0-zdist/2.0*(r-1);
  for(int z=0;z<r;z++){
   xpos=0-(xdist/2.0)*(t-1);
   for(int x=0;x<t;x++){
    pos=V3f(xpos,ypos,zpos);
    Printf("%i %.2f %2.f %.2f\n",tn,xpos,ypos,zpos);
    {   {__SB_ParamsStructArr_* pSBparams = reinterpret_cast<__SB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SB_ParamsStructArr_)));__SB_ParamsStruct_ SBParams; SBParams.data.moduleId = SB_id; memcpy(pSBparams, &SBParams, sizeof(__SB_ParamsStruct_));pSBparams->arr[0] = pSBparams->arr[__SB_ParamsStructSize-1] = SB_id;} {__TreeReader_ParamsStructArr_* pTreeReaderparams = reinterpret_cast<__TreeReader_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__TreeReader_ParamsStructArr_)));__TreeReader_ParamsStruct_ TreeReaderParams; TreeReaderParams.data.moduleId = TreeReader_id; TreeReaderParams.data.Param0 = (pos);TreeReaderParams.data.Param1 = (tn);TreeReaderParams.data.Param2 = (z);TreeReaderParams.data.Param3 = (x);memcpy(pTreeReaderparams, &TreeReaderParams, sizeof(__TreeReader_ParamsStruct_));pTreeReaderparams->arr[0] = pTreeReaderparams->arr[__TreeReader_ParamsStructSize-1] = TreeReader_id;}  {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;}  }
    tn++;
    xpos+=xdist;
   }
   zpos+=zdist;
  }
 }
 { __res_ = true; return;}
}


# 1 "TreeReader.l" 1
  void _P2(bool& __res_, V3f pos, int tn, int rn, int pn)
{

 Printf("Running TreeReader for plant %i\n");
 string sline,segments, keep;
 vector<string> v2;
 stringstream ss;
 bool foundStart;
 char * cstr, *pch;
 FILE *fp;
 int retValue;
 foundStart=false;
 ifstream mtg;
 int tmp;
 int curOrder, prevOrder;
 int curNode;
 int curLevel;
 int linesRead=0;
 int npos, spos, keepNode;
 int node, snode, nodenum,thisBranch;
 int nb, nn, maxOrder;
 nb=0;
 nn=0;
 int theParent, nNodes,axis;
 int branchLevel [10];
 for(int i=0;i<10;i++){
  branchLevel[i]=-1;
 }

 V3f branchXYZ [10];
 for(int i=0;i<10;i++){
  branchXYZ[i]=V3f(0,0,0);
 }
 float x,y,z,w,l;
 float px,py,pz;
 V3f sp,ep,u,h,dir;
 int nt;
 float activity;
 h=V3f(0,1.,0);
 u=V3f(0,0,1.);
 Qf q;
 InternodeData newInternode(false);

 retValue=mapBranches(pos);
 if(retValue==1){
  Printf("\n***********\n mapBranches failed\n**********\n");
 } else {
  Printf("back from mapBranches, on with the show for tree %i\n",tn);
 }

 maxOrder=-1;
 curOrder=-1;
 nodenum=0;
 Printf("loop until ENTITY-CODE line is found, top of actual data \n");
 mtg.open(mtgName, ifstream::in);
 if(mtg.good()){
  Printf("all good with %s\n",mtgName);
 } else {
  Printf("%s NOT good ", mtgName);
  if(mtg.fail()){
   Printf("it failed\n");
  }
  if(mtg.eof()){
   Printf("it eof\n");
  }
  if(mtg.bad()){
   Printf("it bad\n");
  }
 }
 while (!mtg.eof() && mtg.good()){

  getline(mtg,sline);
  if(sline.size() ==0 && foundStart){
   Printf("Short Line is size %i - exit MTG reading loop\n",sline.size());
   break;
  }
  cstr = new char [sline.size()+1];
  if(foundStart){

    strcpy (cstr, sline.c_str());
    pch = strtok (cstr,"\t");
    int ic=1;
   do {
    pch = strtok (__null, "\t");
    if(pch!= __null){



     if(ic==xN){
      z=atof(pch)/10.+pos.z;
      minz=min(minz,z);
      maxz=max(maxz,z);
      maxWidthZ=max(maxWidthZ,(maxz-minz));
     }
     if(ic==yN){
      x=atof(pch)/10.+pos.x;
      minx=min(minx,x);
      maxx=max(maxx,x);
      maxWidthX=max(maxWidthX,(maxx-minx));
     }
     if(ic==zN){
      y=atof(pch)/10.+pos.y;
      miny=min(miny,y);
      maxy=max(maxy,y);
     }
     if(ic==widthN){w=atof(pch)/10.;}
     if(ic==lenN){l=atof(pch)/10.;}
     if(ic==typeN){nt=atoi(pch);}
     if(ic==nodeN){nodenum=atoi(pch);}
     if(ic==levelN){curOrder=atoi(pch)-1;}

     ic++;
    }
   } while (pch != __null);




   ss << sline;
   while(getline(ss,segments,'\t')){
    v2.push_back(segments);
   }
   ss.clear();
   for(int j=0;j<v2.size();j++){
    if(v2[j].size()>1){
     keep = v2[j];
     break;
    }
   }

   size_t lastBitOfEntity;
   lastBitOfEntity = keep.find_last_of("SNL");
   keepNode = atoi(keep.substr(lastBitOfEntity+1).c_str());

   if(sline.find("+L") != -1 || sline.find("+S") != -1 ){;
    if(curOrder<prevOrder){
     for(int o=curOrder;o<prevOrder;o++){
      if(branchLevel[o] != -1){
       if(false){Printf("*+L or +S * Closing branch for %i at node %i (+S%i)\n",branchLevel[o],nodenum,keepNode);}
       {  {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;}  }
       branchLevel[curOrder]=-1;
      }
     }
    }
    curOrder=prevOrder;

    continue;
   }


   v2.clear();
   linesRead++;
    if(nodenum>9999999){
     Printf("Read to node %i\n",9999999);
     Printf("Branchlevel\n");
    for(int i=0;i<10;i++){
     Printf("%i ",branchLevel[i]);
    }
    Printf("\n");
     break;
    }
   if(curOrder > maxOrder){
        maxOrder=curOrder;
   }


   if(sline.find("P1") != -1){
    x=pos.x;
    y=pos.y;
    z=pos.z;
    sp=pos;
    curNode=0;
    curOrder=0;
    prevOrder=0;

    if(false){Printf("nproduce Roots\n");}
    {  {__Roots_ParamsStructArr_* pRootsparams = reinterpret_cast<__Roots_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Roots_ParamsStructArr_)));__Roots_ParamsStruct_ RootsParams; RootsParams.data.moduleId = Roots_id; RootsParams.data.Param0 = (pos);RootsParams.data.Param1 = (tn);RootsParams.data.Param2 = (rn);RootsParams.data.Param3 = (pn);memcpy(pRootsparams, &RootsParams, sizeof(__Roots_ParamsStruct_));pRootsparams->arr[0] = pRootsparams->arr[__Roots_ParamsStructSize-1] = Roots_id;}  }
    continue;
   }


   InternodeData newInternode(false);
   newInternode.tn=tn;
   newInternode.rn=rn;
   newInternode.pn=pn;

   if(sline.find("^/N") != -1){


    nb++;
    nn++;
    if(curOrder >0){
     sp=sxXYZ[ParentOfNode[nodenum]];
     if(false){
      Printf("SB @ %i MoveTo(%.2f %.2f %.2f) of %i \n",nodenum,sp.z*10.,sp.x*10.,sp.y*10.,ParentOfNode[nodenum]);}
     {   {__SB_ParamsStructArr_* pSBparams = reinterpret_cast<__SB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SB_ParamsStructArr_)));__SB_ParamsStruct_ SBParams; SBParams.data.moduleId = SB_id; memcpy(pSBparams, &SBParams, sizeof(__SB_ParamsStruct_));pSBparams->arr[0] = pSBparams->arr[__SB_ParamsStructSize-1] = SB_id;} {__MoveTo3f_ParamsStructArr_* pMoveTo3fparams = reinterpret_cast<__MoveTo3f_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__MoveTo3f_ParamsStructArr_)));__MoveTo3f_ParamsStruct_ MoveTo3fParams; MoveTo3fParams.data.moduleId = MoveTo3f_id; MoveTo3fParams.data.Param0 = (sp);memcpy(pMoveTo3fparams, &MoveTo3fParams, sizeof(__MoveTo3f_ParamsStruct_));pMoveTo3fparams->arr[0] = pMoveTo3fparams->arr[__MoveTo3f_ParamsStructSize-1] = MoveTo3f_id;}  }
     branchXYZ[curOrder]=sp;
     newInternode.lateral=true;
     branchLevel[curOrder]=nodenum;
    } else {
     newInternode.lateral=false;
    }
   }

   if(sline.find("^<N") != -1){

    nn++;


    if(prevOrder-curOrder > 1){





     for(int o=curOrder+1;o<=prevOrder;o++){

      if(branchLevel[o] != -1){
       if(false){Printf("* Drop back * Closing Branch %i for Order %i @ %i\n",branchLevel[o],o,nodenum);}
       branchLevel[o]=-1;
       if(false){{   {__SB_ParamsStructArr_* pSBparams = reinterpret_cast<__SB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SB_ParamsStructArr_)));__SB_ParamsStruct_ SBParams; SBParams.data.moduleId = SB_id; memcpy(pSBparams, &SBParams, sizeof(__SB_ParamsStruct_));pSBparams->arr[0] = pSBparams->arr[__SB_ParamsStructSize-1] = SB_id;} {__SetColor_ParamsStructArr_* pSetColorparams = reinterpret_cast<__SetColor_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SetColor_ParamsStructArr_)));__SetColor_ParamsStruct_ SetColorParams; SetColorParams.data.moduleId = SetColor_id; SetColorParams.data.Param0 = (41);memcpy(pSetColorparams, &SetColorParams, sizeof(__SetColor_ParamsStruct_));pSetColorparams->arr[0] = pSetColorparams->arr[__SetColor_ParamsStructSize-1] = SetColor_id;}  {__Sphere_ParamsStructArr_* pSphereparams = reinterpret_cast<__Sphere_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Sphere_ParamsStructArr_)));__Sphere_ParamsStruct_ SphereParams; SphereParams.data.moduleId = Sphere_id; SphereParams.data.Param0 = (1.);memcpy(pSphereparams, &SphereParams, sizeof(__Sphere_ParamsStruct_));pSphereparams->arr[0] = pSphereparams->arr[__Sphere_ParamsStructSize-1] = Sphere_id;}  {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;}  }}
       {  {__Bud_ParamsStructArr_* pBudparams = reinterpret_cast<__Bud_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Bud_ParamsStructArr_)));__Bud_ParamsStruct_ BudParams; BudParams.data.moduleId = Bud_id; BudParams.data.Param0 = (BudData(nodenum,o,0,0,false,1.0,tn,rn,pn));memcpy(pBudparams, &BudParams, sizeof(__Bud_ParamsStruct_));pBudparams->arr[0] = pBudparams->arr[__Bud_ParamsStructSize-1] = Bud_id;}  {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;}  }
      }
     }




    }

    newInternode.lateral=false;

    if(curOrder<prevOrder){

     if(branchLevel[curOrder] != -1 || curOrder==0){
      sp=branchXYZ[curOrder];
      if(false){Printf("%i MoveTo (%.2f %.2f %.2f) \n",nodenum, sp.z*10.,sp.x*10.,sp.y*10.);}
      {  {__MoveTo3f_ParamsStructArr_* pMoveTo3fparams = reinterpret_cast<__MoveTo3f_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__MoveTo3f_ParamsStructArr_)));__MoveTo3f_ParamsStruct_ MoveTo3fParams; MoveTo3fParams.data.moduleId = MoveTo3f_id; MoveTo3fParams.data.Param0 = (sp);memcpy(pMoveTo3fparams, &MoveTo3fParams, sizeof(__MoveTo3f_ParamsStruct_));pMoveTo3fparams->arr[0] = pMoveTo3fparams->arr[__MoveTo3f_ParamsStructSize-1] = MoveTo3f_id;}  }
     }
    }
    branchXYZ[curOrder]=V3f(x,y,z);
   }


   newInternode.newInternode=true;
   newInternode.nodenum=nodenum;
   w=0.2;
   newInternode.width=w;
   newInternode.node=keepNode;
   newInternode.order=curOrder;
   activity=1.0;
   newInternode.isLeaf=true;
   newInternode.c=17;
   if(nt==0 || nt==5){

    newInternode.isLeaf=false;
    activity=0.0;
   }

   ep=V3f(x,y,z);
   if(false){
    if(sline.find("^/N") != -1 ){
     {   {__SB_ParamsStructArr_* pSBparams = reinterpret_cast<__SB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SB_ParamsStructArr_)));__SB_ParamsStruct_ SBParams; SBParams.data.moduleId = SB_id; memcpy(pSBparams, &SBParams, sizeof(__SB_ParamsStruct_));pSBparams->arr[0] = pSBparams->arr[__SB_ParamsStructSize-1] = SB_id;} {__SetColor_ParamsStructArr_* pSetColorparams = reinterpret_cast<__SetColor_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SetColor_ParamsStructArr_)));__SetColor_ParamsStruct_ SetColorParams; SetColorParams.data.moduleId = SetColor_id; SetColorParams.data.Param0 = (1);memcpy(pSetColorparams, &SetColorParams, sizeof(__SetColor_ParamsStruct_));pSetColorparams->arr[0] = pSetColorparams->arr[__SetColor_ParamsStructSize-1] = SetColor_id;}  {__Sphere_ParamsStructArr_* pSphereparams = reinterpret_cast<__Sphere_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Sphere_ParamsStructArr_)));__Sphere_ParamsStruct_ SphereParams; SphereParams.data.moduleId = Sphere_id; SphereParams.data.Param0 = (1.);memcpy(pSphereparams, &SphereParams, sizeof(__Sphere_ParamsStruct_));pSphereparams->arr[0] = pSphereparams->arr[__Sphere_ParamsStructSize-1] = Sphere_id;}  {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;}  }
    } else {
     {   {__SB_ParamsStructArr_* pSBparams = reinterpret_cast<__SB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SB_ParamsStructArr_)));__SB_ParamsStruct_ SBParams; SBParams.data.moduleId = SB_id; memcpy(pSBparams, &SBParams, sizeof(__SB_ParamsStruct_));pSBparams->arr[0] = pSBparams->arr[__SB_ParamsStructSize-1] = SB_id;} {__SetColor_ParamsStructArr_* pSetColorparams = reinterpret_cast<__SetColor_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SetColor_ParamsStructArr_)));__SetColor_ParamsStruct_ SetColorParams; SetColorParams.data.moduleId = SetColor_id; SetColorParams.data.Param0 = (tn+2);memcpy(pSetColorparams, &SetColorParams, sizeof(__SetColor_ParamsStruct_));pSetColorparams->arr[0] = pSetColorparams->arr[__SetColor_ParamsStructSize-1] = SetColor_id;}  {__Sphere_ParamsStructArr_* pSphereparams = reinterpret_cast<__Sphere_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Sphere_ParamsStructArr_)));__Sphere_ParamsStruct_ SphereParams; SphereParams.data.moduleId = Sphere_id; SphereParams.data.Param0 = (1.);memcpy(pSphereparams, &SphereParams, sizeof(__Sphere_ParamsStruct_));pSphereparams->arr[0] = pSphereparams->arr[__Sphere_ParamsStructSize-1] = Sphere_id;}  {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;}  }
    }
   }
   newInternode.length=dist3f(sp,ep);

   dir=ep-sp;
   dir.Normalize();
   q=rotateTo(h,dir);
   h=q.rotateVector(h);
   u=q.rotateVector(u);
   u=(axisAngle(h,0.0f)*q).rotateVector(u);
   if(false){Printf("SetHead I @ %i Length %.2f\n",nodenum,newInternode.length);}
   {  {__SetHead_ParamsStructArr_* pSetHeadparams = reinterpret_cast<__SetHead_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SetHead_ParamsStructArr_)));__SetHead_ParamsStruct_ SetHeadParams; SetHeadParams.data.moduleId = SetHead_id; SetHeadParams.data.Param0 = (h.x);SetHeadParams.data.Param1 = (h.y);SetHeadParams.data.Param2 = (h.z);SetHeadParams.data.Param3 = (u.x);SetHeadParams.data.Param4 = (u.y);SetHeadParams.data.Param5 = (u.z);memcpy(pSetHeadparams, &SetHeadParams, sizeof(__SetHead_ParamsStruct_));pSetHeadparams->arr[0] = pSetHeadparams->arr[__SetHead_ParamsStructSize-1] = SetHead_id;}  {__Internode_ParamsStructArr_* pInternodeparams = reinterpret_cast<__Internode_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Internode_ParamsStructArr_)));__Internode_ParamsStruct_ InternodeParams; InternodeParams.data.moduleId = Internode_id; InternodeParams.data.Param0 = (newInternode);memcpy(pInternodeparams, &InternodeParams, sizeof(__Internode_ParamsStruct_));pInternodeparams->arr[0] = pInternodeparams->arr[__Internode_ParamsStructSize-1] = Internode_id;}  }


   activity=0.;
   if (LastNodeOfAxis[nodenum]==nodenum) {activity=1.0;}
   vector<int> v = getInitVector(3);

   float leafsize=15.0;
   if(curOrder > 0){
    int budCount=0;

    int makeLeaf = 0;
    int iRand = rand() % 100 + 1;

    if(newInternode.node >4)
     makeLeaf=3;
    else {
     if(iRand < 10)
      makeLeaf=1;
     if(iRand > 50)
      makeLeaf=2;
     if(iRand >= 10 && iRand < 50)
      makeLeaf=3;
    }
    for(int w = 0 ; w < 3 ; w++){
     if(newInternode.isLeaf && w < makeLeaf){
      float p=getNorm(64.,20.,3.,150.);
      {   {__SB_ParamsStructArr_* pSBparams = reinterpret_cast<__SB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SB_ParamsStructArr_)));__SB_ParamsStruct_ SBParams; SBParams.data.moduleId = SB_id; memcpy(pSBparams, &SBParams, sizeof(__SB_ParamsStruct_));pSBparams->arr[0] = pSBparams->arr[__SB_ParamsStructSize-1] = SB_id;} {__RollL_ParamsStructArr_* pRollLparams = reinterpret_cast<__RollL_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__RollL_ParamsStructArr_)));__RollL_ParamsStruct_ RollLParams; RollLParams.data.moduleId = RollL_id; RollLParams.data.Param0 = ((360. / float(3)));memcpy(pRollLparams, &RollLParams, sizeof(__RollL_ParamsStruct_));pRollLparams->arr[0] = pRollLparams->arr[__RollL_ParamsStructSize-1] = RollL_id;}  {__Down_ParamsStructArr_* pDownparams = reinterpret_cast<__Down_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Down_ParamsStructArr_)));__Down_ParamsStruct_ DownParams; DownParams.data.moduleId = Down_id; DownParams.data.Param0 = (p);memcpy(pDownparams, &DownParams, sizeof(__Down_ParamsStruct_));pDownparams->arr[0] = pDownparams->arr[__Down_ParamsStructSize-1] = Down_id;}  {__Leaf_ParamsStructArr_* pLeafparams = reinterpret_cast<__Leaf_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Leaf_ParamsStructArr_)));__Leaf_ParamsStruct_ LeafParams; LeafParams.data.moduleId = Leaf_id; LeafParams.data.Param0 = (LeafData(newInternode.node,curOrder,w,p,leafsize));memcpy(pLeafparams, &LeafParams, sizeof(__Leaf_ParamsStruct_));pLeafparams->arr[0] = pLeafparams->arr[__Leaf_ParamsStructSize-1] = Leaf_id;}  {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;}  }
     }
     int nbh=nbranches.find(keepNode)->second;
     if(budCount < 3*1 -nbh){
      for(int bw=1;bw<=1;bw++){
       {   {__SB_ParamsStructArr_* pSBparams = reinterpret_cast<__SB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SB_ParamsStructArr_)));__SB_ParamsStruct_ SBParams; SBParams.data.moduleId = SB_id; memcpy(pSBparams, &SBParams, sizeof(__SB_ParamsStruct_));pSBparams->arr[0] = pSBparams->arr[__SB_ParamsStructSize-1] = SB_id;} {__Down_ParamsStructArr_* pDownparams = reinterpret_cast<__Down_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Down_ParamsStructArr_)));__Down_ParamsStruct_ DownParams; DownParams.data.moduleId = Down_id; DownParams.data.Param0 = (((45.0) + (55.0 - 45.0) * float_rand())+((bw-1)*10.));memcpy(pDownparams, &DownParams, sizeof(__Down_ParamsStruct_));pDownparams->arr[0] = pDownparams->arr[__Down_ParamsStructSize-1] = Down_id;}  {__Bud_ParamsStructArr_* pBudparams = reinterpret_cast<__Bud_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Bud_ParamsStructArr_)));__Bud_ParamsStruct_ BudParams; BudParams.data.moduleId = Bud_id; BudParams.data.Param0 = (BudData(keepNode,curOrder,v[w],bw,true,activity,tn,rn,pn));memcpy(pBudparams, &BudParams, sizeof(__Bud_ParamsStruct_));pBudparams->arr[0] = pBudparams->arr[__Bud_ParamsStructSize-1] = Bud_id;}   {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;}  }
      }
      budCount++;
     }
     {  {__RollL_ParamsStructArr_* pRollLparams = reinterpret_cast<__RollL_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__RollL_ParamsStructArr_)));__RollL_ParamsStruct_ RollLParams; RollLParams.data.moduleId = RollL_id; RollLParams.data.Param0 = ((360. / float(3)));memcpy(pRollLparams, &RollLParams, sizeof(__RollL_ParamsStruct_));pRollLparams->arr[0] = pRollLparams->arr[__RollL_ParamsStructSize-1] = RollL_id;}  }
    }
   }

   if(LastNodeOfAxis[nodenum]==nodenum && branchLevel[curOrder] != -1){
    if(false){Printf("End of Branch EB @ %i == %i for %i\n",nodenum,LastNodeOfAxis[nodenum],branchLevel[curOrder]);}
    branchLevel[curOrder]=-1;
    if(false){{   {__SB_ParamsStructArr_* pSBparams = reinterpret_cast<__SB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SB_ParamsStructArr_)));__SB_ParamsStruct_ SBParams; SBParams.data.moduleId = SB_id; memcpy(pSBparams, &SBParams, sizeof(__SB_ParamsStruct_));pSBparams->arr[0] = pSBparams->arr[__SB_ParamsStructSize-1] = SB_id;} {__SetColor_ParamsStructArr_* pSetColorparams = reinterpret_cast<__SetColor_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SetColor_ParamsStructArr_)));__SetColor_ParamsStruct_ SetColorParams; SetColorParams.data.moduleId = SetColor_id; SetColorParams.data.Param0 = (41);memcpy(pSetColorparams, &SetColorParams, sizeof(__SetColor_ParamsStruct_));pSetColorparams->arr[0] = pSetColorparams->arr[__SetColor_ParamsStructSize-1] = SetColor_id;}  {__Sphere_ParamsStructArr_* pSphereparams = reinterpret_cast<__Sphere_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Sphere_ParamsStructArr_)));__Sphere_ParamsStruct_ SphereParams; SphereParams.data.moduleId = Sphere_id; SphereParams.data.Param0 = (1.);memcpy(pSphereparams, &SphereParams, sizeof(__Sphere_ParamsStruct_));pSphereparams->arr[0] = pSphereparams->arr[__Sphere_ParamsStructSize-1] = Sphere_id;}  {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;}  }}
    {  {__Bud_ParamsStructArr_* pBudparams = reinterpret_cast<__Bud_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Bud_ParamsStructArr_)));__Bud_ParamsStruct_ BudParams; BudParams.data.moduleId = Bud_id; BudParams.data.Param0 = (BudData(nodenum,curOrder,0,0,false,1.0,tn,rn,pn));memcpy(pBudparams, &BudParams, sizeof(__Bud_ParamsStruct_));pBudparams->arr[0] = pBudparams->arr[__Bud_ParamsStructSize-1] = Bud_id;}   {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;}  }
   }


   if(prevOrder-curOrder == 1){
    int p=nodenum;
    int nm=nodenum;
    tmp=0;
    do {
     p=ParentOfNode.find(nm) -> second;
     nm=p;
     tmp++;
     if(p>0)
      theParent=p;
     for(int i=0;i<10;i++){
      if(LastNodeOfAxis[branchLevel[i]] == nodenum){
       if(false){Printf("End of Descendants EB @ %i for %i\n",nodenum,branchLevel[i]);}
       branchLevel[i]= -1;
       if(false){{   {__SB_ParamsStructArr_* pSBparams = reinterpret_cast<__SB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SB_ParamsStructArr_)));__SB_ParamsStruct_ SBParams; SBParams.data.moduleId = SB_id; memcpy(pSBparams, &SBParams, sizeof(__SB_ParamsStruct_));pSBparams->arr[0] = pSBparams->arr[__SB_ParamsStructSize-1] = SB_id;} {__SetColor_ParamsStructArr_* pSetColorparams = reinterpret_cast<__SetColor_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SetColor_ParamsStructArr_)));__SetColor_ParamsStruct_ SetColorParams; SetColorParams.data.moduleId = SetColor_id; SetColorParams.data.Param0 = (41);memcpy(pSetColorparams, &SetColorParams, sizeof(__SetColor_ParamsStruct_));pSetColorparams->arr[0] = pSetColorparams->arr[__SetColor_ParamsStructSize-1] = SetColor_id;}  {__Sphere_ParamsStructArr_* pSphereparams = reinterpret_cast<__Sphere_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Sphere_ParamsStructArr_)));__Sphere_ParamsStruct_ SphereParams; SphereParams.data.moduleId = Sphere_id; SphereParams.data.Param0 = (1.);memcpy(pSphereparams, &SphereParams, sizeof(__Sphere_ParamsStruct_));pSphereparams->arr[0] = pSphereparams->arr[__Sphere_ParamsStructSize-1] = Sphere_id;}  {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;}  }}
       {  {__Bud_ParamsStructArr_* pBudparams = reinterpret_cast<__Bud_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Bud_ParamsStructArr_)));__Bud_ParamsStruct_ BudParams; BudParams.data.moduleId = Bud_id; BudParams.data.Param0 = (BudData(nodenum,i,0,0,false,1.0,tn,rn,pn));memcpy(pBudparams, &BudParams, sizeof(__Bud_ParamsStruct_));pBudparams->arr[0] = pBudparams->arr[__Bud_ParamsStructSize-1] = Bud_id;}  {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;}  }
      }
     }
    } while (p !=0 && tmp <5);
   }


   px=x;
   py=y;
   pz=z;
   sp=ep;
   highNode=nodenum;
   prevOrder=curOrder;
  } else {
   if(sline.find("ENTITY-CODE") != -1 && !foundStart){
    Printf("OK, next line will have plant structure\n");
    foundStart=true;
    prevOrder=0;
    linesRead=0;
    continue;
   }
  }
 }
 for(int i=1;i<10;i++){
  if(branchLevel[i] > 0 ){
   theParent=branchLevel[i];
   branchLevel[i]=-1;
   if(false){ Printf("Final EB for branch %i order %i \n",theParent,i);}
   {  {__Bud_ParamsStructArr_* pBudparams = reinterpret_cast<__Bud_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Bud_ParamsStructArr_)));__Bud_ParamsStruct_ BudParams; BudParams.data.moduleId = Bud_id; BudParams.data.Param0 = (BudData(0,i,0,0,false,1.0,tn,rn,pn));memcpy(pBudparams, &BudParams, sizeof(__Bud_ParamsStruct_));pBudparams->arr[0] = pBudparams->arr[__Bud_ParamsStructSize-1] = Bud_id;}  {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;}  }
  }
 }
 Printf("\n");
 mtg.close();
 lastNodeRead=highNode;
# 191 "lsystem.l" 2


 Printf("Finsihed Processing plant %i\n********************\n",tn);
 if(tn == 12){
  gICount=nn;
  gBCount=nb;
 }
 { __res_ = true; return;}
}

void _P3(bool& __res_, V3f Location, float width, float height){
 float x,y,z,v;
 float a=width/2.;
 int n=61;
 float m=2*3.141593f/(float)n;
 float sSize = min(0.5,width/200.);
 Printf("Creating Canopy Paraboloid of width %f height %f \n",width,height);
 {  {__MoveTo3f_ParamsStructArr_* pMoveTo3fparams = reinterpret_cast<__MoveTo3f_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__MoveTo3f_ParamsStructArr_)));__MoveTo3f_ParamsStruct_ MoveTo3fParams; MoveTo3fParams.data.moduleId = MoveTo3f_id; MoveTo3fParams.data.Param0 = (Location);memcpy(pMoveTo3fparams, &MoveTo3fParams, sizeof(__MoveTo3f_ParamsStruct_));pMoveTo3fparams->arr[0] = pMoveTo3fparams->arr[__MoveTo3f_ParamsStructSize-1] = MoveTo3f_id;}  {__Sphere_ParamsStructArr_* pSphereparams = reinterpret_cast<__Sphere_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Sphere_ParamsStructArr_)));__Sphere_ParamsStruct_ SphereParams; SphereParams.data.moduleId = Sphere_id; SphereParams.data.Param0 = (2);memcpy(pSphereparams, &SphereParams, sizeof(__Sphere_ParamsStruct_));pSphereparams->arr[0] = pSphereparams->arr[__Sphere_ParamsStructSize-1] = Sphere_id;}  }
 y=0.;
 float inc=height / 30.;
 do{
    for(int j=1;j<n;j++){
     v=j*m;
        x=a*sqrt(y/height)*cos(v);
        z=a*sqrt(y/height)*sin(v);

     {  {__MoveTo_ParamsStructArr_* pMoveToparams = reinterpret_cast<__MoveTo_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__MoveTo_ParamsStructArr_)));__MoveTo_ParamsStruct_ MoveToParams; MoveToParams.data.moduleId = MoveTo_id; MoveToParams.data.Param0 = (x+Location.x);MoveToParams.data.Param1 = (y+Location.y);MoveToParams.data.Param2 = (z+Location.z);memcpy(pMoveToparams, &MoveToParams, sizeof(__MoveTo_ParamsStruct_));pMoveToparams->arr[0] = pMoveToparams->arr[__MoveTo_ParamsStructSize-1] = MoveTo_id;}  {__Sphere_ParamsStructArr_* pSphereparams = reinterpret_cast<__Sphere_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Sphere_ParamsStructArr_)));__Sphere_ParamsStruct_ SphereParams; SphereParams.data.moduleId = Sphere_id; SphereParams.data.Param0 = (sSize);memcpy(pSphereparams, &SphereParams, sizeof(__Sphere_ParamsStruct_));pSphereparams->arr[0] = pSphereparams->arr[__Sphere_ParamsStructSize-1] = Sphere_id;}  }
    }
   y=y+inc;
 } while (y<=height);
 { __res_ = true; return;}

}

 




void _P4(bool& __res_, InternodeData id)
{

 float pipeAcc = 0.0;
 bool moreBranches = true;


 InternodeData rid;
 BudData rbd;
 LeafData rld;
 float w;


 while(moreBranches)
 {

  if(  ( RNContextReset() && AcceptContext(SB_id) && GetModuleSB() && AdvanceContext() &&AcceptContext(Internode_id) && GetModuleInternode(rid) && AdvanceContext() &&AcceptContext(EB_id) && GetModuleEB() && AdvanceContext() && ConfirmContext() ))
  {

   pipeAcc += pow(rid.width,2.0f);
   if(false)
    Printf("(Branch) id %i rid.width %.3f (%i) pipeAcc %.3f\n",id.nodenum,rid.width,rid.nodenum,pipeAcc);
  }


  else if(  ( RNContextReset() && AcceptContext(SB_id) && GetModuleSB() && AdvanceContext() &&AcceptContext(Bud_id) && GetModuleBud(rbd) && AdvanceContext() &&AcceptContext(EB_id) && GetModuleEB() && AdvanceContext() && ConfirmContext() ))
  {

  }

  else if(  ( RNContextReset() && AcceptContext(SB_id) && GetModuleSB() && AdvanceContext() &&AcceptContext(PruneCap_id) && GetModulePruneCap(w) && AdvanceContext() &&AcceptContext(EB_id) && GetModuleEB() && AdvanceContext() && ConfirmContext() ))
  {

  }

  else if(  ( RNContextReset() && AcceptContext(SB_id) && GetModuleSB() && AdvanceContext() &&AcceptContext(Leaf_id) && GetModuleLeaf(rld) && AdvanceContext() &&AcceptContext(EB_id) && GetModuleEB() && AdvanceContext() && ConfirmContext() ))
  {
  }

  else
   moreBranches = false;
 }



 if(( RNContextReset() && AcceptContext(Internode_id) && GetModuleInternode(rid) && AdvanceContext() && ConfirmContext() ))
 {
  pipeAcc += pow(rid.width,2.0f);
  if(false)
    Printf("(Inode) id %i rid.width %.3f (%i) pipeAcc %.3f\n",id.nodenum,rid.width,rid.nodenum,pipeAcc);
 }
 else if(( RNContextReset() && AcceptContext(Bud_id) && GetModuleBud(rbd) && AdvanceContext() && ConfirmContext() ))
 {
 }
 else if(( RNContextReset() && AcceptContext(PruneCap_id) && GetModulePruneCap(w) && AdvanceContext() && ConfirmContext() ))
 {
 } else {

 }


 if(pipeAcc != 0){
  id.width = pow(pipeAcc,float(1./2.0f));
  if(false)
   Printf("Total %i pipeAcc %.3f %.3f\n",id.nodenum,pipeAcc,id.width);
  if(id.node==1 && id.order==0){idwidth=id.width;}
 }
 { __res_ = true;  {__Internode_ParamsStructArr_* pInternodeparams = reinterpret_cast<__Internode_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Internode_ParamsStructArr_)));__Internode_ParamsStruct_ InternodeParams; InternodeParams.data.moduleId = Internode_id; InternodeParams.data.Param0 = (id);memcpy(pInternodeparams, &InternodeParams, sizeof(__Internode_ParamsStruct_));pInternodeparams->arr[0] = pInternodeparams->arr[__Internode_ParamsStructSize-1] = Internode_id;} return;}
}


 





void _P5(bool& __res_, BudData bd)
{



 if(bd.vigor > 2)
 {
  float budvigor=bd.vigor;

  if(bd.vigor > getNorm(14., 1.0, 1.0, 12.0)) {bd.vigor = getNorm(14., 1.0, 1.0, 12.0);}
  if(bd.order >= 8)
   bd.vigor=0.0;
  int numSegments = int(bd.vigor);
  if(bd.tn == 12){
   totSegs+=numSegments;
   gICount+=numSegments;
  }







  float length=getNorm(4.6, 0.5, 1.0, 12.0);


  if (bd.lateral) {
   bd.order++;
   if(bd.tn == 12)
    gBCount++;

  }



  for(int i = 1 ; i <= numSegments ; i++)
  {

   V3f dir(0.8 * env.getContinuousEnvDir(bd.pos,5) + V3f(0,0.7,0));

   {  {__SetTropismDirection3f_ParamsStructArr_* pSetTropismDirection3fparams = reinterpret_cast<__SetTropismDirection3f_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SetTropismDirection3f_ParamsStructArr_)));__SetTropismDirection3f_ParamsStruct_ SetTropismDirection3fParams; SetTropismDirection3fParams.data.moduleId = SetTropismDirection3f_id; SetTropismDirection3fParams.data.Param0 = (dir);memcpy(pSetTropismDirection3fparams, &SetTropismDirection3fParams, sizeof(__SetTropismDirection3f_ParamsStruct_));pSetTropismDirection3fparams->arr[0] = pSetTropismDirection3fparams->arr[__SetTropismDirection3f_ParamsStructSize-1] = SetTropismDirection3f_id;}  }
   InternodeData newInternode( highNode++, bd.order, length);
   newInternode.tn=bd.tn;
   newInternode.rn=bd.rn;
   newInternode.pn=bd.pn;
   ;

   newInternode.budvigor=0;
   newInternode.numSegs=0;
   newInternode.length=length;
   newInternode.flushno=flushno;
   newInternode.nodenum=highNode;
   newInternode.width=0.2;
   newInternode.c=17;
   if(i ==1) {
    newInternode.lateral = bd.lateral;
    newInternode.budvigor=budvigor;
    newInternode.numSegs=numSegments;
   }
   {  {__RollL_ParamsStructArr_* pRollLparams = reinterpret_cast<__RollL_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__RollL_ParamsStructArr_)));__RollL_ParamsStruct_ RollLParams; RollLParams.data.moduleId = RollL_id; RollLParams.data.Param0 = (137.5);memcpy(pRollLparams, &RollLParams, sizeof(__RollL_ParamsStruct_));pRollLparams->arr[0] = pRollLparams->arr[__RollL_ParamsStructSize-1] = RollL_id;}  {__Internode_ParamsStructArr_* pInternodeparams = reinterpret_cast<__Internode_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Internode_ParamsStructArr_)));__Internode_ParamsStruct_ InternodeParams; InternodeParams.data.moduleId = Internode_id; InternodeParams.data.Param0 = (newInternode);memcpy(pInternodeparams, &InternodeParams, sizeof(__Internode_ParamsStruct_));pInternodeparams->arr[0] = pInternodeparams->arr[__Internode_ParamsStructSize-1] = Internode_id;}  }


   float activity=0.;
   if (i==numSegments) {activity=1.0;}
   vector<int> v = getInitVector(3);
   float leafsize=15.0;
   if(i>=numSegments-1){
    leafsize=leafsize*((i-(numSegments-3))*0.1);
   }
   for(int w = 0 ; w < 3 ; w++){
    float p=getNorm(64.,20.,3.,150.);
    {   {__SB_ParamsStructArr_* pSBparams = reinterpret_cast<__SB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SB_ParamsStructArr_)));__SB_ParamsStruct_ SBParams; SBParams.data.moduleId = SB_id; memcpy(pSBparams, &SBParams, sizeof(__SB_ParamsStruct_));pSBparams->arr[0] = pSBparams->arr[__SB_ParamsStructSize-1] = SB_id;} {__RollR_ParamsStructArr_* pRollRparams = reinterpret_cast<__RollR_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__RollR_ParamsStructArr_)));__RollR_ParamsStruct_ RollRParams; RollRParams.data.moduleId = RollR_id; RollRParams.data.Param0 = ((360. / float(3)));memcpy(pRollRparams, &RollRParams, sizeof(__RollR_ParamsStruct_));pRollRparams->arr[0] = pRollRparams->arr[__RollR_ParamsStructSize-1] = RollR_id;}  {__Down_ParamsStructArr_* pDownparams = reinterpret_cast<__Down_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Down_ParamsStructArr_)));__Down_ParamsStruct_ DownParams; DownParams.data.moduleId = Down_id; DownParams.data.Param0 = (p);memcpy(pDownparams, &DownParams, sizeof(__Down_ParamsStruct_));pDownparams->arr[0] = pDownparams->arr[__Down_ParamsStructSize-1] = Down_id;}  {__Leaf_ParamsStructArr_* pLeafparams = reinterpret_cast<__Leaf_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Leaf_ParamsStructArr_)));__Leaf_ParamsStruct_ LeafParams; LeafParams.data.moduleId = Leaf_id; LeafParams.data.Param0 = (LeafData(newInternode.node,bd.order,w,p,leafsize,0,bd.tn,bd.rn,bd.pn));memcpy(pLeafparams, &LeafParams, sizeof(__Leaf_ParamsStruct_));pLeafparams->arr[0] = pLeafparams->arr[__Leaf_ParamsStructSize-1] = Leaf_id;}  {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;}  }
    for(int bw=1;bw<=1;bw++){
     {   {__SB_ParamsStructArr_* pSBparams = reinterpret_cast<__SB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SB_ParamsStructArr_)));__SB_ParamsStruct_ SBParams; SBParams.data.moduleId = SB_id; memcpy(pSBparams, &SBParams, sizeof(__SB_ParamsStruct_));pSBparams->arr[0] = pSBparams->arr[__SB_ParamsStructSize-1] = SB_id;} {__Down_ParamsStructArr_* pDownparams = reinterpret_cast<__Down_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Down_ParamsStructArr_)));__Down_ParamsStruct_ DownParams; DownParams.data.moduleId = Down_id; DownParams.data.Param0 = (((45.0) + (55.0 - 45.0) * float_rand())+((bw-1)*10.));memcpy(pDownparams, &DownParams, sizeof(__Down_ParamsStruct_));pDownparams->arr[0] = pDownparams->arr[__Down_ParamsStructSize-1] = Down_id;}  {__Bud_ParamsStructArr_* pBudparams = reinterpret_cast<__Bud_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Bud_ParamsStructArr_)));__Bud_ParamsStruct_ BudParams; BudParams.data.moduleId = Bud_id; BudParams.data.Param0 = (BudData(highNode,bd.order,v[w],bw,true,activity,bd.tn,bd.rn,bd.pn));memcpy(pBudparams, &BudParams, sizeof(__Bud_ParamsStruct_));pBudparams->arr[0] = pBudparams->arr[__Bud_ParamsStructSize-1] = Bud_id;}  {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;}  }
    }
    {  {__RollL_ParamsStructArr_* pRollLparams = reinterpret_cast<__RollL_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__RollL_ParamsStructArr_)));__RollL_ParamsStruct_ RollLParams; RollLParams.data.moduleId = RollL_id; RollLParams.data.Param0 = ((360. / float(3)));memcpy(pRollLparams, &RollLParams, sizeof(__RollL_ParamsStruct_));pRollLparams->arr[0] = pRollLparams->arr[__RollL_ParamsStructSize-1] = RollL_id;}  }
   }
  }

  bd.node=highNode;
  bd.lateral=false;
  bd.axilIndex=1;
  bd.leafIndex=0;
  if(bd.order>0){bd.activity=1.0;}
  { __res_ = true;  {__Bud_ParamsStructArr_* pBudparams = reinterpret_cast<__Bud_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Bud_ParamsStructArr_)));__Bud_ParamsStruct_ BudParams; BudParams.data.moduleId = Bud_id; BudParams.data.Param0 = (bd);memcpy(pBudparams, &BudParams, sizeof(__Bud_ParamsStruct_));pBudparams->arr[0] = pBudparams->arr[__Bud_ParamsStructSize-1] = Bud_id;} return;}
 }
}






 

void _P6(bool& __res_, InternodeData id)
{
 { __res_ = true;  {__Internode_ParamsStructArr_* pInternodeparams = reinterpret_cast<__Internode_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Internode_ParamsStructArr_)));__Internode_ParamsStruct_ InternodeParams; InternodeParams.data.moduleId = Internode_id; InternodeParams.data.Param0 = (id);memcpy(pInternodeparams, &InternodeParams, sizeof(__Internode_ParamsStruct_));pInternodeparams->arr[0] = pInternodeparams->arr[__Internode_ParamsStructSize-1] = Internode_id;}  {__GetPos_ParamsStructArr_* pGetPosparams = reinterpret_cast<__GetPos_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__GetPos_ParamsStructArr_)));__GetPos_ParamsStruct_ GetPosParams; GetPosParams.data.moduleId = GetPos_id; GetPosParams.data.Param0 = (0);GetPosParams.data.Param1 = (0);GetPosParams.data.Param2 = (0);memcpy(pGetPosparams, &GetPosParams, sizeof(__GetPos_ParamsStruct_));pGetPosparams->arr[0] = pGetPosparams->arr[__GetPos_ParamsStructSize-1] = GetPos_id;} return;}
}

void _P7(bool& __res_, BudData bd)
{
 { __res_ = true;  {__Bud_ParamsStructArr_* pBudparams = reinterpret_cast<__Bud_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Bud_ParamsStructArr_)));__Bud_ParamsStruct_ BudParams; BudParams.data.moduleId = Bud_id; BudParams.data.Param0 = (bd);memcpy(pBudparams, &BudParams, sizeof(__Bud_ParamsStruct_));pBudparams->arr[0] = pBudparams->arr[__Bud_ParamsStructSize-1] = Bud_id;}  {__GetPos_ParamsStructArr_* pGetPosparams = reinterpret_cast<__GetPos_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__GetPos_ParamsStructArr_)));__GetPos_ParamsStruct_ GetPosParams; GetPosParams.data.moduleId = GetPos_id; GetPosParams.data.Param0 = (0);GetPosParams.data.Param1 = (0);GetPosParams.data.Param2 = (0);memcpy(pGetPosparams, &GetPosParams, sizeof(__GetPos_ParamsStruct_));pGetPosparams->arr[0] = pGetPosparams->arr[__GetPos_ParamsStructSize-1] = GetPos_id;} return;}
}

void _P8(bool& __res_, LeafData ld)
{
 { __res_ = true;  {__Leaf_ParamsStructArr_* pLeafparams = reinterpret_cast<__Leaf_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Leaf_ParamsStructArr_)));__Leaf_ParamsStruct_ LeafParams; LeafParams.data.moduleId = Leaf_id; LeafParams.data.Param0 = (ld);memcpy(pLeafparams, &LeafParams, sizeof(__Leaf_ParamsStruct_));pLeafparams->arr[0] = pLeafparams->arr[__Leaf_ParamsStructSize-1] = Leaf_id;}  {__GetPos_ParamsStructArr_* pGetPosparams = reinterpret_cast<__GetPos_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__GetPos_ParamsStructArr_)));__GetPos_ParamsStruct_ GetPosParams; GetPosParams.data.moduleId = GetPos_id; GetPosParams.data.Param0 = (0);GetPosParams.data.Param1 = (0);GetPosParams.data.Param2 = (0);memcpy(pGetPosparams, &GetPosParams, sizeof(__GetPos_ParamsStruct_));pGetPosparams->arr[0] = pGetPosparams->arr[__GetPos_ParamsStructSize-1] = GetPos_id;}  {__GetHead_ParamsStructArr_* pGetHeadparams = reinterpret_cast<__GetHead_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__GetHead_ParamsStructArr_)));__GetHead_ParamsStruct_ GetHeadParams; GetHeadParams.data.moduleId = GetHead_id; GetHeadParams.data.Param0 = (0);GetHeadParams.data.Param1 = (0);GetHeadParams.data.Param2 = (0);memcpy(pGetHeadparams, &GetHeadParams, sizeof(__GetHead_ParamsStruct_));pGetHeadparams->arr[0] = pGetHeadparams->arr[__GetHead_ParamsStructSize-1] = GetHead_id;} return;}
}




 


   void _P9(bool& __res_, float w, InternodeData id, float px, float py, float pz)
{


 if (id.manPrune){Printf("Found %i.%i\n",id.node,id.order);}
 if(!id.newInternode && !id.isLeaf){

  if(false){
   Printf("Pruned Node %i @ order %i with width %.1f\n",id.node, id.order,id.width);
  }
 }

 if(id.tn == 12){
  nPruned++;
  tPruned++;
  gICount--;
  if(id.lateral)
   gBCount--;
 }

 if(false){
  {   {__SB_ParamsStructArr_* pSBparams = reinterpret_cast<__SB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SB_ParamsStructArr_)));__SB_ParamsStruct_ SBParams; SBParams.data.moduleId = SB_id; memcpy(pSBparams, &SBParams, sizeof(__SB_ParamsStruct_));pSBparams->arr[0] = pSBparams->arr[__SB_ParamsStructSize-1] = SB_id;} {__MoveTo_ParamsStructArr_* pMoveToparams = reinterpret_cast<__MoveTo_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__MoveTo_ParamsStructArr_)));__MoveTo_ParamsStruct_ MoveToParams; MoveToParams.data.moduleId = MoveTo_id; MoveToParams.data.Param0 = (px);MoveToParams.data.Param1 = (py);MoveToParams.data.Param2 = (pz);memcpy(pMoveToparams, &MoveToParams, sizeof(__MoveTo_ParamsStruct_));pMoveToparams->arr[0] = pMoveToparams->arr[__MoveTo_ParamsStructSize-1] = MoveTo_id;}  {__SetColor_ParamsStructArr_* pSetColorparams = reinterpret_cast<__SetColor_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SetColor_ParamsStructArr_)));__SetColor_ParamsStruct_ SetColorParams; SetColorParams.data.moduleId = SetColor_id; SetColorParams.data.Param0 = (3);memcpy(pSetColorparams, &SetColorParams, sizeof(__SetColor_ParamsStruct_));pSetColorparams->arr[0] = pSetColorparams->arr[__SetColor_ParamsStructSize-1] = SetColor_id;}  {__Sphere_ParamsStructArr_* pSphereparams = reinterpret_cast<__Sphere_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Sphere_ParamsStructArr_)));__Sphere_ParamsStruct_ SphereParams; SphereParams.data.moduleId = Sphere_id; SphereParams.data.Param0 = (1);memcpy(pSphereparams, &SphereParams, sizeof(__Sphere_ParamsStruct_));pSphereparams->arr[0] = pSphereparams->arr[__Sphere_ParamsStructSize-1] = Sphere_id;}  {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;}  }
 }
 { __res_ = true; return;}

}

   void _P10(bool& __res_, float w, BudData bd, float px, float py, float pz) {{ __res_ = true; return;}}
  void _P11(bool& __res_, float w, float w2) { { __res_ = true; return;} }

    void _P12(bool& __res_, float w, LeafData ld, float px, float py, float pz, float hx, float hy, float hz)
{
 if( false ){Printf("Leaf at %i %.1f %.1f %.1f\n",ld.node,px,py,pz);}
 ld.pos=V3f(px,py,pz);
 V3f head=V3f(hx,hy,hz);
 V3f midPoint=ld.pos+head*(0.5*ld.leafsize);
 if(!ld.newLeaf){

  env.shadow3D(midPoint,false);
  if(false){
   {   {__SB_ParamsStructArr_* pSBparams = reinterpret_cast<__SB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SB_ParamsStructArr_)));__SB_ParamsStruct_ SBParams; SBParams.data.moduleId = SB_id; memcpy(pSBparams, &SBParams, sizeof(__SB_ParamsStruct_));pSBparams->arr[0] = pSBparams->arr[__SB_ParamsStructSize-1] = SB_id;} {__MoveTo3f_ParamsStructArr_* pMoveTo3fparams = reinterpret_cast<__MoveTo3f_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__MoveTo3f_ParamsStructArr_)));__MoveTo3f_ParamsStruct_ MoveTo3fParams; MoveTo3fParams.data.moduleId = MoveTo3f_id; MoveTo3fParams.data.Param0 = (midPoint);memcpy(pMoveTo3fparams, &MoveTo3fParams, sizeof(__MoveTo3f_ParamsStruct_));pMoveTo3fparams->arr[0] = pMoveTo3fparams->arr[__MoveTo3f_ParamsStructSize-1] = MoveTo3f_id;}  {__SetColor_ParamsStructArr_* pSetColorparams = reinterpret_cast<__SetColor_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SetColor_ParamsStructArr_)));__SetColor_ParamsStruct_ SetColorParams; SetColorParams.data.moduleId = SetColor_id; SetColorParams.data.Param0 = (2);memcpy(pSetColorparams, &SetColorParams, sizeof(__SetColor_ParamsStruct_));pSetColorparams->arr[0] = pSetColorparams->arr[__SetColor_ParamsStructSize-1] = SetColor_id;}  {__Sphere_ParamsStructArr_* pSphereparams = reinterpret_cast<__Sphere_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Sphere_ParamsStructArr_)));__Sphere_ParamsStruct_ SphereParams; SphereParams.data.moduleId = Sphere_id; SphereParams.data.Param0 = (1);memcpy(pSphereparams, &SphereParams, sizeof(__Sphere_ParamsStruct_));pSphereparams->arr[0] = pSphereparams->arr[__Sphere_ParamsStructSize-1] = Sphere_id;}  {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;}  }
   {   {__SB_ParamsStructArr_* pSBparams = reinterpret_cast<__SB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SB_ParamsStructArr_)));__SB_ParamsStruct_ SBParams; SBParams.data.moduleId = SB_id; memcpy(pSBparams, &SBParams, sizeof(__SB_ParamsStruct_));pSBparams->arr[0] = pSBparams->arr[__SB_ParamsStructSize-1] = SB_id;} {__SetWidth_ParamsStructArr_* pSetWidthparams = reinterpret_cast<__SetWidth_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SetWidth_ParamsStructArr_)));__SetWidth_ParamsStruct_ SetWidthParams; SetWidthParams.data.moduleId = SetWidth_id; SetWidthParams.data.Param0 = (0.5);memcpy(pSetWidthparams, &SetWidthParams, sizeof(__SetWidth_ParamsStruct_));pSetWidthparams->arr[0] = pSetWidthparams->arr[__SetWidth_ParamsStructSize-1] = SetWidth_id;}  {__SetColor_ParamsStructArr_* pSetColorparams = reinterpret_cast<__SetColor_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SetColor_ParamsStructArr_)));__SetColor_ParamsStruct_ SetColorParams; SetColorParams.data.moduleId = SetColor_id; SetColorParams.data.Param0 = (3);memcpy(pSetColorparams, &SetColorParams, sizeof(__SetColor_ParamsStruct_));pSetColorparams->arr[0] = pSetColorparams->arr[__SetColor_ParamsStructSize-1] = SetColor_id;}  {__Line3f_ParamsStructArr_* pLine3fparams = reinterpret_cast<__Line3f_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Line3f_ParamsStructArr_)));__Line3f_ParamsStruct_ Line3fParams; Line3fParams.data.moduleId = Line3f_id; Line3fParams.data.Param0 = (ld.pos);Line3fParams.data.Param1 = (midPoint);memcpy(pLine3fparams, &Line3fParams, sizeof(__Line3f_ParamsStruct_));pLine3fparams->arr[0] = pLine3fparams->arr[__Line3f_ParamsStructSize-1] = Line3f_id;}  {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;}  }
  }
 }
 { __res_ = true; return;}
}


 void _P13(bool& __res_, InternodeData id, float px, float py, float pz)
{

 if(isThisNAN(px) && false ){
  Printf("\nInternode GetPos is nodenum %i nan\n",id.nodenum);
  id.wasNAN=true;
 }

 if(py>3800.0f || px>gModelDim || px < -gModelDim || pz > gModelDim || pz < -gModelDim){

  outsideBox=true;
 }

 if(id.newInternode && !id.wasNAN)
 {
  id.newInternode = false;
  if(!id.isLeaf){
   env.shadow3D(V3f(px,py,pz),true);
  }

 }

 if(doMTG && !id.wasNAN){
  fprintf(XYZfile,"%.2f, %.2f, %.2f, %i\n",px,pz,py,id.order);
  int ntype=5;
  if(id.isLeaf)
   ntype=6;
  if(id.tn == 12)
   writeMTG(MTGfile,id,MTGplantStart,MTGstack,px,py,pz,ntype,id.order,id.nodenum);
 }
 float lite=env.getContinuousExposure(V3f(px,py,pz));
 if(isThisNAN(lite))
  lite=0.0;
 id.expose=min(1.0f,max(0.f,lite));
 if(isThisNAN(px))
  { __res_ = true;  {__PruneCap_ParamsStructArr_* pPruneCapparams = reinterpret_cast<__PruneCap_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__PruneCap_ParamsStructArr_)));__PruneCap_ParamsStruct_ PruneCapParams; PruneCapParams.data.moduleId = PruneCap_id; PruneCapParams.data.Param0 = (id.width);memcpy(pPruneCapparams, &PruneCapParams, sizeof(__PruneCap_ParamsStruct_));pPruneCapparams->arr[0] = pPruneCapparams->arr[__PruneCap_ParamsStructSize-1] = PruneCap_id;}  {__Internode_ParamsStructArr_* pInternodeparams = reinterpret_cast<__Internode_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Internode_ParamsStructArr_)));__Internode_ParamsStruct_ InternodeParams; InternodeParams.data.moduleId = Internode_id; InternodeParams.data.Param0 = (id);memcpy(pInternodeparams, &InternodeParams, sizeof(__Internode_ParamsStruct_));pInternodeparams->arr[0] = pInternodeparams->arr[__Internode_ParamsStructSize-1] = Internode_id;} return;}
 else {
  if(manPruning && py > 290.0)
   { __res_ = true;  {__PruneCap_ParamsStructArr_* pPruneCapparams = reinterpret_cast<__PruneCap_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__PruneCap_ParamsStructArr_)));__PruneCap_ParamsStruct_ PruneCapParams; PruneCapParams.data.moduleId = PruneCap_id; PruneCapParams.data.Param0 = (id.width);memcpy(pPruneCapparams, &PruneCapParams, sizeof(__PruneCap_ParamsStruct_));pPruneCapparams->arr[0] = pPruneCapparams->arr[__PruneCap_ParamsStructSize-1] = PruneCap_id;}  {__Internode_ParamsStructArr_* pInternodeparams = reinterpret_cast<__Internode_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Internode_ParamsStructArr_)));__Internode_ParamsStruct_ InternodeParams; InternodeParams.data.moduleId = Internode_id; InternodeParams.data.Param0 = (id);memcpy(pInternodeparams, &InternodeParams, sizeof(__Internode_ParamsStruct_));pInternodeparams->arr[0] = pInternodeparams->arr[__Internode_ParamsStructSize-1] = Internode_id;} return;}
  else
   { __res_ = true;  {__Internode_ParamsStructArr_* pInternodeparams = reinterpret_cast<__Internode_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Internode_ParamsStructArr_)));__Internode_ParamsStruct_ InternodeParams; InternodeParams.data.moduleId = Internode_id; InternodeParams.data.Param0 = (id);memcpy(pInternodeparams, &InternodeParams, sizeof(__Internode_ParamsStruct_));pInternodeparams->arr[0] = pInternodeparams->arr[__Internode_ParamsStructSize-1] = Internode_id;} return;}
 }
}


 void _P14(bool& __res_, BudData bd, float px, float py, float pz)
{

 if(isThisNAN(px) && false ){
  Printf("Bud GetPos is nodenum %i nan\n",bd.node);
  {   {__SB_ParamsStructArr_* pSBparams = reinterpret_cast<__SB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SB_ParamsStructArr_)));__SB_ParamsStruct_ SBParams; SBParams.data.moduleId = SB_id; memcpy(pSBparams, &SBParams, sizeof(__SB_ParamsStruct_));pSBparams->arr[0] = pSBparams->arr[__SB_ParamsStructSize-1] = SB_id;} {__SetColor_ParamsStructArr_* pSetColorparams = reinterpret_cast<__SetColor_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SetColor_ParamsStructArr_)));__SetColor_ParamsStruct_ SetColorParams; SetColorParams.data.moduleId = SetColor_id; SetColorParams.data.Param0 = (1);memcpy(pSetColorparams, &SetColorParams, sizeof(__SetColor_ParamsStruct_));pSetColorparams->arr[0] = pSetColorparams->arr[__SetColor_ParamsStructSize-1] = SetColor_id;}  {__Sphere_ParamsStructArr_* pSphereparams = reinterpret_cast<__Sphere_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Sphere_ParamsStructArr_)));__Sphere_ParamsStruct_ SphereParams; SphereParams.data.moduleId = Sphere_id; SphereParams.data.Param0 = (1);memcpy(pSphereparams, &SphereParams, sizeof(__Sphere_ParamsStruct_));pSphereparams->arr[0] = pSphereparams->arr[__Sphere_ParamsStructSize-1] = Sphere_id;}  {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;}  }
 }
 if(!isThisNAN(px)){
  bd.pos = V3f(px,py,pz);
  if(bd.tn == 12){
   maxHt=max(maxHt,py);
   if(bd.order==1){
    firstBranch=min(firstBranch,py);
   }
   maxX=max(maxX,px);
   minX=min(minX,px);
   maxZ=max(maxZ,pz);
   minZ=min(minZ,pz);
   maxWidthX=maxX-minX;
   maxWidthZ=maxZ-minZ;
  }
  { __res_ = true;  {__Bud_ParamsStructArr_* pBudparams = reinterpret_cast<__Bud_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Bud_ParamsStructArr_)));__Bud_ParamsStruct_ BudParams; BudParams.data.moduleId = Bud_id; BudParams.data.Param0 = (bd);memcpy(pBudparams, &BudParams, sizeof(__Bud_ParamsStruct_));pBudparams->arr[0] = pBudparams->arr[__Bud_ParamsStructSize-1] = Bud_id;} return;}
 } else
  { __res_ = true; return;}
}


  void _P15(bool& __res_, LeafData ld, float px, float py, float pz, float hx, float hy, float hz)
{
 if(false && ld.newLeaf){
  Printf("Leaf %i.%i at 4 %.1f %.1f %.1f H: %.1f %.1f %.1f\n",ld.node,ld.leafIndex,px,py,pz,hz,hy,hz);
  {   {__SB_ParamsStructArr_* pSBparams = reinterpret_cast<__SB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SB_ParamsStructArr_)));__SB_ParamsStruct_ SBParams; SBParams.data.moduleId = SB_id; memcpy(pSBparams, &SBParams, sizeof(__SB_ParamsStruct_));pSBparams->arr[0] = pSBparams->arr[__SB_ParamsStructSize-1] = SB_id;} {__SetColor_ParamsStructArr_* pSetColorparams = reinterpret_cast<__SetColor_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SetColor_ParamsStructArr_)));__SetColor_ParamsStruct_ SetColorParams; SetColorParams.data.moduleId = SetColor_id; SetColorParams.data.Param0 = (87);memcpy(pSetColorparams, &SetColorParams, sizeof(__SetColor_ParamsStruct_));pSetColorparams->arr[0] = pSetColorparams->arr[__SetColor_ParamsStructSize-1] = SetColor_id;}  {__Sphere_ParamsStructArr_* pSphereparams = reinterpret_cast<__Sphere_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Sphere_ParamsStructArr_)));__Sphere_ParamsStruct_ SphereParams; SphereParams.data.moduleId = Sphere_id; SphereParams.data.Param0 = (0.5);memcpy(pSphereparams, &SphereParams, sizeof(__Sphere_ParamsStruct_));pSphereparams->arr[0] = pSphereparams->arr[__Sphere_ParamsStructSize-1] = Sphere_id;}  {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;}  }
  }
 ld.pos = V3f(px,py,pz);
 V3f head=V3f(hx,hy,hz);
 V3f midPoint=ld.pos+head*(0.5*ld.leafsize);
 if(ld.newLeaf) {

  env.shadow3D(midPoint,true);
  ld.newLeaf = false;
 }
 if(!ld.dead){
  float lite=env.getContinuousExposure(V3f(px,py,pz));
  if(isThisNAN(lite)){
   ld.expose=0.;
   ld.c=32;
  } else {
   ld.expose=min(1.0f,max(0.f,lite));
   ld.c=min(55,max(32,(int)ld.expose*7+48));
   if(flushno==12 +8 && lite >1.0){
    Printf("%.1f  %i\n",lite,ld.c);
    {   {__SB_ParamsStructArr_* pSBparams = reinterpret_cast<__SB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SB_ParamsStructArr_)));__SB_ParamsStruct_ SBParams; SBParams.data.moduleId = SB_id; memcpy(pSBparams, &SBParams, sizeof(__SB_ParamsStruct_));pSBparams->arr[0] = pSBparams->arr[__SB_ParamsStructSize-1] = SB_id;} {__SetColor_ParamsStructArr_* pSetColorparams = reinterpret_cast<__SetColor_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SetColor_ParamsStructArr_)));__SetColor_ParamsStruct_ SetColorParams; SetColorParams.data.moduleId = SetColor_id; SetColorParams.data.Param0 = (1);memcpy(pSetColorparams, &SetColorParams, sizeof(__SetColor_ParamsStruct_));pSetColorparams->arr[0] = pSetColorparams->arr[__SetColor_ParamsStructSize-1] = SetColor_id;}  {__Sphere_ParamsStructArr_* pSphereparams = reinterpret_cast<__Sphere_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Sphere_ParamsStructArr_)));__Sphere_ParamsStruct_ SphereParams; SphereParams.data.moduleId = Sphere_id; SphereParams.data.Param0 = (2);memcpy(pSphereparams, &SphereParams, sizeof(__Sphere_ParamsStruct_));pSphereparams->arr[0] = pSphereparams->arr[__Sphere_ParamsStructSize-1] = Sphere_id;}  {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;}  }
   }
  }
  if(ld.expose < 0.01f) {


   if (false){
    Printf("Killed leaf with expose of %f\n",ld.expose);
   }
   ld.expose=0.;
   ld.c=104;
   ld.pos=V3f(px,0,pz);
   ld.dead=true;
   ld.fdead=flushno;
   if(false){
    {  {__SetHead_ParamsStructArr_* pSetHeadparams = reinterpret_cast<__SetHead_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SetHead_ParamsStructArr_)));__SetHead_ParamsStruct_ SetHeadParams; SetHeadParams.data.moduleId = SetHead_id; SetHeadParams.data.Param0 = (((-1.) + (1. - -1.) * float_rand()));SetHeadParams.data.Param1 = (0);SetHeadParams.data.Param2 = (((-1.) + (1. - -1.) * float_rand()));SetHeadParams.data.Param3 = (0);SetHeadParams.data.Param4 = (1);SetHeadParams.data.Param5 = (0);memcpy(pSetHeadparams, &SetHeadParams, sizeof(__SetHead_ParamsStruct_));pSetHeadparams->arr[0] = pSetHeadparams->arr[__SetHead_ParamsStructSize-1] = SetHead_id;}  }
   }
  }
 }
 { __res_ = true;  {__Leaf_ParamsStructArr_* pLeafparams = reinterpret_cast<__Leaf_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Leaf_ParamsStructArr_)));__Leaf_ParamsStruct_ LeafParams; LeafParams.data.moduleId = Leaf_id; LeafParams.data.Param0 = (ld);memcpy(pLeafparams, &LeafParams, sizeof(__Leaf_ParamsStruct_));pLeafparams->arr[0] = pLeafparams->arr[__Leaf_ParamsStructSize-1] = Leaf_id;} return;}
}



 



void _P16(bool& __res_, BudData bd)
{

 float lite;
 lite=env.getContinuousExposure(bd.pos);
 if(isThisNAN(lite))
  lite=0.;
 bd.light = lite;

 if(false)
  Printf("Bud light %f\n",bd.light);

 if (ran(1.0)< bd.light * 1.0 && bd.order>0) {bd.activity=1.0;}

 { __res_ = true;  {__Bud_ParamsStructArr_* pBudparams = reinterpret_cast<__Bud_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Bud_ParamsStructArr_)));__Bud_ParamsStruct_ BudParams; BudParams.data.moduleId = Bud_id; BudParams.data.Param0 = (bd);memcpy(pBudparams, &BudParams, sizeof(__Bud_ParamsStruct_));pBudparams->arr[0] = pBudparams->arr[__Bud_ParamsStructSize-1] = Bud_id;} return;}
}


void _P17(bool& __res_, LeafData ld)
{
 float lite=env.getContinuousExposure(ld.pos);
 if(ld.dead || isThisNAN(lite)){
  ld.light=0.;
 } else
 {
  ld.light = lite;
  if(false && ld.light<0.1)
   Printf("Leaf light %f\n",ld.light);
  if(isThisNAN(ld.light) && false)
   {   {__SB_ParamsStructArr_* pSBparams = reinterpret_cast<__SB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SB_ParamsStructArr_)));__SB_ParamsStruct_ SBParams; SBParams.data.moduleId = SB_id; memcpy(pSBparams, &SBParams, sizeof(__SB_ParamsStruct_));pSBparams->arr[0] = pSBparams->arr[__SB_ParamsStructSize-1] = SB_id;} {__SetColor_ParamsStructArr_* pSetColorparams = reinterpret_cast<__SetColor_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SetColor_ParamsStructArr_)));__SetColor_ParamsStruct_ SetColorParams; SetColorParams.data.moduleId = SetColor_id; SetColorParams.data.Param0 = (87);memcpy(pSetColorparams, &SetColorParams, sizeof(__SetColor_ParamsStruct_));pSetColorparams->arr[0] = pSetColorparams->arr[__SetColor_ParamsStructSize-1] = SetColor_id;}  {__Sphere_ParamsStructArr_* pSphereparams = reinterpret_cast<__Sphere_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Sphere_ParamsStructArr_)));__Sphere_ParamsStruct_ SphereParams; SphereParams.data.moduleId = Sphere_id; SphereParams.data.Param0 = (2);memcpy(pSphereparams, &SphereParams, sizeof(__Sphere_ParamsStruct_));pSphereparams->arr[0] = pSphereparams->arr[__Sphere_ParamsStructSize-1] = Sphere_id;}  {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;}  }
 }
 { __res_ = true;  {__Leaf_ParamsStructArr_* pLeafparams = reinterpret_cast<__Leaf_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Leaf_ParamsStructArr_)));__Leaf_ParamsStruct_ LeafParams; LeafParams.data.moduleId = Leaf_id; LeafParams.data.Param0 = (ld);memcpy(pLeafparams, &LeafParams, sizeof(__Leaf_ParamsStruct_));pLeafparams->arr[0] = pLeafparams->arr[__Leaf_ParamsStructSize-1] = Leaf_id;} return;}
}



void _P18(bool& __res_, InternodeData id)
{

 id.count = 1;
 id.light = 0.;
 id.demand = 0.;
 float pipeAcc = 0.0;
 bool moreBranches = true;


 InternodeData rid;
 BudData rbd;
 LeafData rld;
 float w;

 while(moreBranches)
 {

  if(  ( RNContextReset() && AcceptContext(SB_id) && GetModuleSB() && AdvanceContext() &&AcceptContext(Internode_id) && GetModuleInternode(rid) && AdvanceContext() &&AcceptContext(EB_id) && GetModuleEB() && AdvanceContext() && ConfirmContext() ))
  {


   id.count += rid.count;
   id.light += rid.light;


   id.demand += rid.count * (1.-lambda) * pow(rid.light / rid.count,1.0f);


   pipeAcc += pow(rid.width,2.0f);
   if(false)
    Printf("(Branch) rid.width %.3f (%i) pipeAcc %.3f\n",rid.width,rid.nodenum,pipeAcc);
  }


  else if(  ( RNContextReset() && AcceptContext(SB_id) && GetModuleSB() && AdvanceContext() &&AcceptContext(Bud_id) && GetModuleBud(rbd) && AdvanceContext() &&AcceptContext(EB_id) && GetModuleEB() && AdvanceContext() && ConfirmContext() ))
  {

   id.count++;


   float act=1.0;
   if(true ){act=rbd.activity;}
   id.demand += (1.-lambda) * act * pow(rbd.light,1.0f);
  }

  else if(  ( RNContextReset() && AcceptContext(SB_id) && GetModuleSB() && AdvanceContext() &&AcceptContext(PruneCap_id) && GetModulePruneCap(w) && AdvanceContext() &&AcceptContext(EB_id) && GetModuleEB() && AdvanceContext() && ConfirmContext() ))
  {


   pipeAcc += pow(w,2.0f);
  }

  else if(  ( RNContextReset() && AcceptContext(SB_id) && GetModuleSB() && AdvanceContext() &&AcceptContext(Leaf_id) && GetModuleLeaf(rld) && AdvanceContext() &&AcceptContext(EB_id) && GetModuleEB() && AdvanceContext() && ConfirmContext() ))
  {

   id.light += rld.light;
  }

  else

   moreBranches = false;
 }



 if(( RNContextReset() && AcceptContext(Internode_id) && GetModuleInternode(rid) && AdvanceContext() && ConfirmContext() ))
 {
  id.count += rid.count;
  id.light += rid.light;


  id.demand += rid.count * lambda * pow(rid.light / rid.count,1.0f);
  pipeAcc += pow(rid.width,2.0f);
  if(false)
   Printf("(Inode) rid.width %.3f (%i) pipeAcc %.3f\n",rid.width,rid.nodenum,pipeAcc);
 }
 else if(( RNContextReset() && AcceptContext(Bud_id) && GetModuleBud(rbd) && AdvanceContext() && ConfirmContext() ))
 {
  id.count += 1;
  id.light += rbd.light;

  float act=1.0;
  if(true){act=rbd.activity;}
  id.demand += lambda * act * pow(rbd.light,1.0f);
 }
 else if(( RNContextReset() && AcceptContext(PruneCap_id) && GetModulePruneCap(w) && AdvanceContext() && ConfirmContext() ))
 {
  pipeAcc += pow(w,2.0f);
 }


 if(pipeAcc != 0){
  id.width = pow(pipeAcc,float(1./2.0f));
  if(false)
   Printf("Total %i pipeAcc %.3f %.3f\n",id.nodenum,pipeAcc,id.width);
  if(id.node==1 && id.order==0)
   idwidth=id.width;
 }



 { __res_ = true;  {__Internode_ParamsStructArr_* pInternodeparams = reinterpret_cast<__Internode_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Internode_ParamsStructArr_)));__Internode_ParamsStruct_ InternodeParams; InternodeParams.data.moduleId = Internode_id; InternodeParams.data.Param0 = (id);memcpy(pInternodeparams, &InternodeParams, sizeof(__Internode_ParamsStruct_));pInternodeparams->arr[0] = pInternodeparams->arr[__Internode_ParamsStructSize-1] = Internode_id;} return;}
}




 

  void _P19(bool& __res_, V3f pos, int tn, int rn, int pn, InternodeData id)
{
 float seasonalLightFactor;




 float K=1.0;
 float A=0.6;
 float B=0.9;
 float Q=0.2;
 float v=1.0;
 float M=13.0;
 float LFF = 1.0;
 seasonalLightFactor=15.0f*LFF;
 if(id.light == 0.0)
  id.vigor = 60.0;
 else
  id.vigor=seasonalLightFactor * id.light;

 Printf("Tree (%i): Total light at base = %g ==> total vigor = %g\n",tn,id.light,id.vigor);
 if(tn == 12)
  fprintf(MODELFIT,",%f\n",id.light);
 Printf("%d supported entities\n",id.count);
 { __res_ = true;  {__Internode_ParamsStructArr_* pInternodeparams = reinterpret_cast<__Internode_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Internode_ParamsStructArr_)));__Internode_ParamsStruct_ InternodeParams; InternodeParams.data.moduleId = Internode_id; InternodeParams.data.Param0 = (id);memcpy(pInternodeparams, &InternodeParams, sizeof(__Internode_ParamsStruct_));pInternodeparams->arr[0] = pInternodeparams->arr[__Internode_ParamsStructSize-1] = Internode_id;} return;}
}


  void _P20(bool& __res_, InternodeData lid, InternodeData id)
{

 float myDemand;



 myDemand=id.count * pow(id.light / id.count,1.0f);

 if(id.lateral)
  myDemand *= 1. - lambda;
 else
  myDemand *= lambda;


 if(lid.demand>0.){
  id.vigor = lid.vigor * (myDemand / lid.demand);
 } else
 {
  id.vigor=lid.vigor;
 }
 if(id.node==1 && false)
  Printf("%i << %i id.count %i lid.vigor %.2f mydemand %.2f lid.demand %.2f\n",lid.nodenum,id.nodenum,id.count,lid.vigor,myDemand,lid.demand);
 { __res_ = true;  {__Internode_ParamsStructArr_* pInternodeparams = reinterpret_cast<__Internode_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Internode_ParamsStructArr_)));__Internode_ParamsStruct_ InternodeParams; InternodeParams.data.moduleId = Internode_id; InternodeParams.data.Param0 = (id);memcpy(pInternodeparams, &InternodeParams, sizeof(__Internode_ParamsStruct_));pInternodeparams->arr[0] = pInternodeparams->arr[__Internode_ParamsStructSize-1] = Internode_id;} return;}
}


  void _P21(bool& __res_, InternodeData lid, BudData bd)
{


 int rn=SkewRan();
 if(lid.order==0){rn=3;}
 if(bd.lateral && bd.leafIndex > rn ){
  bd.vigor=0.;
 }
 else
 {



  float myDemand = pow(bd.light,1.0f)*bd.activity;
  if(bd.lateral)
   myDemand *= 1. - lambda;
  else
   myDemand *= lambda;

  if(lid.demand>0.){
   bd.vigor = lid.vigor * (myDemand / lid.demand);
  } else {
   bd.vigor=lid.vigor;
  }



 }
 { __res_ = true;  {__Bud_ParamsStructArr_* pBudparams = reinterpret_cast<__Bud_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Bud_ParamsStructArr_)));__Bud_ParamsStruct_ BudParams; BudParams.data.moduleId = Bud_id; BudParams.data.Param0 = (bd);memcpy(pBudparams, &BudParams, sizeof(__Bud_ParamsStruct_));pBudparams->arr[0] = pBudparams->arr[__Bud_ParamsStructSize-1] = Bud_id;} return;}
}


  void _P22(bool& __res_, InternodeData lid, LeafData ld)
{
 ld.bWidth=lid.width;
 ld.age=ld.age+0.5;
 if(ld.leafsize < 15.0)
  ld.leafsize=min(15.0,ld.leafsize*2.0*ld.age);
 { __res_ = true;  {__Leaf_ParamsStructArr_* pLeafparams = reinterpret_cast<__Leaf_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Leaf_ParamsStructArr_)));__Leaf_ParamsStruct_ LeafParams; LeafParams.data.moduleId = Leaf_id; LeafParams.data.Param0 = (ld);memcpy(pLeafparams, &LeafParams, sizeof(__Leaf_ParamsStruct_));pLeafparams->arr[0] = pLeafparams->arr[__Leaf_ParamsStructSize-1] = Leaf_id;} return;}
}




 


   void _P23(bool& __res_, V3f pos, int tn, int rn, int pn, InternodeData id) { { __res_ = true;  {__Internode_ParamsStructArr_* pInternodeparams = reinterpret_cast<__Internode_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Internode_ParamsStructArr_)));__Internode_ParamsStruct_ InternodeParams; InternodeParams.data.moduleId = Internode_id; InternodeParams.data.Param0 = (id);memcpy(pInternodeparams, &InternodeParams, sizeof(__Internode_ParamsStruct_));pInternodeparams->arr[0] = pInternodeparams->arr[__Internode_ParamsStructSize-1] = Internode_id;} return;} }



void _P24(bool& __res_, InternodeData id)
{
# 859 "lsystem.l"
 if(id.vigor < 0 ){
  Printf("Warning id.vigor < 0 \n");
 }
 if((id.vigor / float(id.count)) < 0.15 && id.order > 1)
 {

  nPruneCaps++;
  { __res_ = true;  {__PruneCap_ParamsStructArr_* pPruneCapparams = reinterpret_cast<__PruneCap_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__PruneCap_ParamsStructArr_)));__PruneCap_ParamsStruct_ PruneCapParams; PruneCapParams.data.moduleId = PruneCap_id; PruneCapParams.data.Param0 = (id.width);memcpy(pPruneCapparams, &PruneCapParams, sizeof(__PruneCap_ParamsStruct_));pPruneCapparams->arr[0] = pPruneCapparams->arr[__PruneCap_ParamsStructSize-1] = PruneCap_id;}  {__Internode_ParamsStructArr_* pInternodeparams = reinterpret_cast<__Internode_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Internode_ParamsStructArr_)));__Internode_ParamsStruct_ InternodeParams; InternodeParams.data.moduleId = Internode_id; InternodeParams.data.Param0 = (id);memcpy(pInternodeparams, &InternodeParams, sizeof(__Internode_ParamsStruct_));pInternodeparams->arr[0] = pInternodeparams->arr[__Internode_ParamsStructSize-1] = Internode_id;} return;}
 }
 else
  { __res_ = true;  {__Internode_ParamsStructArr_* pInternodeparams = reinterpret_cast<__Internode_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Internode_ParamsStructArr_)));__Internode_ParamsStruct_ InternodeParams; InternodeParams.data.moduleId = Internode_id; InternodeParams.data.Param0 = (id);memcpy(pInternodeparams, &InternodeParams, sizeof(__Internode_ParamsStruct_));pInternodeparams->arr[0] = pInternodeparams->arr[__Internode_ParamsStructSize-1] = Internode_id;} return;}
}
# 886 "lsystem.l"
 



  void _P25(bool& __res_, InternodeData id)
{
 Printf("****** Marking ID %i.%i\n",id.nodenum,id.order);
 id.manPrune=true;

 { __res_ = true;  {__PruneCap_ParamsStructArr_* pPruneCapparams = reinterpret_cast<__PruneCap_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__PruneCap_ParamsStructArr_)));__PruneCap_ParamsStruct_ PruneCapParams; PruneCapParams.data.moduleId = PruneCap_id; PruneCapParams.data.Param0 = (id.width);memcpy(pPruneCapparams, &PruneCapParams, sizeof(__PruneCap_ParamsStruct_));pPruneCapparams->arr[0] = pPruneCapparams->arr[__PruneCap_ParamsStructSize-1] = PruneCap_id;}  {__Internode_ParamsStructArr_* pInternodeparams = reinterpret_cast<__Internode_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Internode_ParamsStructArr_)));__Internode_ParamsStruct_ InternodeParams; InternodeParams.data.moduleId = Internode_id; InternodeParams.data.Param0 = (id);memcpy(pInternodeparams, &InternodeParams, sizeof(__Internode_ParamsStruct_));pInternodeparams->arr[0] = pInternodeparams->arr[__Internode_ParamsStructSize-1] = Internode_id;} return;}
}

void _P26(bool& __res_, MouseStatus MouseStatus)
{
 Printf("*******************\nPruning at %icm\n*************\n",290.0);
 manPruning=true;
 { __res_ = true; return;}
}




void _I27(bool& __res_, bool draw)
{
 if(draw){
  {   {__SB_ParamsStructArr_* pSBparams = reinterpret_cast<__SB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SB_ParamsStructArr_)));__SB_ParamsStruct_ SBParams; SBParams.data.moduleId = SB_id; memcpy(pSBparams, &SBParams, sizeof(__SB_ParamsStruct_));pSBparams->arr[0] = pSBparams->arr[__SB_ParamsStructSize-1] = SB_id;} {__SetColor_ParamsStructArr_* pSetColorparams = reinterpret_cast<__SetColor_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SetColor_ParamsStructArr_)));__SetColor_ParamsStruct_ SetColorParams; SetColorParams.data.moduleId = SetColor_id; SetColorParams.data.Param0 = (0);memcpy(pSetColorparams, &SetColorParams, sizeof(__SetColor_ParamsStruct_));pSetColorparams->arr[0] = pSetColorparams->arr[__SetColor_ParamsStructSize-1] = SetColor_id;}  {__SetWidth_ParamsStructArr_* pSetWidthparams = reinterpret_cast<__SetWidth_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SetWidth_ParamsStructArr_)));__SetWidth_ParamsStruct_ SetWidthParams; SetWidthParams.data.moduleId = SetWidth_id; SetWidthParams.data.Param0 = (3);memcpy(pSetWidthparams, &SetWidthParams, sizeof(__SetWidth_ParamsStruct_));pSetWidthparams->arr[0] = pSetWidthparams->arr[__SetWidth_ParamsStructSize-1] = SetWidth_id;}  {__MoveTo_ParamsStructArr_* pMoveToparams = reinterpret_cast<__MoveTo_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__MoveTo_ParamsStructArr_)));__MoveTo_ParamsStruct_ MoveToParams; MoveToParams.data.moduleId = MoveTo_id; MoveToParams.data.Param0 = (-gModelDim);MoveToParams.data.Param1 = (0);MoveToParams.data.Param2 = (-gModelDim);memcpy(pMoveToparams, &MoveToParams, sizeof(__MoveTo_ParamsStruct_));pMoveToparams->arr[0] = pMoveToparams->arr[__MoveTo_ParamsStructSize-1] = MoveTo_id;}  }
  for(int i=0;i<4;i++){
   {  {__LineTo3f_ParamsStructArr_* pLineTo3fparams = reinterpret_cast<__LineTo3f_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__LineTo3f_ParamsStructArr_)));__LineTo3f_ParamsStruct_ LineTo3fParams; LineTo3fParams.data.moduleId = LineTo3f_id; LineTo3fParams.data.Param0 = (V3f(X[i],0,Z[i]));memcpy(pLineTo3fparams, &LineTo3fParams, sizeof(__LineTo3f_ParamsStruct_));pLineTo3fparams->arr[0] = pLineTo3fparams->arr[__LineTo3f_ParamsStructSize-1] = LineTo3f_id;}  }
  }
  {  {__MoveTo_ParamsStructArr_* pMoveToparams = reinterpret_cast<__MoveTo_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__MoveTo_ParamsStructArr_)));__MoveTo_ParamsStruct_ MoveToParams; MoveToParams.data.moduleId = MoveTo_id; MoveToParams.data.Param0 = (-gModelDim);MoveToParams.data.Param1 = (gModelDim*2.0);MoveToParams.data.Param2 = (-gModelDim);memcpy(pMoveToparams, &MoveToParams, sizeof(__MoveTo_ParamsStruct_));pMoveToparams->arr[0] = pMoveToparams->arr[__MoveTo_ParamsStructSize-1] = MoveTo_id;}  }
  for(int i=0;i<4;i++){
   {  {__LineTo3f_ParamsStructArr_* pLineTo3fparams = reinterpret_cast<__LineTo3f_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__LineTo3f_ParamsStructArr_)));__LineTo3f_ParamsStruct_ LineTo3fParams; LineTo3fParams.data.moduleId = LineTo3f_id; LineTo3fParams.data.Param0 = (V3f(X[i],gModelDim*2.0,Z[i]));memcpy(pLineTo3fparams, &LineTo3fParams, sizeof(__LineTo3f_ParamsStruct_));pLineTo3fparams->arr[0] = pLineTo3fparams->arr[__LineTo3f_ParamsStructSize-1] = LineTo3f_id;}  }
  }
  for(int i=0;i<4;i++){
   {  {__MoveTo_ParamsStructArr_* pMoveToparams = reinterpret_cast<__MoveTo_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__MoveTo_ParamsStructArr_)));__MoveTo_ParamsStruct_ MoveToParams; MoveToParams.data.moduleId = MoveTo_id; MoveToParams.data.Param0 = (X[i]);MoveToParams.data.Param1 = (0);MoveToParams.data.Param2 = (Z[i]);memcpy(pMoveToparams, &MoveToParams, sizeof(__MoveTo_ParamsStruct_));pMoveToparams->arr[0] = pMoveToparams->arr[__MoveTo_ParamsStructSize-1] = MoveTo_id;}  {__LineTo3f_ParamsStructArr_* pLineTo3fparams = reinterpret_cast<__LineTo3f_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__LineTo3f_ParamsStructArr_)));__LineTo3f_ParamsStruct_ LineTo3fParams; LineTo3fParams.data.moduleId = LineTo3f_id; LineTo3fParams.data.Param0 = (V3f(X[i],gModelDim*2.0,Z[i]));memcpy(pLineTo3fparams, &LineTo3fParams, sizeof(__LineTo3f_ParamsStruct_));pLineTo3fparams->arr[0] = pLineTo3fparams->arr[__LineTo3f_ParamsStructSize-1] = LineTo3f_id;}  }
  }
  { __res_ = true;  {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;} return;}
 }
}


void _I28(bool& __res_, V3f pos, int tn, int rn, int pn)
{


 if(5==1 && 5==1){
  sprintf(flushlab,"Flush %d Age %i (%.2f) %i",flushno,age,lambda,step);
  {   {__SB_ParamsStructArr_* pSBparams = reinterpret_cast<__SB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SB_ParamsStructArr_)));__SB_ParamsStruct_ SBParams; SBParams.data.moduleId = SB_id; memcpy(pSBparams, &SBParams, sizeof(__SB_ParamsStruct_));pSBparams->arr[0] = pSBparams->arr[__SB_ParamsStructSize-1] = SB_id;} {__SetColor_ParamsStructArr_* pSetColorparams = reinterpret_cast<__SetColor_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SetColor_ParamsStructArr_)));__SetColor_ParamsStruct_ SetColorParams; SetColorParams.data.moduleId = SetColor_id; SetColorParams.data.Param0 = (1);memcpy(pSetColorparams, &SetColorParams, sizeof(__SetColor_ParamsStruct_));pSetColorparams->arr[0] = pSetColorparams->arr[__SetColor_ParamsStructSize-1] = SetColor_id;}  {__MoveTo_ParamsStructArr_* pMoveToparams = reinterpret_cast<__MoveTo_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__MoveTo_ParamsStructArr_)));__MoveTo_ParamsStruct_ MoveToParams; MoveToParams.data.moduleId = MoveTo_id; MoveToParams.data.Param0 = (30);MoveToParams.data.Param1 = (5);MoveToParams.data.Param2 = (0);memcpy(pMoveToparams, &MoveToParams, sizeof(__MoveTo_ParamsStruct_));pMoveToparams->arr[0] = pMoveToparams->arr[__MoveTo_ParamsStructSize-1] = MoveTo_id;}  {__Label_ParamsStructArr_* pLabelparams = reinterpret_cast<__Label_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Label_ParamsStructArr_)));__Label_ParamsStruct_ LabelParams; LabelParams.data.moduleId = Label_id; LabelParams.data.Param0 = (flushlab);memcpy(pLabelparams, &LabelParams, sizeof(__Label_ParamsStruct_));pLabelparams->arr[0] = pLabelparams->arr[__Label_ParamsStructSize-1] = Label_id;}   {__EB_ParamsStructArr_* pEBparams = reinterpret_cast<__EB_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__EB_ParamsStructArr_)));__EB_ParamsStruct_ EBParams; EBParams.data.moduleId = EB_id; memcpy(pEBparams, &EBParams, sizeof(__EB_ParamsStruct_));pEBparams->arr[0] = pEBparams->arr[__EB_ParamsStructSize-1] = EB_id;}  }
 }






 { __res_ = true;  {__MoveTo3f_ParamsStructArr_* pMoveTo3fparams = reinterpret_cast<__MoveTo3f_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__MoveTo3f_ParamsStructArr_)));__MoveTo3f_ParamsStruct_ MoveTo3fParams; MoveTo3fParams.data.moduleId = MoveTo3f_id; MoveTo3fParams.data.Param0 = (pos);memcpy(pMoveTo3fparams, &MoveTo3fParams, sizeof(__MoveTo3f_ParamsStruct_));pMoveTo3fparams->arr[0] = pMoveTo3fparams->arr[__MoveTo3f_ParamsStructSize-1] = MoveTo3f_id;}  {__Elasticity_ParamsStructArr_* pElasticityparams = reinterpret_cast<__Elasticity_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__Elasticity_ParamsStructArr_)));__Elasticity_ParamsStruct_ ElasticityParams; ElasticityParams.data.moduleId = Elasticity_id; ElasticityParams.data.Param0 = (0.1);memcpy(pElasticityparams, &ElasticityParams, sizeof(__Elasticity_ParamsStruct_));pElasticityparams->arr[0] = pElasticityparams->arr[__Elasticity_ParamsStructSize-1] = Elasticity_id;} return;}
}


void _I29(bool& __res_, InternodeData id)
{
# 968 "lsystem.l"
 if(id.rn == 3 || 3 == -1)
  { __res_ = true;  {__SetColor_ParamsStructArr_* pSetColorparams = reinterpret_cast<__SetColor_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SetColor_ParamsStructArr_)));__SetColor_ParamsStruct_ SetColorParams; SetColorParams.data.moduleId = SetColor_id; SetColorParams.data.Param0 = (id.c);memcpy(pSetColorparams, &SetColorParams, sizeof(__SetColor_ParamsStruct_));pSetColorparams->arr[0] = pSetColorparams->arr[__SetColor_ParamsStructSize-1] = SetColor_id;}  {__SetWidth_ParamsStructArr_* pSetWidthparams = reinterpret_cast<__SetWidth_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__SetWidth_ParamsStructArr_)));__SetWidth_ParamsStruct_ SetWidthParams; SetWidthParams.data.moduleId = SetWidth_id; SetWidthParams.data.Param0 = (id.width);memcpy(pSetWidthparams, &SetWidthParams, sizeof(__SetWidth_ParamsStruct_));pSetWidthparams->arr[0] = pSetWidthparams->arr[__SetWidth_ParamsStructSize-1] = SetWidth_id;}  {__F_ParamsStructArr_* pFparams = reinterpret_cast<__F_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__F_ParamsStructArr_)));__F_ParamsStruct_ FParams; FParams.data.moduleId = F_id; FParams.data.Param0 = (id.length);memcpy(pFparams, &FParams, sizeof(__F_ParamsStruct_));pFparams->arr[0] = pFparams->arr[__F_ParamsStructSize-1] = F_id;}  return;}
 else
  { __res_ = true;  {__f_ParamsStructArr_* pfparams = reinterpret_cast<__f_ParamsStructArr_*>(GetNextModuleSpot(sizeof(__f_ParamsStructArr_)));__f_ParamsStruct_ fParams; fParams.data.moduleId = f_id; fParams.data.Param0 = (id.length);memcpy(pfparams, &fParams, sizeof(__f_ParamsStruct_));pfparams->arr[0] = pfparams->arr[__f_ParamsStructSize-1] = f_id;} return;}
}

bool _PC1(const __lc_CallerData* pCD)
{
bool res = false;
const __Orchard_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Orchard_ParamsStruct_*>(pCD->Strct().pArg(0));
__Orchard_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Orchard_ParamsStruct_));
_P1(res, Strct0Params.data.Param0, Strct0Params.data.Param1);
return res;
}


bool _PC2(const __lc_CallerData* pCD)
{
bool res = false;
const __TreeReader_ParamsStruct_* pStrct0Params = reinterpret_cast<const __TreeReader_ParamsStruct_*>(pCD->Strct().pArg(0));
__TreeReader_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__TreeReader_ParamsStruct_));
_P2(res, Strct0Params.data.Param0, Strct0Params.data.Param1, Strct0Params.data.Param2, Strct0Params.data.Param3);
return res;
}


bool _PC3(const __lc_CallerData* pCD)
{
bool res = false;
const __Parab_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Parab_ParamsStruct_*>(pCD->Strct().pArg(0));
__Parab_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Parab_ParamsStruct_));
_P3(res, Strct0Params.data.Param0, Strct0Params.data.Param1, Strct0Params.data.Param2);
return res;
}


bool _PC4(const __lc_CallerData* pCD)
{
bool res = false;
const __Internode_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Internode_ParamsStruct_*>(pCD->Strct().pArg(0));
__Internode_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Internode_ParamsStruct_));
_P4(res, Strct0Params.data.Param0);
return res;
}


bool _PC5(const __lc_CallerData* pCD)
{
bool res = false;
const __Bud_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Bud_ParamsStruct_*>(pCD->Strct().pArg(0));
__Bud_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Bud_ParamsStruct_));
_P5(res, Strct0Params.data.Param0);
return res;
}


bool _PC6(const __lc_CallerData* pCD)
{
bool res = false;
const __Internode_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Internode_ParamsStruct_*>(pCD->Strct().pArg(0));
__Internode_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Internode_ParamsStruct_));
_P6(res, Strct0Params.data.Param0);
return res;
}


bool _PC7(const __lc_CallerData* pCD)
{
bool res = false;
const __Bud_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Bud_ParamsStruct_*>(pCD->Strct().pArg(0));
__Bud_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Bud_ParamsStruct_));
_P7(res, Strct0Params.data.Param0);
return res;
}


bool _PC8(const __lc_CallerData* pCD)
{
bool res = false;
const __Leaf_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Leaf_ParamsStruct_*>(pCD->Strct().pArg(0));
__Leaf_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Leaf_ParamsStruct_));
_P8(res, Strct0Params.data.Param0);
return res;
}


bool _PC9(const __lc_CallerData* pCD)
{
bool res = false;
const __PruneCap_ParamsStruct_* pLCntxt0Params = reinterpret_cast<const __PruneCap_ParamsStruct_*>(pCD->LCntxt().pArg(0));
__PruneCap_ParamsStruct_ LCntxt0Params; memcpy(&LCntxt0Params, pLCntxt0Params, sizeof(__PruneCap_ParamsStruct_));
const __Internode_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Internode_ParamsStruct_*>(pCD->Strct().pArg(0));
__Internode_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Internode_ParamsStruct_));
const __GetPos_ParamsStruct_* pStrct1Params = reinterpret_cast<const __GetPos_ParamsStruct_*>(pCD->Strct().pArg(1));
__GetPos_ParamsStruct_ Strct1Params; memcpy(&Strct1Params, pStrct1Params, sizeof(__GetPos_ParamsStruct_));
_P9(res, LCntxt0Params.data.Param0, Strct0Params.data.Param0, Strct1Params.data.Param0, Strct1Params.data.Param1, Strct1Params.data.Param2);
return res;
}


bool _PC10(const __lc_CallerData* pCD)
{
bool res = false;
const __PruneCap_ParamsStruct_* pLCntxt0Params = reinterpret_cast<const __PruneCap_ParamsStruct_*>(pCD->LCntxt().pArg(0));
__PruneCap_ParamsStruct_ LCntxt0Params; memcpy(&LCntxt0Params, pLCntxt0Params, sizeof(__PruneCap_ParamsStruct_));
const __Bud_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Bud_ParamsStruct_*>(pCD->Strct().pArg(0));
__Bud_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Bud_ParamsStruct_));
const __GetPos_ParamsStruct_* pStrct1Params = reinterpret_cast<const __GetPos_ParamsStruct_*>(pCD->Strct().pArg(1));
__GetPos_ParamsStruct_ Strct1Params; memcpy(&Strct1Params, pStrct1Params, sizeof(__GetPos_ParamsStruct_));
_P10(res, LCntxt0Params.data.Param0, Strct0Params.data.Param0, Strct1Params.data.Param0, Strct1Params.data.Param1, Strct1Params.data.Param2);
return res;
}


bool _PC11(const __lc_CallerData* pCD)
{
bool res = false;
const __PruneCap_ParamsStruct_* pLCntxt0Params = reinterpret_cast<const __PruneCap_ParamsStruct_*>(pCD->LCntxt().pArg(0));
__PruneCap_ParamsStruct_ LCntxt0Params; memcpy(&LCntxt0Params, pLCntxt0Params, sizeof(__PruneCap_ParamsStruct_));
const __PruneCap_ParamsStruct_* pStrct0Params = reinterpret_cast<const __PruneCap_ParamsStruct_*>(pCD->Strct().pArg(0));
__PruneCap_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__PruneCap_ParamsStruct_));
_P11(res, LCntxt0Params.data.Param0, Strct0Params.data.Param0);
return res;
}


bool _PC12(const __lc_CallerData* pCD)
{
bool res = false;
const __PruneCap_ParamsStruct_* pLCntxt0Params = reinterpret_cast<const __PruneCap_ParamsStruct_*>(pCD->LCntxt().pArg(0));
__PruneCap_ParamsStruct_ LCntxt0Params; memcpy(&LCntxt0Params, pLCntxt0Params, sizeof(__PruneCap_ParamsStruct_));
const __Leaf_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Leaf_ParamsStruct_*>(pCD->Strct().pArg(0));
__Leaf_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Leaf_ParamsStruct_));
const __GetPos_ParamsStruct_* pStrct1Params = reinterpret_cast<const __GetPos_ParamsStruct_*>(pCD->Strct().pArg(1));
__GetPos_ParamsStruct_ Strct1Params; memcpy(&Strct1Params, pStrct1Params, sizeof(__GetPos_ParamsStruct_));
const __GetHead_ParamsStruct_* pStrct2Params = reinterpret_cast<const __GetHead_ParamsStruct_*>(pCD->Strct().pArg(2));
__GetHead_ParamsStruct_ Strct2Params; memcpy(&Strct2Params, pStrct2Params, sizeof(__GetHead_ParamsStruct_));
_P12(res, LCntxt0Params.data.Param0, Strct0Params.data.Param0, Strct1Params.data.Param0, Strct1Params.data.Param1, Strct1Params.data.Param2, Strct2Params.data.Param0, Strct2Params.data.Param1, Strct2Params.data.Param2);
return res;
}


bool _PC13(const __lc_CallerData* pCD)
{
bool res = false;
const __Internode_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Internode_ParamsStruct_*>(pCD->Strct().pArg(0));
__Internode_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Internode_ParamsStruct_));
const __GetPos_ParamsStruct_* pStrct1Params = reinterpret_cast<const __GetPos_ParamsStruct_*>(pCD->Strct().pArg(1));
__GetPos_ParamsStruct_ Strct1Params; memcpy(&Strct1Params, pStrct1Params, sizeof(__GetPos_ParamsStruct_));
_P13(res, Strct0Params.data.Param0, Strct1Params.data.Param0, Strct1Params.data.Param1, Strct1Params.data.Param2);
return res;
}


bool _PC14(const __lc_CallerData* pCD)
{
bool res = false;
const __Bud_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Bud_ParamsStruct_*>(pCD->Strct().pArg(0));
__Bud_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Bud_ParamsStruct_));
const __GetPos_ParamsStruct_* pStrct1Params = reinterpret_cast<const __GetPos_ParamsStruct_*>(pCD->Strct().pArg(1));
__GetPos_ParamsStruct_ Strct1Params; memcpy(&Strct1Params, pStrct1Params, sizeof(__GetPos_ParamsStruct_));
_P14(res, Strct0Params.data.Param0, Strct1Params.data.Param0, Strct1Params.data.Param1, Strct1Params.data.Param2);
return res;
}


bool _PC15(const __lc_CallerData* pCD)
{
bool res = false;
const __Leaf_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Leaf_ParamsStruct_*>(pCD->Strct().pArg(0));
__Leaf_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Leaf_ParamsStruct_));
const __GetPos_ParamsStruct_* pStrct1Params = reinterpret_cast<const __GetPos_ParamsStruct_*>(pCD->Strct().pArg(1));
__GetPos_ParamsStruct_ Strct1Params; memcpy(&Strct1Params, pStrct1Params, sizeof(__GetPos_ParamsStruct_));
const __GetHead_ParamsStruct_* pStrct2Params = reinterpret_cast<const __GetHead_ParamsStruct_*>(pCD->Strct().pArg(2));
__GetHead_ParamsStruct_ Strct2Params; memcpy(&Strct2Params, pStrct2Params, sizeof(__GetHead_ParamsStruct_));
_P15(res, Strct0Params.data.Param0, Strct1Params.data.Param0, Strct1Params.data.Param1, Strct1Params.data.Param2, Strct2Params.data.Param0, Strct2Params.data.Param1, Strct2Params.data.Param2);
return res;
}


bool _PC16(const __lc_CallerData* pCD)
{
bool res = false;
const __Bud_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Bud_ParamsStruct_*>(pCD->Strct().pArg(0));
__Bud_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Bud_ParamsStruct_));
_P16(res, Strct0Params.data.Param0);
return res;
}


bool _PC17(const __lc_CallerData* pCD)
{
bool res = false;
const __Leaf_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Leaf_ParamsStruct_*>(pCD->Strct().pArg(0));
__Leaf_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Leaf_ParamsStruct_));
_P17(res, Strct0Params.data.Param0);
return res;
}


bool _PC18(const __lc_CallerData* pCD)
{
bool res = false;
const __Internode_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Internode_ParamsStruct_*>(pCD->Strct().pArg(0));
__Internode_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Internode_ParamsStruct_));
_P18(res, Strct0Params.data.Param0);
return res;
}


bool _PC19(const __lc_CallerData* pCD)
{
bool res = false;
const __Roots_ParamsStruct_* pLCntxt0Params = reinterpret_cast<const __Roots_ParamsStruct_*>(pCD->LCntxt().pArg(0));
__Roots_ParamsStruct_ LCntxt0Params; memcpy(&LCntxt0Params, pLCntxt0Params, sizeof(__Roots_ParamsStruct_));
const __Internode_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Internode_ParamsStruct_*>(pCD->Strct().pArg(0));
__Internode_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Internode_ParamsStruct_));
_P19(res, LCntxt0Params.data.Param0, LCntxt0Params.data.Param1, LCntxt0Params.data.Param2, LCntxt0Params.data.Param3, Strct0Params.data.Param0);
return res;
}


bool _PC20(const __lc_CallerData* pCD)
{
bool res = false;
const __Internode_ParamsStruct_* pLCntxt0Params = reinterpret_cast<const __Internode_ParamsStruct_*>(pCD->LCntxt().pArg(0));
__Internode_ParamsStruct_ LCntxt0Params; memcpy(&LCntxt0Params, pLCntxt0Params, sizeof(__Internode_ParamsStruct_));
const __Internode_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Internode_ParamsStruct_*>(pCD->Strct().pArg(0));
__Internode_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Internode_ParamsStruct_));
_P20(res, LCntxt0Params.data.Param0, Strct0Params.data.Param0);
return res;
}


bool _PC21(const __lc_CallerData* pCD)
{
bool res = false;
const __Internode_ParamsStruct_* pLCntxt0Params = reinterpret_cast<const __Internode_ParamsStruct_*>(pCD->LCntxt().pArg(0));
__Internode_ParamsStruct_ LCntxt0Params; memcpy(&LCntxt0Params, pLCntxt0Params, sizeof(__Internode_ParamsStruct_));
const __Bud_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Bud_ParamsStruct_*>(pCD->Strct().pArg(0));
__Bud_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Bud_ParamsStruct_));
_P21(res, LCntxt0Params.data.Param0, Strct0Params.data.Param0);
return res;
}


bool _PC22(const __lc_CallerData* pCD)
{
bool res = false;
const __Internode_ParamsStruct_* pLCntxt0Params = reinterpret_cast<const __Internode_ParamsStruct_*>(pCD->LCntxt().pArg(0));
__Internode_ParamsStruct_ LCntxt0Params; memcpy(&LCntxt0Params, pLCntxt0Params, sizeof(__Internode_ParamsStruct_));
const __Leaf_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Leaf_ParamsStruct_*>(pCD->Strct().pArg(0));
__Leaf_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Leaf_ParamsStruct_));
_P22(res, LCntxt0Params.data.Param0, Strct0Params.data.Param0);
return res;
}


bool _PC23(const __lc_CallerData* pCD)
{
bool res = false;
const __Roots_ParamsStruct_* pLCntxt0Params = reinterpret_cast<const __Roots_ParamsStruct_*>(pCD->LCntxt().pArg(0));
__Roots_ParamsStruct_ LCntxt0Params; memcpy(&LCntxt0Params, pLCntxt0Params, sizeof(__Roots_ParamsStruct_));
const __Internode_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Internode_ParamsStruct_*>(pCD->Strct().pArg(0));
__Internode_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Internode_ParamsStruct_));
_P23(res, LCntxt0Params.data.Param0, LCntxt0Params.data.Param1, LCntxt0Params.data.Param2, LCntxt0Params.data.Param3, Strct0Params.data.Param0);
return res;
}


bool _PC24(const __lc_CallerData* pCD)
{
bool res = false;
const __Internode_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Internode_ParamsStruct_*>(pCD->Strct().pArg(0));
__Internode_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Internode_ParamsStruct_));
_P24(res, Strct0Params.data.Param0);
return res;
}


bool _PC25(const __lc_CallerData* pCD)
{
bool res = false;
const __Internode_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Internode_ParamsStruct_*>(pCD->Strct().pArg(0));
__Internode_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Internode_ParamsStruct_));
_P25(res, Strct0Params.data.Param0);
return res;
}


bool _PC26(const __lc_CallerData* pCD)
{
bool res = false;
const __MouseInsPos_ParamsStruct_* pStrct0Params = reinterpret_cast<const __MouseInsPos_ParamsStruct_*>(pCD->Strct().pArg(0));
__MouseInsPos_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__MouseInsPos_ParamsStruct_));
_P26(res, Strct0Params.data.Param0);
return res;
}


bool _IC27(const __lc_CallerData* pCD)
{
bool res = false;
const __Box_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Box_ParamsStruct_*>(pCD->Strct().pArg(0));
__Box_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Box_ParamsStruct_));
_I27(res, Strct0Params.data.Param0);
return res;
}


bool _IC28(const __lc_CallerData* pCD)
{
bool res = false;
const __Roots_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Roots_ParamsStruct_*>(pCD->Strct().pArg(0));
__Roots_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Roots_ParamsStruct_));
_I28(res, Strct0Params.data.Param0, Strct0Params.data.Param1, Strct0Params.data.Param2, Strct0Params.data.Param3);
return res;
}


bool _IC29(const __lc_CallerData* pCD)
{
bool res = false;
const __Internode_ParamsStruct_* pStrct0Params = reinterpret_cast<const __Internode_ParamsStruct_*>(pCD->Strct().pArg(0));
__Internode_ParamsStruct_ Strct0Params; memcpy(&Strct0Params, pStrct0Params, sizeof(__Internode_ParamsStruct_));
_I29(res, Strct0Params.data.Param0);
return res;
}

static const __lc_ProductionPredecessor Ppred0[] =
{
	{
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		{
			{ Orchard_id }, 1
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC1, 1 
	},
	{
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		{
			{ TreeReader_id }, 1
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC2, 1 
	},
	{
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		{
			{ Parab_id }, 1
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC3, 1 
	},
	{
		{
			{ { MouseIns_id }, 1 }, { { 0 }, 0 }
		},
		{
			{ Internode_id }, 1
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC25, 1 
	},
	{
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		{
			{ MouseInsPos_id }, 1
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC26, 1 
	}
};
static const __lc_ProductionPredecessor Ppred1[] =
{
	{
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		{
			{ Internode_id }, 1
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC4, 1 
	}
};
static const __lc_ProductionPredecessor Ppred2[] =
{
	{
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		{
			{ Bud_id }, 1
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC5, 1 
	}
};
static const __lc_ProductionPredecessor Ppred3[] =
{
	{
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		{
			{ Internode_id }, 1
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC6, 1 
	},
	{
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		{
			{ Bud_id }, 1
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC7, 1 
	},
	{
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		{
			{ Leaf_id }, 1
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC8, 1 
	}
};
static const __lc_ProductionPredecessor Ppred4[] =
{
	{
		{
			{ { 0 }, 0 }, { { PruneCap_id }, 1 }
		},
		{
			{ Internode_id, GetPos_id }, 2
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC9, 1 
	},
	{
		{
			{ { 0 }, 0 }, { { PruneCap_id }, 1 }
		},
		{
			{ Bud_id, GetPos_id }, 2
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC10, 1 
	},
	{
		{
			{ { 0 }, 0 }, { { PruneCap_id }, 1 }
		},
		{
			{ PruneCap_id }, 1
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC11, 1 
	},
	{
		{
			{ { 0 }, 0 }, { { PruneCap_id }, 1 }
		},
		{
			{ Leaf_id, GetPos_id, GetHead_id }, 3
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC12, 1 
	},
	{
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		{
			{ Internode_id, GetPos_id }, 2
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC13, 1 
	},
	{
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		{
			{ Bud_id, GetPos_id }, 2
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC14, 1 
	},
	{
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		{
			{ Leaf_id, GetPos_id, GetHead_id }, 3
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC15, 1 
	}
};
static const __lc_ProductionPredecessor Ppred5[] =
{
	{
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		{
			{ Bud_id }, 1
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC16, 1 
	},
	{
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		{
			{ Leaf_id }, 1
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC17, 1 
	},
	{
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		{
			{ Internode_id }, 1
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC18, 1 
	}
};
static const __lc_ProductionPredecessor Ppred6[] =
{
	{
		{
			{ { Roots_id }, 1 }, { { 0 }, 0 }
		},
		{
			{ Internode_id }, 1
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC19, 1 
	},
	{
		{
			{ { 0 }, 0 }, { { Internode_id }, 1 }
		},
		{
			{ Internode_id }, 1
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC20, 1 
	},
	{
		{
			{ { 0 }, 0 }, { { Internode_id }, 1 }
		},
		{
			{ Bud_id }, 1
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC21, 1 
	},
	{
		{
			{ { 0 }, 0 }, { { Internode_id }, 1 }
		},
		{
			{ Leaf_id }, 1
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC22, 1 
	}
};
static const __lc_ProductionPredecessor Ppred7[] =
{
	{
		{
			{ { Roots_id }, 1 }, { { 0 }, 0 }
		},
		{
			{ Internode_id }, 1
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC23, 1 
	},
	{
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		{
			{ Internode_id }, 1
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_PC24, 1 
	}
};
static const __lc_ProductionPredecessor* Ptables[] =
{
Ppred0, Ppred1, Ppred2, Ppred3, Ppred4, Ppred5, Ppred6, Ppred7
};

static int PProdCount[] =
{
5, 1, 1, 3, 7, 3, 4, 2
};

static const __lc_ProductionPredecessor Dpred0[] =
{
	{
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		0, 0
	}

};
static const __lc_ProductionPredecessor Dpred1[] =
{
	{
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		0, 0
	}

};
static const __lc_ProductionPredecessor Dpred2[] =
{
	{
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		0, 0
	}

};
static const __lc_ProductionPredecessor Dpred3[] =
{
	{
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		0, 0
	}

};
static const __lc_ProductionPredecessor Dpred4[] =
{
	{
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		0, 0
	}

};
static const __lc_ProductionPredecessor Dpred5[] =
{
	{
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		0, 0
	}

};
static const __lc_ProductionPredecessor Dpred6[] =
{
	{
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		0, 0
	}

};
static const __lc_ProductionPredecessor Dpred7[] =
{
	{
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		0, 0
	}

};
static const __lc_ProductionPredecessor* Dtables[] =
{
Dpred0, Dpred1, Dpred2, Dpred3, Dpred4, Dpred5, Dpred6, Dpred7
};

static int DProdCount[] =
{
0, 0, 0, 0, 0, 0, 0, 0
};

static const __lc_ProductionPredecessor Ipred0[] =
{
	{
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		{
			{ Box_id }, 1
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_IC27, 1 
	},
	{
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		{
			{ Roots_id }, 1
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_IC28, 1 
	},
	{
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		{
			{ Internode_id }, 1
		},
		{
			{ { 0 }, 0 }, { { 0 }, 0 }
		},
		_IC29, 1 
	}
};
static const __lc_ProductionPredecessor Ipred1[] =
{
	{
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		0, 0
	}

};
static const __lc_ProductionPredecessor Ipred2[] =
{
	{
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		0, 0
	}

};
static const __lc_ProductionPredecessor Ipred3[] =
{
	{
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		0, 0
	}

};
static const __lc_ProductionPredecessor Ipred4[] =
{
	{
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		0, 0
	}

};
static const __lc_ProductionPredecessor Ipred5[] =
{
	{
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		0, 0
	}

};
static const __lc_ProductionPredecessor Ipred6[] =
{
	{
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		0, 0
	}

};
static const __lc_ProductionPredecessor Ipred7[] =
{
	{
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		{
			{ 0 }, 0
		},
		0, 0
	}

};
static const __lc_ProductionPredecessor* Itables[] =
{
Ipred0, Ipred1, Ipred2, Ipred3, Ipred4, Ipred5, Ipred6, Ipred7
};

static int IProdCount[] =
{
3, 0, 0, 0, 0, 0, 0, 0
};

const __lc_ModuleData moduleData[] =
{
{ "SB", sizeof(__SB_ParamsStructArr_) },{ "EB", sizeof(__EB_ParamsStructArr_) },{ "F", sizeof(__F_ParamsStructArr_) },{ "f", sizeof(__f_ParamsStructArr_) },
{ "Left", sizeof(__Left_ParamsStructArr_) },{ "Right", sizeof(__Right_ParamsStructArr_) },{ "Down", sizeof(__Down_ParamsStructArr_) },{ "Up", sizeof(__Up_ParamsStructArr_) },
{ "RollL", sizeof(__RollL_ParamsStructArr_) },{ "RollR", sizeof(__RollR_ParamsStructArr_) },{ "IncColor", sizeof(__IncColor_ParamsStructArr_) },{ "DecColor", sizeof(__DecColor_ParamsStructArr_) },
{ "SetColor", sizeof(__SetColor_ParamsStructArr_) },{ "SetWidth", sizeof(__SetWidth_ParamsStructArr_) },{ "Label", sizeof(__Label_ParamsStructArr_) },{ "TurnAround", sizeof(__TurnAround_ParamsStructArr_) },
{ "Cut", sizeof(__Cut_ParamsStructArr_) },{ "GetPos", sizeof(__GetPos_ParamsStructArr_) },{ "GetHead", sizeof(__GetHead_ParamsStructArr_) },{ "GetLeft", sizeof(__GetLeft_ParamsStructArr_) },
{ "GetUp", sizeof(__GetUp_ParamsStructArr_) },{ "Circle", sizeof(__Circle_ParamsStructArr_) },{ "MoveTo", sizeof(__MoveTo_ParamsStructArr_) },{ "Sphere", sizeof(__Sphere_ParamsStructArr_) },
{ "SetHead", sizeof(__SetHead_ParamsStructArr_) },{ "Sphere0", sizeof(__Sphere0_ParamsStructArr_) },{ "Circle0", sizeof(__Circle0_ParamsStructArr_) },{ "Line2f", sizeof(__Line2f_ParamsStructArr_) },
{ "Line2d", sizeof(__Line2d_ParamsStructArr_) },{ "Line3f", sizeof(__Line3f_ParamsStructArr_) },{ "Line3d", sizeof(__Line3d_ParamsStructArr_) },{ "LineTo2f", sizeof(__LineTo2f_ParamsStructArr_) },
{ "LineTo2d", sizeof(__LineTo2d_ParamsStructArr_) },{ "LineTo3f", sizeof(__LineTo3f_ParamsStructArr_) },{ "LineTo3d", sizeof(__LineTo3d_ParamsStructArr_) },{ "LineRel2f", sizeof(__LineRel2f_ParamsStructArr_) },
{ "LineRel2d", sizeof(__LineRel2d_ParamsStructArr_) },{ "LineRel3f", sizeof(__LineRel3f_ParamsStructArr_) },{ "LineRel3d", sizeof(__LineRel3d_ParamsStructArr_) },{ "Surface", sizeof(__Surface_ParamsStructArr_) },
{ "RollToVert", sizeof(__RollToVert_ParamsStructArr_) },{ "SetElasticity", sizeof(__SetElasticity_ParamsStructArr_) },{ "IncElasticity", sizeof(__IncElasticity_ParamsStructArr_) },{ "DecElasticity", sizeof(__DecElasticity_ParamsStructArr_) },
{ "CurrentContour", sizeof(__CurrentContour_ParamsStructArr_) },{ "StartGC", sizeof(__StartGC_ParamsStructArr_) },{ "PointGC", sizeof(__PointGC_ParamsStructArr_) },{ "EndGC", sizeof(__EndGC_ParamsStructArr_) },
{ "MeshPoint", sizeof(__MeshPoint_ParamsStructArr_) },{ "E1", sizeof(__E1_ParamsStructArr_) },{ "MoveTo2f", sizeof(__MoveTo2f_ParamsStructArr_) },{ "MoveTo2d", sizeof(__MoveTo2d_ParamsStructArr_) },
{ "MoveTo3f", sizeof(__MoveTo3f_ParamsStructArr_) },{ "MoveTo3d", sizeof(__MoveTo3d_ParamsStructArr_) },{ "E2", sizeof(__E2_ParamsStructArr_) },{ "SP", sizeof(__SP_ParamsStructArr_) },
{ "EP", sizeof(__EP_ParamsStructArr_) },{ "PP", sizeof(__PP_ParamsStructArr_) },{ "Rhombus", sizeof(__Rhombus_ParamsStructArr_) },{ "Triangle", sizeof(__Triangle_ParamsStructArr_) },
{ "MouseIns", sizeof(__MouseIns_ParamsStructArr_) },{ "BlendedContour", sizeof(__BlendedContour_ParamsStructArr_) },{ "CurrentTexture", sizeof(__CurrentTexture_ParamsStructArr_) },{ "TextureVCoeff", sizeof(__TextureVCoeff_ParamsStructArr_) },
{ "Orient", sizeof(__Orient_ParamsStructArr_) },{ "ScaleContour", sizeof(__ScaleContour_ParamsStructArr_) },{ "Elasticity", sizeof(__Elasticity_ParamsStructArr_) },{ "DSurface", sizeof(__DSurface_ParamsStructArr_) },
{ "G", sizeof(__G_ParamsStructArr_) },{ "g", sizeof(__g_ParamsStructArr_) },{ "MouseInsPos", sizeof(__MouseInsPos_ParamsStructArr_) },{ "Surface3", sizeof(__Surface3_ParamsStructArr_) },
{ "ContourSides", sizeof(__ContourSides_ParamsStructArr_) },{ "InitSurface", sizeof(__InitSurface_ParamsStructArr_) },{ "SurfacePoint", sizeof(__SurfacePoint_ParamsStructArr_) },{ "DrawSurface", sizeof(__DrawSurface_ParamsStructArr_) },
{ "Propensity", sizeof(__Propensity_ParamsStructArr_) },{ "CircleFront", sizeof(__CircleFront_ParamsStructArr_) },{ "CircleFront0", sizeof(__CircleFront0_ParamsStructArr_) },{ "SetUPrecision", sizeof(__SetUPrecision_ParamsStructArr_) },
{ "SetVPrecision", sizeof(__SetVPrecision_ParamsStructArr_) },{ "LineTo", sizeof(__LineTo_ParamsStructArr_) },{ "BSurface", sizeof(__BSurface_ParamsStructArr_) },{ "MoveRel2f", sizeof(__MoveRel2f_ParamsStructArr_) },
{ "MoveRel2d", sizeof(__MoveRel2d_ParamsStructArr_) },{ "MoveRel3f", sizeof(__MoveRel3f_ParamsStructArr_) },{ "MoveRel3d", sizeof(__MoveRel3d_ParamsStructArr_) },{ "DBSurfaceS", sizeof(__DBSurfaceS_ParamsStructArr_) },
{ "DBSurfaceM", sizeof(__DBSurfaceM_ParamsStructArr_) },{ "Camera", sizeof(__Camera_ParamsStructArr_) },{ "EA20", sizeof(__EA20_ParamsStructArr_) },{ "Rotate", sizeof(__Rotate_ParamsStructArr_) },
{ "RotateHLU", sizeof(__RotateHLU_ParamsStructArr_) },{ "RotateXYZ", sizeof(__RotateXYZ_ParamsStructArr_) },{ "Terrain", sizeof(__Terrain_ParamsStructArr_) },{ "PovRayStart", sizeof(__PovRayStart_ParamsStructArr_) },
{ "SetHead3f", sizeof(__SetHead3f_ParamsStructArr_) },{ "SetTropismDirection3f", sizeof(__SetTropismDirection3f_ParamsStructArr_) },{ "Orchard", sizeof(__Orchard_ParamsStructArr_) },{ "TreeReader", sizeof(__TreeReader_ParamsStructArr_) },
{ "Roots", sizeof(__Roots_ParamsStructArr_) },{ "Internode", sizeof(__Internode_ParamsStructArr_) },{ "Bud", sizeof(__Bud_ParamsStructArr_) },{ "PruneCap", sizeof(__PruneCap_ParamsStructArr_) },
{ "Leaf", sizeof(__Leaf_ParamsStructArr_) },{ "Parab", sizeof(__Parab_ParamsStructArr_) },{ "Box", sizeof(__Box_ParamsStructArr_) }
};


const __lc_ModuleData* GetModuleData(int i)
{ return &(moduleData[i]); }


int NumOfModules()
{ return 107; }

int NumOfProductions(int grp)
{ return PProdCount[grp]; }

int NumOfDecompositions(int grp)
{ return DProdCount[grp]; }

int NumOfInterpretations(int grp)
{ return IProdCount[grp]; }

const __lc_ProductionPredecessor& GetProductionPredecessor(int grp, int i)
{ return Ptables[grp][i]; }

const __lc_ProductionPredecessor& GetDecompositionPredecessor(int grp, int i)
{ return Dtables[grp][i]; }

const __lc_ProductionPredecessor& GetInterpretationPredecessor(int grp, int i, int vgrp)
 		{ 
 			return Itables[grp][i*(1+vgrp)]; 
 		}
int NumOfViews() { return 1; }
int NumOfConsiderGroups() { return 2; }

static const __lc_ModuleIdType __ignoreArr0[] = { 0 };
static const __lc_ModuleIdType __considerArr0[] = { 0 };

static const int __ignoreCount[] = { sizeof(__ignoreArr0)/sizeof(__ignoreArr0[0])-1, sizeof(__ignoreArr1)/sizeof(__ignoreArr1[0])-1, 0 };
static const int __considerCount[] = { sizeof(__considerArr0)/sizeof(__considerArr0[0])-1, sizeof(__considerArr1)/sizeof(__considerArr1[0])-1, 0 };
static const __lc_ModuleIdType* __considerArray[] = {
__considerArr0, __considerArr1, 0 };

static const __lc_ModuleIdType* __ignoreArray[] = {
__ignoreArr0, __ignoreArr1, 0 };

int NumOfConsidered(int iConsiderGroup) { return __considerCount[iConsiderGroup]; }

int NumOfIgnored(int iConsiderGroup) { return __ignoreCount[iConsiderGroup]; }

__lc_ModuleIdType GetConsidered(int iModule, int iConsiderGroup)
{ return __considerArray[iConsiderGroup][iModule]; }

__lc_ModuleIdType GetIgnored(int iModule, int iConsiderGroup)
{ return __ignoreArray[iConsiderGroup][iModule]; }

int NumOfVerify() { return 0; }
__lc_ModuleIdType GetVerify(int) { return -1; }
int DecompositionMaxDepth() { return 1; }
int InterpretationMaxDepth() { return 1; }
int RingLsystem() { return 0; }
int NumOfTables() { return 8; }
__lc_GroupType aGroupType[8] =
{
__lc_gtLsystem,__lc_gtLsystem,__lc_gtLsystem,__lc_gtLsystem,__lc_gtLsystem,__lc_gtLsystem,__lc_gtLsystem,__lc_gtLsystem
};
__lc_GroupType GetDerivationType(int id)
{ return aGroupType[id]; }
bool GetModuleSB()
{
const __SB_ParamsStruct_* pParams = reinterpret_cast<const __SB_ParamsStruct_*>(GetModuleAddr(SB_id));
if (0 == pParams)
{ return false; }
return true;
}

bool GetModuleEB()
{
const __EB_ParamsStruct_* pParams = reinterpret_cast<const __EB_ParamsStruct_*>(GetModuleAddr(EB_id));
if (0 == pParams)
{ return false; }
return true;
}

bool GetModuleF(float& param0)
{
const __F_ParamsStruct_* pParams = reinterpret_cast<const __F_ParamsStruct_*>(GetModuleAddr(F_id));
if (0 == pParams)
{ return false; }
__F_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__F_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModulef(float& param0)
{
const __f_ParamsStruct_* pParams = reinterpret_cast<const __f_ParamsStruct_*>(GetModuleAddr(f_id));
if (0 == pParams)
{ return false; }
__f_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__f_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleLeft(float& param0)
{
const __Left_ParamsStruct_* pParams = reinterpret_cast<const __Left_ParamsStruct_*>(GetModuleAddr(Left_id));
if (0 == pParams)
{ return false; }
__Left_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Left_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleRight(float& param0)
{
const __Right_ParamsStruct_* pParams = reinterpret_cast<const __Right_ParamsStruct_*>(GetModuleAddr(Right_id));
if (0 == pParams)
{ return false; }
__Right_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Right_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleDown(float& param0)
{
const __Down_ParamsStruct_* pParams = reinterpret_cast<const __Down_ParamsStruct_*>(GetModuleAddr(Down_id));
if (0 == pParams)
{ return false; }
__Down_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Down_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleUp(float& param0)
{
const __Up_ParamsStruct_* pParams = reinterpret_cast<const __Up_ParamsStruct_*>(GetModuleAddr(Up_id));
if (0 == pParams)
{ return false; }
__Up_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Up_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleRollL(float& param0)
{
const __RollL_ParamsStruct_* pParams = reinterpret_cast<const __RollL_ParamsStruct_*>(GetModuleAddr(RollL_id));
if (0 == pParams)
{ return false; }
__RollL_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__RollL_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleRollR(float& param0)
{
const __RollR_ParamsStruct_* pParams = reinterpret_cast<const __RollR_ParamsStruct_*>(GetModuleAddr(RollR_id));
if (0 == pParams)
{ return false; }
__RollR_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__RollR_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleIncColor()
{
const __IncColor_ParamsStruct_* pParams = reinterpret_cast<const __IncColor_ParamsStruct_*>(GetModuleAddr(IncColor_id));
if (0 == pParams)
{ return false; }
return true;
}

bool GetModuleDecColor()
{
const __DecColor_ParamsStruct_* pParams = reinterpret_cast<const __DecColor_ParamsStruct_*>(GetModuleAddr(DecColor_id));
if (0 == pParams)
{ return false; }
return true;
}

bool GetModuleSetColor(int& param0)
{
const __SetColor_ParamsStruct_* pParams = reinterpret_cast<const __SetColor_ParamsStruct_*>(GetModuleAddr(SetColor_id));
if (0 == pParams)
{ return false; }
__SetColor_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__SetColor_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleSetWidth(float& param0)
{
const __SetWidth_ParamsStruct_* pParams = reinterpret_cast<const __SetWidth_ParamsStruct_*>(GetModuleAddr(SetWidth_id));
if (0 == pParams)
{ return false; }
__SetWidth_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__SetWidth_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleLabel(__lc_Text& param0)
{
const __Label_ParamsStruct_* pParams = reinterpret_cast<const __Label_ParamsStruct_*>(GetModuleAddr(Label_id));
if (0 == pParams)
{ return false; }
__Label_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Label_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleTurnAround()
{
const __TurnAround_ParamsStruct_* pParams = reinterpret_cast<const __TurnAround_ParamsStruct_*>(GetModuleAddr(TurnAround_id));
if (0 == pParams)
{ return false; }
return true;
}

bool GetModuleCut()
{
const __Cut_ParamsStruct_* pParams = reinterpret_cast<const __Cut_ParamsStruct_*>(GetModuleAddr(Cut_id));
if (0 == pParams)
{ return false; }
return true;
}

bool GetModuleGetPos(float& param0, float& param1, float& param2)
{
const __GetPos_ParamsStruct_* pParams = reinterpret_cast<const __GetPos_ParamsStruct_*>(GetModuleAddr(GetPos_id));
if (0 == pParams)
{ return false; }
__GetPos_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__GetPos_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
param2 = lcParams.data.Param2;
return true;
}

bool GetModuleGetHead(float& param0, float& param1, float& param2)
{
const __GetHead_ParamsStruct_* pParams = reinterpret_cast<const __GetHead_ParamsStruct_*>(GetModuleAddr(GetHead_id));
if (0 == pParams)
{ return false; }
__GetHead_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__GetHead_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
param2 = lcParams.data.Param2;
return true;
}

bool GetModuleGetLeft(float& param0, float& param1, float& param2)
{
const __GetLeft_ParamsStruct_* pParams = reinterpret_cast<const __GetLeft_ParamsStruct_*>(GetModuleAddr(GetLeft_id));
if (0 == pParams)
{ return false; }
__GetLeft_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__GetLeft_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
param2 = lcParams.data.Param2;
return true;
}

bool GetModuleGetUp(float& param0, float& param1, float& param2)
{
const __GetUp_ParamsStruct_* pParams = reinterpret_cast<const __GetUp_ParamsStruct_*>(GetModuleAddr(GetUp_id));
if (0 == pParams)
{ return false; }
__GetUp_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__GetUp_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
param2 = lcParams.data.Param2;
return true;
}

bool GetModuleCircle(float& param0)
{
const __Circle_ParamsStruct_* pParams = reinterpret_cast<const __Circle_ParamsStruct_*>(GetModuleAddr(Circle_id));
if (0 == pParams)
{ return false; }
__Circle_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Circle_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleMoveTo(float& param0, float& param1, float& param2)
{
const __MoveTo_ParamsStruct_* pParams = reinterpret_cast<const __MoveTo_ParamsStruct_*>(GetModuleAddr(MoveTo_id));
if (0 == pParams)
{ return false; }
__MoveTo_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__MoveTo_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
param2 = lcParams.data.Param2;
return true;
}

bool GetModuleSphere(float& param0)
{
const __Sphere_ParamsStruct_* pParams = reinterpret_cast<const __Sphere_ParamsStruct_*>(GetModuleAddr(Sphere_id));
if (0 == pParams)
{ return false; }
__Sphere_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Sphere_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleSetHead(float& param0, float& param1, float& param2, float& param3, float& param4, float& param5)
{
const __SetHead_ParamsStruct_* pParams = reinterpret_cast<const __SetHead_ParamsStruct_*>(GetModuleAddr(SetHead_id));
if (0 == pParams)
{ return false; }
__SetHead_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__SetHead_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
param2 = lcParams.data.Param2;
param3 = lcParams.data.Param3;
param4 = lcParams.data.Param4;
param5 = lcParams.data.Param5;
return true;
}

bool GetModuleSphere0()
{
const __Sphere0_ParamsStruct_* pParams = reinterpret_cast<const __Sphere0_ParamsStruct_*>(GetModuleAddr(Sphere0_id));
if (0 == pParams)
{ return false; }
return true;
}

bool GetModuleCircle0()
{
const __Circle0_ParamsStruct_* pParams = reinterpret_cast<const __Circle0_ParamsStruct_*>(GetModuleAddr(Circle0_id));
if (0 == pParams)
{ return false; }
return true;
}

bool GetModuleLine2f(V2tf& param0, V2tf& param1)
{
const __Line2f_ParamsStruct_* pParams = reinterpret_cast<const __Line2f_ParamsStruct_*>(GetModuleAddr(Line2f_id));
if (0 == pParams)
{ return false; }
__Line2f_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Line2f_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
return true;
}

bool GetModuleLine2d(V2td& param0, V2td& param1)
{
const __Line2d_ParamsStruct_* pParams = reinterpret_cast<const __Line2d_ParamsStruct_*>(GetModuleAddr(Line2d_id));
if (0 == pParams)
{ return false; }
__Line2d_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Line2d_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
return true;
}

bool GetModuleLine3f(V3tf& param0, V3tf& param1)
{
const __Line3f_ParamsStruct_* pParams = reinterpret_cast<const __Line3f_ParamsStruct_*>(GetModuleAddr(Line3f_id));
if (0 == pParams)
{ return false; }
__Line3f_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Line3f_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
return true;
}

bool GetModuleLine3d(V3td& param0, V3td& param1)
{
const __Line3d_ParamsStruct_* pParams = reinterpret_cast<const __Line3d_ParamsStruct_*>(GetModuleAddr(Line3d_id));
if (0 == pParams)
{ return false; }
__Line3d_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Line3d_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
return true;
}

bool GetModuleLineTo2f(V2tf& param0)
{
const __LineTo2f_ParamsStruct_* pParams = reinterpret_cast<const __LineTo2f_ParamsStruct_*>(GetModuleAddr(LineTo2f_id));
if (0 == pParams)
{ return false; }
__LineTo2f_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__LineTo2f_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleLineTo2d(V2td& param0)
{
const __LineTo2d_ParamsStruct_* pParams = reinterpret_cast<const __LineTo2d_ParamsStruct_*>(GetModuleAddr(LineTo2d_id));
if (0 == pParams)
{ return false; }
__LineTo2d_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__LineTo2d_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleLineTo3f(V3tf& param0)
{
const __LineTo3f_ParamsStruct_* pParams = reinterpret_cast<const __LineTo3f_ParamsStruct_*>(GetModuleAddr(LineTo3f_id));
if (0 == pParams)
{ return false; }
__LineTo3f_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__LineTo3f_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleLineTo3d(V3td& param0)
{
const __LineTo3d_ParamsStruct_* pParams = reinterpret_cast<const __LineTo3d_ParamsStruct_*>(GetModuleAddr(LineTo3d_id));
if (0 == pParams)
{ return false; }
__LineTo3d_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__LineTo3d_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleLineRel2f(V2tf& param0)
{
const __LineRel2f_ParamsStruct_* pParams = reinterpret_cast<const __LineRel2f_ParamsStruct_*>(GetModuleAddr(LineRel2f_id));
if (0 == pParams)
{ return false; }
__LineRel2f_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__LineRel2f_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleLineRel2d(V2td& param0)
{
const __LineRel2d_ParamsStruct_* pParams = reinterpret_cast<const __LineRel2d_ParamsStruct_*>(GetModuleAddr(LineRel2d_id));
if (0 == pParams)
{ return false; }
__LineRel2d_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__LineRel2d_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleLineRel3f(V3tf& param0)
{
const __LineRel3f_ParamsStruct_* pParams = reinterpret_cast<const __LineRel3f_ParamsStruct_*>(GetModuleAddr(LineRel3f_id));
if (0 == pParams)
{ return false; }
__LineRel3f_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__LineRel3f_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleLineRel3d(V3td& param0)
{
const __LineRel3d_ParamsStruct_* pParams = reinterpret_cast<const __LineRel3d_ParamsStruct_*>(GetModuleAddr(LineRel3d_id));
if (0 == pParams)
{ return false; }
__LineRel3d_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__LineRel3d_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleSurface(int& param0, float& param1)
{
const __Surface_ParamsStruct_* pParams = reinterpret_cast<const __Surface_ParamsStruct_*>(GetModuleAddr(Surface_id));
if (0 == pParams)
{ return false; }
__Surface_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Surface_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
return true;
}

bool GetModuleRollToVert()
{
const __RollToVert_ParamsStruct_* pParams = reinterpret_cast<const __RollToVert_ParamsStruct_*>(GetModuleAddr(RollToVert_id));
if (0 == pParams)
{ return false; }
return true;
}

bool GetModuleSetElasticity(int& param0, float& param1)
{
const __SetElasticity_ParamsStruct_* pParams = reinterpret_cast<const __SetElasticity_ParamsStruct_*>(GetModuleAddr(SetElasticity_id));
if (0 == pParams)
{ return false; }
__SetElasticity_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__SetElasticity_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
return true;
}

bool GetModuleIncElasticity(int& param0)
{
const __IncElasticity_ParamsStruct_* pParams = reinterpret_cast<const __IncElasticity_ParamsStruct_*>(GetModuleAddr(IncElasticity_id));
if (0 == pParams)
{ return false; }
__IncElasticity_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__IncElasticity_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleDecElasticity(int& param0)
{
const __DecElasticity_ParamsStruct_* pParams = reinterpret_cast<const __DecElasticity_ParamsStruct_*>(GetModuleAddr(DecElasticity_id));
if (0 == pParams)
{ return false; }
__DecElasticity_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__DecElasticity_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleCurrentContour(int& param0)
{
const __CurrentContour_ParamsStruct_* pParams = reinterpret_cast<const __CurrentContour_ParamsStruct_*>(GetModuleAddr(CurrentContour_id));
if (0 == pParams)
{ return false; }
__CurrentContour_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__CurrentContour_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleStartGC()
{
const __StartGC_ParamsStruct_* pParams = reinterpret_cast<const __StartGC_ParamsStruct_*>(GetModuleAddr(StartGC_id));
if (0 == pParams)
{ return false; }
return true;
}

bool GetModulePointGC()
{
const __PointGC_ParamsStruct_* pParams = reinterpret_cast<const __PointGC_ParamsStruct_*>(GetModuleAddr(PointGC_id));
if (0 == pParams)
{ return false; }
return true;
}

bool GetModuleEndGC()
{
const __EndGC_ParamsStruct_* pParams = reinterpret_cast<const __EndGC_ParamsStruct_*>(GetModuleAddr(EndGC_id));
if (0 == pParams)
{ return false; }
return true;
}

bool GetModuleMeshPoint()
{
const __MeshPoint_ParamsStruct_* pParams = reinterpret_cast<const __MeshPoint_ParamsStruct_*>(GetModuleAddr(MeshPoint_id));
if (0 == pParams)
{ return false; }
return true;
}

bool GetModuleE1(float& param0)
{
const __E1_ParamsStruct_* pParams = reinterpret_cast<const __E1_ParamsStruct_*>(GetModuleAddr(E1_id));
if (0 == pParams)
{ return false; }
__E1_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__E1_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleMoveTo2f(V2tf& param0)
{
const __MoveTo2f_ParamsStruct_* pParams = reinterpret_cast<const __MoveTo2f_ParamsStruct_*>(GetModuleAddr(MoveTo2f_id));
if (0 == pParams)
{ return false; }
__MoveTo2f_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__MoveTo2f_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleMoveTo2d(V2td& param0)
{
const __MoveTo2d_ParamsStruct_* pParams = reinterpret_cast<const __MoveTo2d_ParamsStruct_*>(GetModuleAddr(MoveTo2d_id));
if (0 == pParams)
{ return false; }
__MoveTo2d_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__MoveTo2d_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleMoveTo3f(V3tf& param0)
{
const __MoveTo3f_ParamsStruct_* pParams = reinterpret_cast<const __MoveTo3f_ParamsStruct_*>(GetModuleAddr(MoveTo3f_id));
if (0 == pParams)
{ return false; }
__MoveTo3f_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__MoveTo3f_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleMoveTo3d(V3td& param0)
{
const __MoveTo3d_ParamsStruct_* pParams = reinterpret_cast<const __MoveTo3d_ParamsStruct_*>(GetModuleAddr(MoveTo3d_id));
if (0 == pParams)
{ return false; }
__MoveTo3d_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__MoveTo3d_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleE2(float& param0, float& param1)
{
const __E2_ParamsStruct_* pParams = reinterpret_cast<const __E2_ParamsStruct_*>(GetModuleAddr(E2_id));
if (0 == pParams)
{ return false; }
__E2_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__E2_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
return true;
}

bool GetModuleSP()
{
const __SP_ParamsStruct_* pParams = reinterpret_cast<const __SP_ParamsStruct_*>(GetModuleAddr(SP_id));
if (0 == pParams)
{ return false; }
return true;
}

bool GetModuleEP()
{
const __EP_ParamsStruct_* pParams = reinterpret_cast<const __EP_ParamsStruct_*>(GetModuleAddr(EP_id));
if (0 == pParams)
{ return false; }
return true;
}

bool GetModulePP()
{
const __PP_ParamsStruct_* pParams = reinterpret_cast<const __PP_ParamsStruct_*>(GetModuleAddr(PP_id));
if (0 == pParams)
{ return false; }
return true;
}

bool GetModuleRhombus(float& param0, float& param1)
{
const __Rhombus_ParamsStruct_* pParams = reinterpret_cast<const __Rhombus_ParamsStruct_*>(GetModuleAddr(Rhombus_id));
if (0 == pParams)
{ return false; }
__Rhombus_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Rhombus_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
return true;
}

bool GetModuleTriangle(float& param0, float& param1)
{
const __Triangle_ParamsStruct_* pParams = reinterpret_cast<const __Triangle_ParamsStruct_*>(GetModuleAddr(Triangle_id));
if (0 == pParams)
{ return false; }
__Triangle_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Triangle_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
return true;
}

bool GetModuleMouseIns()
{
const __MouseIns_ParamsStruct_* pParams = reinterpret_cast<const __MouseIns_ParamsStruct_*>(GetModuleAddr(MouseIns_id));
if (0 == pParams)
{ return false; }
return true;
}

bool GetModuleBlendedContour(int& param0, int& param1, float& param2)
{
const __BlendedContour_ParamsStruct_* pParams = reinterpret_cast<const __BlendedContour_ParamsStruct_*>(GetModuleAddr(BlendedContour_id));
if (0 == pParams)
{ return false; }
__BlendedContour_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__BlendedContour_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
param2 = lcParams.data.Param2;
return true;
}

bool GetModuleCurrentTexture(int& param0)
{
const __CurrentTexture_ParamsStruct_* pParams = reinterpret_cast<const __CurrentTexture_ParamsStruct_*>(GetModuleAddr(CurrentTexture_id));
if (0 == pParams)
{ return false; }
__CurrentTexture_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__CurrentTexture_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleTextureVCoeff(float& param0)
{
const __TextureVCoeff_ParamsStruct_* pParams = reinterpret_cast<const __TextureVCoeff_ParamsStruct_*>(GetModuleAddr(TextureVCoeff_id));
if (0 == pParams)
{ return false; }
__TextureVCoeff_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__TextureVCoeff_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleOrient()
{
const __Orient_ParamsStruct_* pParams = reinterpret_cast<const __Orient_ParamsStruct_*>(GetModuleAddr(Orient_id));
if (0 == pParams)
{ return false; }
return true;
}

bool GetModuleScaleContour(float& param0, float& param1)
{
const __ScaleContour_ParamsStruct_* pParams = reinterpret_cast<const __ScaleContour_ParamsStruct_*>(GetModuleAddr(ScaleContour_id));
if (0 == pParams)
{ return false; }
__ScaleContour_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__ScaleContour_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
return true;
}

bool GetModuleElasticity(float& param0)
{
const __Elasticity_ParamsStruct_* pParams = reinterpret_cast<const __Elasticity_ParamsStruct_*>(GetModuleAddr(Elasticity_id));
if (0 == pParams)
{ return false; }
__Elasticity_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Elasticity_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleDSurface(SurfaceObj& param0)
{
const __DSurface_ParamsStruct_* pParams = reinterpret_cast<const __DSurface_ParamsStruct_*>(GetModuleAddr(DSurface_id));
if (0 == pParams)
{ return false; }
__DSurface_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__DSurface_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleG(float& param0)
{
const __G_ParamsStruct_* pParams = reinterpret_cast<const __G_ParamsStruct_*>(GetModuleAddr(G_id));
if (0 == pParams)
{ return false; }
__G_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__G_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleg(float& param0)
{
const __g_ParamsStruct_* pParams = reinterpret_cast<const __g_ParamsStruct_*>(GetModuleAddr(g_id));
if (0 == pParams)
{ return false; }
__g_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__g_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleMouseInsPos(MouseStatus& param0)
{
const __MouseInsPos_ParamsStruct_* pParams = reinterpret_cast<const __MouseInsPos_ParamsStruct_*>(GetModuleAddr(MouseInsPos_id));
if (0 == pParams)
{ return false; }
__MouseInsPos_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__MouseInsPos_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleSurface3(int& param0, float& param1, float& param2, float& param3)
{
const __Surface3_ParamsStruct_* pParams = reinterpret_cast<const __Surface3_ParamsStruct_*>(GetModuleAddr(Surface3_id));
if (0 == pParams)
{ return false; }
__Surface3_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Surface3_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
param2 = lcParams.data.Param2;
param3 = lcParams.data.Param3;
return true;
}

bool GetModuleContourSides(int& param0)
{
const __ContourSides_ParamsStruct_* pParams = reinterpret_cast<const __ContourSides_ParamsStruct_*>(GetModuleAddr(ContourSides_id));
if (0 == pParams)
{ return false; }
__ContourSides_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__ContourSides_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleInitSurface(int& param0)
{
const __InitSurface_ParamsStruct_* pParams = reinterpret_cast<const __InitSurface_ParamsStruct_*>(GetModuleAddr(InitSurface_id));
if (0 == pParams)
{ return false; }
__InitSurface_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__InitSurface_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleSurfacePoint(int& param0, int& param1, int& param2)
{
const __SurfacePoint_ParamsStruct_* pParams = reinterpret_cast<const __SurfacePoint_ParamsStruct_*>(GetModuleAddr(SurfacePoint_id));
if (0 == pParams)
{ return false; }
__SurfacePoint_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__SurfacePoint_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
param2 = lcParams.data.Param2;
return true;
}

bool GetModuleDrawSurface(int& param0)
{
const __DrawSurface_ParamsStruct_* pParams = reinterpret_cast<const __DrawSurface_ParamsStruct_*>(GetModuleAddr(DrawSurface_id));
if (0 == pParams)
{ return false; }
__DrawSurface_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__DrawSurface_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModulePropensity(float& param0)
{
const __Propensity_ParamsStruct_* pParams = reinterpret_cast<const __Propensity_ParamsStruct_*>(GetModuleAddr(Propensity_id));
if (0 == pParams)
{ return false; }
__Propensity_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Propensity_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleCircleFront(float& param0)
{
const __CircleFront_ParamsStruct_* pParams = reinterpret_cast<const __CircleFront_ParamsStruct_*>(GetModuleAddr(CircleFront_id));
if (0 == pParams)
{ return false; }
__CircleFront_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__CircleFront_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleCircleFront0()
{
const __CircleFront0_ParamsStruct_* pParams = reinterpret_cast<const __CircleFront0_ParamsStruct_*>(GetModuleAddr(CircleFront0_id));
if (0 == pParams)
{ return false; }
return true;
}

bool GetModuleSetUPrecision(int& param0)
{
const __SetUPrecision_ParamsStruct_* pParams = reinterpret_cast<const __SetUPrecision_ParamsStruct_*>(GetModuleAddr(SetUPrecision_id));
if (0 == pParams)
{ return false; }
__SetUPrecision_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__SetUPrecision_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleSetVPrecision(int& param0)
{
const __SetVPrecision_ParamsStruct_* pParams = reinterpret_cast<const __SetVPrecision_ParamsStruct_*>(GetModuleAddr(SetVPrecision_id));
if (0 == pParams)
{ return false; }
__SetVPrecision_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__SetVPrecision_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleLineTo(float& param0, float& param1, float& param2)
{
const __LineTo_ParamsStruct_* pParams = reinterpret_cast<const __LineTo_ParamsStruct_*>(GetModuleAddr(LineTo_id));
if (0 == pParams)
{ return false; }
__LineTo_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__LineTo_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
param2 = lcParams.data.Param2;
return true;
}

bool GetModuleBSurface(int& param0, float& param1)
{
const __BSurface_ParamsStruct_* pParams = reinterpret_cast<const __BSurface_ParamsStruct_*>(GetModuleAddr(BSurface_id));
if (0 == pParams)
{ return false; }
__BSurface_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__BSurface_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
return true;
}

bool GetModuleMoveRel2f(V2tf& param0)
{
const __MoveRel2f_ParamsStruct_* pParams = reinterpret_cast<const __MoveRel2f_ParamsStruct_*>(GetModuleAddr(MoveRel2f_id));
if (0 == pParams)
{ return false; }
__MoveRel2f_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__MoveRel2f_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleMoveRel2d(V2td& param0)
{
const __MoveRel2d_ParamsStruct_* pParams = reinterpret_cast<const __MoveRel2d_ParamsStruct_*>(GetModuleAddr(MoveRel2d_id));
if (0 == pParams)
{ return false; }
__MoveRel2d_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__MoveRel2d_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleMoveRel3f(V3tf& param0)
{
const __MoveRel3f_ParamsStruct_* pParams = reinterpret_cast<const __MoveRel3f_ParamsStruct_*>(GetModuleAddr(MoveRel3f_id));
if (0 == pParams)
{ return false; }
__MoveRel3f_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__MoveRel3f_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleMoveRel3d(V3td& param0)
{
const __MoveRel3d_ParamsStruct_* pParams = reinterpret_cast<const __MoveRel3d_ParamsStruct_*>(GetModuleAddr(MoveRel3d_id));
if (0 == pParams)
{ return false; }
__MoveRel3d_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__MoveRel3d_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleDBSurfaceS(BsurfaceObjS& param0)
{
const __DBSurfaceS_ParamsStruct_* pParams = reinterpret_cast<const __DBSurfaceS_ParamsStruct_*>(GetModuleAddr(DBSurfaceS_id));
if (0 == pParams)
{ return false; }
__DBSurfaceS_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__DBSurfaceS_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleDBSurfaceM(BsurfaceObjM& param0)
{
const __DBSurfaceM_ParamsStruct_* pParams = reinterpret_cast<const __DBSurfaceM_ParamsStruct_*>(GetModuleAddr(DBSurfaceM_id));
if (0 == pParams)
{ return false; }
__DBSurfaceM_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__DBSurfaceM_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleCamera()
{
const __Camera_ParamsStruct_* pParams = reinterpret_cast<const __Camera_ParamsStruct_*>(GetModuleAddr(Camera_id));
if (0 == pParams)
{ return false; }
return true;
}

bool GetModuleEA20(EA20Array& param0)
{
const __EA20_ParamsStruct_* pParams = reinterpret_cast<const __EA20_ParamsStruct_*>(GetModuleAddr(EA20_id));
if (0 == pParams)
{ return false; }
__EA20_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__EA20_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleRotate(V3tf& param0, float& param1)
{
const __Rotate_ParamsStruct_* pParams = reinterpret_cast<const __Rotate_ParamsStruct_*>(GetModuleAddr(Rotate_id));
if (0 == pParams)
{ return false; }
__Rotate_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Rotate_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
return true;
}

bool GetModuleRotateHLU(V3tf& param0, float& param1)
{
const __RotateHLU_ParamsStruct_* pParams = reinterpret_cast<const __RotateHLU_ParamsStruct_*>(GetModuleAddr(RotateHLU_id));
if (0 == pParams)
{ return false; }
__RotateHLU_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__RotateHLU_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
return true;
}

bool GetModuleRotateXYZ(V3tf& param0, float& param1)
{
const __RotateXYZ_ParamsStruct_* pParams = reinterpret_cast<const __RotateXYZ_ParamsStruct_*>(GetModuleAddr(RotateXYZ_id));
if (0 == pParams)
{ return false; }
__RotateXYZ_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__RotateXYZ_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
return true;
}

bool GetModuleTerrain(CameraPosition& param0)
{
const __Terrain_ParamsStruct_* pParams = reinterpret_cast<const __Terrain_ParamsStruct_*>(GetModuleAddr(Terrain_id));
if (0 == pParams)
{ return false; }
__Terrain_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Terrain_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModulePovRayStart(__lc_Text& param0, POVRayMeshMode& param1)
{
const __PovRayStart_ParamsStruct_* pParams = reinterpret_cast<const __PovRayStart_ParamsStruct_*>(GetModuleAddr(PovRayStart_id));
if (0 == pParams)
{ return false; }
__PovRayStart_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__PovRayStart_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
return true;
}

bool GetModuleSetHead3f(V3tf& param0)
{
const __SetHead3f_ParamsStruct_* pParams = reinterpret_cast<const __SetHead3f_ParamsStruct_*>(GetModuleAddr(SetHead3f_id));
if (0 == pParams)
{ return false; }
__SetHead3f_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__SetHead3f_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleSetTropismDirection3f(V3tf& param0)
{
const __SetTropismDirection3f_ParamsStruct_* pParams = reinterpret_cast<const __SetTropismDirection3f_ParamsStruct_*>(GetModuleAddr(SetTropismDirection3f_id));
if (0 == pParams)
{ return false; }
__SetTropismDirection3f_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__SetTropismDirection3f_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleOrchard(int& param0, int& param1)
{
const __Orchard_ParamsStruct_* pParams = reinterpret_cast<const __Orchard_ParamsStruct_*>(GetModuleAddr(Orchard_id));
if (0 == pParams)
{ return false; }
__Orchard_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Orchard_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
return true;
}

bool GetModuleTreeReader(V3f& param0, int& param1, int& param2, int& param3)
{
const __TreeReader_ParamsStruct_* pParams = reinterpret_cast<const __TreeReader_ParamsStruct_*>(GetModuleAddr(TreeReader_id));
if (0 == pParams)
{ return false; }
__TreeReader_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__TreeReader_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
param2 = lcParams.data.Param2;
param3 = lcParams.data.Param3;
return true;
}

bool GetModuleRoots(V3f& param0, int& param1, int& param2, int& param3)
{
const __Roots_ParamsStruct_* pParams = reinterpret_cast<const __Roots_ParamsStruct_*>(GetModuleAddr(Roots_id));
if (0 == pParams)
{ return false; }
__Roots_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Roots_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
param2 = lcParams.data.Param2;
param3 = lcParams.data.Param3;
return true;
}

bool GetModuleInternode(InternodeData& param0)
{
const __Internode_ParamsStruct_* pParams = reinterpret_cast<const __Internode_ParamsStruct_*>(GetModuleAddr(Internode_id));
if (0 == pParams)
{ return false; }
__Internode_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Internode_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleBud(BudData& param0)
{
const __Bud_ParamsStruct_* pParams = reinterpret_cast<const __Bud_ParamsStruct_*>(GetModuleAddr(Bud_id));
if (0 == pParams)
{ return false; }
__Bud_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Bud_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModulePruneCap(float& param0)
{
const __PruneCap_ParamsStruct_* pParams = reinterpret_cast<const __PruneCap_ParamsStruct_*>(GetModuleAddr(PruneCap_id));
if (0 == pParams)
{ return false; }
__PruneCap_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__PruneCap_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleLeaf(LeafData& param0)
{
const __Leaf_ParamsStruct_* pParams = reinterpret_cast<const __Leaf_ParamsStruct_*>(GetModuleAddr(Leaf_id));
if (0 == pParams)
{ return false; }
__Leaf_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Leaf_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

bool GetModuleParab(V3f& param0, float& param1, float& param2)
{
const __Parab_ParamsStruct_* pParams = reinterpret_cast<const __Parab_ParamsStruct_*>(GetModuleAddr(Parab_id));
if (0 == pParams)
{ return false; }
__Parab_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Parab_ParamsStruct_));param0 = lcParams.data.Param0;
param1 = lcParams.data.Param1;
param2 = lcParams.data.Param2;
return true;
}

bool GetModuleBox(bool& param0)
{
const __Box_ParamsStruct_* pParams = reinterpret_cast<const __Box_ParamsStruct_*>(GetModuleAddr(Box_id));
if (0 == pParams)
{ return false; }
__Box_ParamsStruct_ lcParams; memcpy(&lcParams, pParams, sizeof(__Box_ParamsStruct_));param0 = lcParams.data.Param0;
return true;
}

static int PProductionModuleCount[] =
{
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 1, 2, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 1, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 
};

int NumOfModulePProductions(int iGroup, __lc_ModuleIdType moduleId)
{ return PProductionModuleCount[iGroup * NumOfModules() + moduleId]; }
static int ModulePProductions[] = 
{


// Group 0
-1, // SB starts at 0
-1, // EB starts at 1
-1, // F starts at 2
-1, // f starts at 3
-1, // Left starts at 4
-1, // Right starts at 5
-1, // Down starts at 6
-1, // Up starts at 7
-1, // RollL starts at 8
-1, // RollR starts at 9
-1, // IncColor starts at 10
-1, // DecColor starts at 11
-1, // SetColor starts at 12
-1, // SetWidth starts at 13
-1, // Label starts at 14
-1, // TurnAround starts at 15
-1, // Cut starts at 16
-1, // GetPos starts at 17
-1, // GetHead starts at 18
-1, // GetLeft starts at 19
-1, // GetUp starts at 20
-1, // Circle starts at 21
-1, // MoveTo starts at 22
-1, // Sphere starts at 23
-1, // SetHead starts at 24
-1, // Sphere0 starts at 25
-1, // Circle0 starts at 26
-1, // Line2f starts at 27
-1, // Line2d starts at 28
-1, // Line3f starts at 29
-1, // Line3d starts at 30
-1, // LineTo2f starts at 31
-1, // LineTo2d starts at 32
-1, // LineTo3f starts at 33
-1, // LineTo3d starts at 34
-1, // LineRel2f starts at 35
-1, // LineRel2d starts at 36
-1, // LineRel3f starts at 37
-1, // LineRel3d starts at 38
-1, // Surface starts at 39
-1, // RollToVert starts at 40
-1, // SetElasticity starts at 41
-1, // IncElasticity starts at 42
-1, // DecElasticity starts at 43
-1, // CurrentContour starts at 44
-1, // StartGC starts at 45
-1, // PointGC starts at 46
-1, // EndGC starts at 47
-1, // MeshPoint starts at 48
-1, // E1 starts at 49
-1, // MoveTo2f starts at 50
-1, // MoveTo2d starts at 51
-1, // MoveTo3f starts at 52
-1, // MoveTo3d starts at 53
-1, // E2 starts at 54
-1, // SP starts at 55
-1, // EP starts at 56
-1, // PP starts at 57
-1, // Rhombus starts at 58
-1, // Triangle starts at 59
-1, // MouseIns starts at 60
-1, // BlendedContour starts at 61
-1, // CurrentTexture starts at 62
-1, // TextureVCoeff starts at 63
-1, // Orient starts at 64
-1, // ScaleContour starts at 65
-1, // Elasticity starts at 66
-1, // DSurface starts at 67
-1, // G starts at 68
-1, // g starts at 69
4, // MouseInsPos starts at 70
-1, // Surface3 starts at 71
-1, // ContourSides starts at 72
-1, // InitSurface starts at 73
-1, // SurfacePoint starts at 74
-1, // DrawSurface starts at 75
-1, // Propensity starts at 76
-1, // CircleFront starts at 77
-1, // CircleFront0 starts at 78
-1, // SetUPrecision starts at 79
-1, // SetVPrecision starts at 80
-1, // LineTo starts at 81
-1, // BSurface starts at 82
-1, // MoveRel2f starts at 83
-1, // MoveRel2d starts at 84
-1, // MoveRel3f starts at 85
-1, // MoveRel3d starts at 86
-1, // DBSurfaceS starts at 87
-1, // DBSurfaceM starts at 88
-1, // Camera starts at 89
-1, // EA20 starts at 90
-1, // Rotate starts at 91
-1, // RotateHLU starts at 92
-1, // RotateXYZ starts at 93
-1, // Terrain starts at 94
-1, // PovRayStart starts at 95
-1, // SetHead3f starts at 96
-1, // SetTropismDirection3f starts at 97
0, // Orchard starts at 98
1, // TreeReader starts at 99
-1, // Roots starts at 100
3, // Internode starts at 101
-1, // Bud starts at 102
-1, // PruneCap starts at 103
-1, // Leaf starts at 104
2, // Parab starts at 105
-1, // Box starts at 106


// Group 1
-1, // SB starts at 107
-1, // EB starts at 108
-1, // F starts at 109
-1, // f starts at 110
-1, // Left starts at 111
-1, // Right starts at 112
-1, // Down starts at 113
-1, // Up starts at 114
-1, // RollL starts at 115
-1, // RollR starts at 116
-1, // IncColor starts at 117
-1, // DecColor starts at 118
-1, // SetColor starts at 119
-1, // SetWidth starts at 120
-1, // Label starts at 121
-1, // TurnAround starts at 122
-1, // Cut starts at 123
-1, // GetPos starts at 124
-1, // GetHead starts at 125
-1, // GetLeft starts at 126
-1, // GetUp starts at 127
-1, // Circle starts at 128
-1, // MoveTo starts at 129
-1, // Sphere starts at 130
-1, // SetHead starts at 131
-1, // Sphere0 starts at 132
-1, // Circle0 starts at 133
-1, // Line2f starts at 134
-1, // Line2d starts at 135
-1, // Line3f starts at 136
-1, // Line3d starts at 137
-1, // LineTo2f starts at 138
-1, // LineTo2d starts at 139
-1, // LineTo3f starts at 140
-1, // LineTo3d starts at 141
-1, // LineRel2f starts at 142
-1, // LineRel2d starts at 143
-1, // LineRel3f starts at 144
-1, // LineRel3d starts at 145
-1, // Surface starts at 146
-1, // RollToVert starts at 147
-1, // SetElasticity starts at 148
-1, // IncElasticity starts at 149
-1, // DecElasticity starts at 150
-1, // CurrentContour starts at 151
-1, // StartGC starts at 152
-1, // PointGC starts at 153
-1, // EndGC starts at 154
-1, // MeshPoint starts at 155
-1, // E1 starts at 156
-1, // MoveTo2f starts at 157
-1, // MoveTo2d starts at 158
-1, // MoveTo3f starts at 159
-1, // MoveTo3d starts at 160
-1, // E2 starts at 161
-1, // SP starts at 162
-1, // EP starts at 163
-1, // PP starts at 164
-1, // Rhombus starts at 165
-1, // Triangle starts at 166
-1, // MouseIns starts at 167
-1, // BlendedContour starts at 168
-1, // CurrentTexture starts at 169
-1, // TextureVCoeff starts at 170
-1, // Orient starts at 171
-1, // ScaleContour starts at 172
-1, // Elasticity starts at 173
-1, // DSurface starts at 174
-1, // G starts at 175
-1, // g starts at 176
-1, // MouseInsPos starts at 177
-1, // Surface3 starts at 178
-1, // ContourSides starts at 179
-1, // InitSurface starts at 180
-1, // SurfacePoint starts at 181
-1, // DrawSurface starts at 182
-1, // Propensity starts at 183
-1, // CircleFront starts at 184
-1, // CircleFront0 starts at 185
-1, // SetUPrecision starts at 186
-1, // SetVPrecision starts at 187
-1, // LineTo starts at 188
-1, // BSurface starts at 189
-1, // MoveRel2f starts at 190
-1, // MoveRel2d starts at 191
-1, // MoveRel3f starts at 192
-1, // MoveRel3d starts at 193
-1, // DBSurfaceS starts at 194
-1, // DBSurfaceM starts at 195
-1, // Camera starts at 196
-1, // EA20 starts at 197
-1, // Rotate starts at 198
-1, // RotateHLU starts at 199
-1, // RotateXYZ starts at 200
-1, // Terrain starts at 201
-1, // PovRayStart starts at 202
-1, // SetHead3f starts at 203
-1, // SetTropismDirection3f starts at 204
-1, // Orchard starts at 205
-1, // TreeReader starts at 206
-1, // Roots starts at 207
0, // Internode starts at 208
-1, // Bud starts at 209
-1, // PruneCap starts at 210
-1, // Leaf starts at 211
-1, // Parab starts at 212
-1, // Box starts at 213


// Group 2
-1, // SB starts at 214
-1, // EB starts at 215
-1, // F starts at 216
-1, // f starts at 217
-1, // Left starts at 218
-1, // Right starts at 219
-1, // Down starts at 220
-1, // Up starts at 221
-1, // RollL starts at 222
-1, // RollR starts at 223
-1, // IncColor starts at 224
-1, // DecColor starts at 225
-1, // SetColor starts at 226
-1, // SetWidth starts at 227
-1, // Label starts at 228
-1, // TurnAround starts at 229
-1, // Cut starts at 230
-1, // GetPos starts at 231
-1, // GetHead starts at 232
-1, // GetLeft starts at 233
-1, // GetUp starts at 234
-1, // Circle starts at 235
-1, // MoveTo starts at 236
-1, // Sphere starts at 237
-1, // SetHead starts at 238
-1, // Sphere0 starts at 239
-1, // Circle0 starts at 240
-1, // Line2f starts at 241
-1, // Line2d starts at 242
-1, // Line3f starts at 243
-1, // Line3d starts at 244
-1, // LineTo2f starts at 245
-1, // LineTo2d starts at 246
-1, // LineTo3f starts at 247
-1, // LineTo3d starts at 248
-1, // LineRel2f starts at 249
-1, // LineRel2d starts at 250
-1, // LineRel3f starts at 251
-1, // LineRel3d starts at 252
-1, // Surface starts at 253
-1, // RollToVert starts at 254
-1, // SetElasticity starts at 255
-1, // IncElasticity starts at 256
-1, // DecElasticity starts at 257
-1, // CurrentContour starts at 258
-1, // StartGC starts at 259
-1, // PointGC starts at 260
-1, // EndGC starts at 261
-1, // MeshPoint starts at 262
-1, // E1 starts at 263
-1, // MoveTo2f starts at 264
-1, // MoveTo2d starts at 265
-1, // MoveTo3f starts at 266
-1, // MoveTo3d starts at 267
-1, // E2 starts at 268
-1, // SP starts at 269
-1, // EP starts at 270
-1, // PP starts at 271
-1, // Rhombus starts at 272
-1, // Triangle starts at 273
-1, // MouseIns starts at 274
-1, // BlendedContour starts at 275
-1, // CurrentTexture starts at 276
-1, // TextureVCoeff starts at 277
-1, // Orient starts at 278
-1, // ScaleContour starts at 279
-1, // Elasticity starts at 280
-1, // DSurface starts at 281
-1, // G starts at 282
-1, // g starts at 283
-1, // MouseInsPos starts at 284
-1, // Surface3 starts at 285
-1, // ContourSides starts at 286
-1, // InitSurface starts at 287
-1, // SurfacePoint starts at 288
-1, // DrawSurface starts at 289
-1, // Propensity starts at 290
-1, // CircleFront starts at 291
-1, // CircleFront0 starts at 292
-1, // SetUPrecision starts at 293
-1, // SetVPrecision starts at 294
-1, // LineTo starts at 295
-1, // BSurface starts at 296
-1, // MoveRel2f starts at 297
-1, // MoveRel2d starts at 298
-1, // MoveRel3f starts at 299
-1, // MoveRel3d starts at 300
-1, // DBSurfaceS starts at 301
-1, // DBSurfaceM starts at 302
-1, // Camera starts at 303
-1, // EA20 starts at 304
-1, // Rotate starts at 305
-1, // RotateHLU starts at 306
-1, // RotateXYZ starts at 307
-1, // Terrain starts at 308
-1, // PovRayStart starts at 309
-1, // SetHead3f starts at 310
-1, // SetTropismDirection3f starts at 311
-1, // Orchard starts at 312
-1, // TreeReader starts at 313
-1, // Roots starts at 314
-1, // Internode starts at 315
0, // Bud starts at 316
-1, // PruneCap starts at 317
-1, // Leaf starts at 318
-1, // Parab starts at 319
-1, // Box starts at 320


// Group 3
-1, // SB starts at 321
-1, // EB starts at 322
-1, // F starts at 323
-1, // f starts at 324
-1, // Left starts at 325
-1, // Right starts at 326
-1, // Down starts at 327
-1, // Up starts at 328
-1, // RollL starts at 329
-1, // RollR starts at 330
-1, // IncColor starts at 331
-1, // DecColor starts at 332
-1, // SetColor starts at 333
-1, // SetWidth starts at 334
-1, // Label starts at 335
-1, // TurnAround starts at 336
-1, // Cut starts at 337
-1, // GetPos starts at 338
-1, // GetHead starts at 339
-1, // GetLeft starts at 340
-1, // GetUp starts at 341
-1, // Circle starts at 342
-1, // MoveTo starts at 343
-1, // Sphere starts at 344
-1, // SetHead starts at 345
-1, // Sphere0 starts at 346
-1, // Circle0 starts at 347
-1, // Line2f starts at 348
-1, // Line2d starts at 349
-1, // Line3f starts at 350
-1, // Line3d starts at 351
-1, // LineTo2f starts at 352
-1, // LineTo2d starts at 353
-1, // LineTo3f starts at 354
-1, // LineTo3d starts at 355
-1, // LineRel2f starts at 356
-1, // LineRel2d starts at 357
-1, // LineRel3f starts at 358
-1, // LineRel3d starts at 359
-1, // Surface starts at 360
-1, // RollToVert starts at 361
-1, // SetElasticity starts at 362
-1, // IncElasticity starts at 363
-1, // DecElasticity starts at 364
-1, // CurrentContour starts at 365
-1, // StartGC starts at 366
-1, // PointGC starts at 367
-1, // EndGC starts at 368
-1, // MeshPoint starts at 369
-1, // E1 starts at 370
-1, // MoveTo2f starts at 371
-1, // MoveTo2d starts at 372
-1, // MoveTo3f starts at 373
-1, // MoveTo3d starts at 374
-1, // E2 starts at 375
-1, // SP starts at 376
-1, // EP starts at 377
-1, // PP starts at 378
-1, // Rhombus starts at 379
-1, // Triangle starts at 380
-1, // MouseIns starts at 381
-1, // BlendedContour starts at 382
-1, // CurrentTexture starts at 383
-1, // TextureVCoeff starts at 384
-1, // Orient starts at 385
-1, // ScaleContour starts at 386
-1, // Elasticity starts at 387
-1, // DSurface starts at 388
-1, // G starts at 389
-1, // g starts at 390
-1, // MouseInsPos starts at 391
-1, // Surface3 starts at 392
-1, // ContourSides starts at 393
-1, // InitSurface starts at 394
-1, // SurfacePoint starts at 395
-1, // DrawSurface starts at 396
-1, // Propensity starts at 397
-1, // CircleFront starts at 398
-1, // CircleFront0 starts at 399
-1, // SetUPrecision starts at 400
-1, // SetVPrecision starts at 401
-1, // LineTo starts at 402
-1, // BSurface starts at 403
-1, // MoveRel2f starts at 404
-1, // MoveRel2d starts at 405
-1, // MoveRel3f starts at 406
-1, // MoveRel3d starts at 407
-1, // DBSurfaceS starts at 408
-1, // DBSurfaceM starts at 409
-1, // Camera starts at 410
-1, // EA20 starts at 411
-1, // Rotate starts at 412
-1, // RotateHLU starts at 413
-1, // RotateXYZ starts at 414
-1, // Terrain starts at 415
-1, // PovRayStart starts at 416
-1, // SetHead3f starts at 417
-1, // SetTropismDirection3f starts at 418
-1, // Orchard starts at 419
-1, // TreeReader starts at 420
-1, // Roots starts at 421
0, // Internode starts at 422
1, // Bud starts at 423
-1, // PruneCap starts at 424
2, // Leaf starts at 425
-1, // Parab starts at 426
-1, // Box starts at 427


// Group 4
-1, // SB starts at 428
-1, // EB starts at 429
-1, // F starts at 430
-1, // f starts at 431
-1, // Left starts at 432
-1, // Right starts at 433
-1, // Down starts at 434
-1, // Up starts at 435
-1, // RollL starts at 436
-1, // RollR starts at 437
-1, // IncColor starts at 438
-1, // DecColor starts at 439
-1, // SetColor starts at 440
-1, // SetWidth starts at 441
-1, // Label starts at 442
-1, // TurnAround starts at 443
-1, // Cut starts at 444
0, 1, 4, 5, // GetPos starts at 445
3, 6, // GetHead starts at 449
-1, // GetLeft starts at 451
-1, // GetUp starts at 452
-1, // Circle starts at 453
-1, // MoveTo starts at 454
-1, // Sphere starts at 455
-1, // SetHead starts at 456
-1, // Sphere0 starts at 457
-1, // Circle0 starts at 458
-1, // Line2f starts at 459
-1, // Line2d starts at 460
-1, // Line3f starts at 461
-1, // Line3d starts at 462
-1, // LineTo2f starts at 463
-1, // LineTo2d starts at 464
-1, // LineTo3f starts at 465
-1, // LineTo3d starts at 466
-1, // LineRel2f starts at 467
-1, // LineRel2d starts at 468
-1, // LineRel3f starts at 469
-1, // LineRel3d starts at 470
-1, // Surface starts at 471
-1, // RollToVert starts at 472
-1, // SetElasticity starts at 473
-1, // IncElasticity starts at 474
-1, // DecElasticity starts at 475
-1, // CurrentContour starts at 476
-1, // StartGC starts at 477
-1, // PointGC starts at 478
-1, // EndGC starts at 479
-1, // MeshPoint starts at 480
-1, // E1 starts at 481
-1, // MoveTo2f starts at 482
-1, // MoveTo2d starts at 483
-1, // MoveTo3f starts at 484
-1, // MoveTo3d starts at 485
-1, // E2 starts at 486
-1, // SP starts at 487
-1, // EP starts at 488
-1, // PP starts at 489
-1, // Rhombus starts at 490
-1, // Triangle starts at 491
-1, // MouseIns starts at 492
-1, // BlendedContour starts at 493
-1, // CurrentTexture starts at 494
-1, // TextureVCoeff starts at 495
-1, // Orient starts at 496
-1, // ScaleContour starts at 497
-1, // Elasticity starts at 498
-1, // DSurface starts at 499
-1, // G starts at 500
-1, // g starts at 501
-1, // MouseInsPos starts at 502
-1, // Surface3 starts at 503
-1, // ContourSides starts at 504
-1, // InitSurface starts at 505
-1, // SurfacePoint starts at 506
-1, // DrawSurface starts at 507
-1, // Propensity starts at 508
-1, // CircleFront starts at 509
-1, // CircleFront0 starts at 510
-1, // SetUPrecision starts at 511
-1, // SetVPrecision starts at 512
-1, // LineTo starts at 513
-1, // BSurface starts at 514
-1, // MoveRel2f starts at 515
-1, // MoveRel2d starts at 516
-1, // MoveRel3f starts at 517
-1, // MoveRel3d starts at 518
-1, // DBSurfaceS starts at 519
-1, // DBSurfaceM starts at 520
-1, // Camera starts at 521
-1, // EA20 starts at 522
-1, // Rotate starts at 523
-1, // RotateHLU starts at 524
-1, // RotateXYZ starts at 525
-1, // Terrain starts at 526
-1, // PovRayStart starts at 527
-1, // SetHead3f starts at 528
-1, // SetTropismDirection3f starts at 529
-1, // Orchard starts at 530
-1, // TreeReader starts at 531
-1, // Roots starts at 532
0, 4, // Internode starts at 533
1, 5, // Bud starts at 535
2, // PruneCap starts at 537
3, 6, // Leaf starts at 538
-1, // Parab starts at 540
-1, // Box starts at 541


// Group 5
-1, // SB starts at 542
-1, // EB starts at 543
-1, // F starts at 544
-1, // f starts at 545
-1, // Left starts at 546
-1, // Right starts at 547
-1, // Down starts at 548
-1, // Up starts at 549
-1, // RollL starts at 550
-1, // RollR starts at 551
-1, // IncColor starts at 552
-1, // DecColor starts at 553
-1, // SetColor starts at 554
-1, // SetWidth starts at 555
-1, // Label starts at 556
-1, // TurnAround starts at 557
-1, // Cut starts at 558
-1, // GetPos starts at 559
-1, // GetHead starts at 560
-1, // GetLeft starts at 561
-1, // GetUp starts at 562
-1, // Circle starts at 563
-1, // MoveTo starts at 564
-1, // Sphere starts at 565
-1, // SetHead starts at 566
-1, // Sphere0 starts at 567
-1, // Circle0 starts at 568
-1, // Line2f starts at 569
-1, // Line2d starts at 570
-1, // Line3f starts at 571
-1, // Line3d starts at 572
-1, // LineTo2f starts at 573
-1, // LineTo2d starts at 574
-1, // LineTo3f starts at 575
-1, // LineTo3d starts at 576
-1, // LineRel2f starts at 577
-1, // LineRel2d starts at 578
-1, // LineRel3f starts at 579
-1, // LineRel3d starts at 580
-1, // Surface starts at 581
-1, // RollToVert starts at 582
-1, // SetElasticity starts at 583
-1, // IncElasticity starts at 584
-1, // DecElasticity starts at 585
-1, // CurrentContour starts at 586
-1, // StartGC starts at 587
-1, // PointGC starts at 588
-1, // EndGC starts at 589
-1, // MeshPoint starts at 590
-1, // E1 starts at 591
-1, // MoveTo2f starts at 592
-1, // MoveTo2d starts at 593
-1, // MoveTo3f starts at 594
-1, // MoveTo3d starts at 595
-1, // E2 starts at 596
-1, // SP starts at 597
-1, // EP starts at 598
-1, // PP starts at 599
-1, // Rhombus starts at 600
-1, // Triangle starts at 601
-1, // MouseIns starts at 602
-1, // BlendedContour starts at 603
-1, // CurrentTexture starts at 604
-1, // TextureVCoeff starts at 605
-1, // Orient starts at 606
-1, // ScaleContour starts at 607
-1, // Elasticity starts at 608
-1, // DSurface starts at 609
-1, // G starts at 610
-1, // g starts at 611
-1, // MouseInsPos starts at 612
-1, // Surface3 starts at 613
-1, // ContourSides starts at 614
-1, // InitSurface starts at 615
-1, // SurfacePoint starts at 616
-1, // DrawSurface starts at 617
-1, // Propensity starts at 618
-1, // CircleFront starts at 619
-1, // CircleFront0 starts at 620
-1, // SetUPrecision starts at 621
-1, // SetVPrecision starts at 622
-1, // LineTo starts at 623
-1, // BSurface starts at 624
-1, // MoveRel2f starts at 625
-1, // MoveRel2d starts at 626
-1, // MoveRel3f starts at 627
-1, // MoveRel3d starts at 628
-1, // DBSurfaceS starts at 629
-1, // DBSurfaceM starts at 630
-1, // Camera starts at 631
-1, // EA20 starts at 632
-1, // Rotate starts at 633
-1, // RotateHLU starts at 634
-1, // RotateXYZ starts at 635
-1, // Terrain starts at 636
-1, // PovRayStart starts at 637
-1, // SetHead3f starts at 638
-1, // SetTropismDirection3f starts at 639
-1, // Orchard starts at 640
-1, // TreeReader starts at 641
-1, // Roots starts at 642
2, // Internode starts at 643
0, // Bud starts at 644
-1, // PruneCap starts at 645
1, // Leaf starts at 646
-1, // Parab starts at 647
-1, // Box starts at 648


// Group 6
-1, // SB starts at 649
-1, // EB starts at 650
-1, // F starts at 651
-1, // f starts at 652
-1, // Left starts at 653
-1, // Right starts at 654
-1, // Down starts at 655
-1, // Up starts at 656
-1, // RollL starts at 657
-1, // RollR starts at 658
-1, // IncColor starts at 659
-1, // DecColor starts at 660
-1, // SetColor starts at 661
-1, // SetWidth starts at 662
-1, // Label starts at 663
-1, // TurnAround starts at 664
-1, // Cut starts at 665
-1, // GetPos starts at 666
-1, // GetHead starts at 667
-1, // GetLeft starts at 668
-1, // GetUp starts at 669
-1, // Circle starts at 670
-1, // MoveTo starts at 671
-1, // Sphere starts at 672
-1, // SetHead starts at 673
-1, // Sphere0 starts at 674
-1, // Circle0 starts at 675
-1, // Line2f starts at 676
-1, // Line2d starts at 677
-1, // Line3f starts at 678
-1, // Line3d starts at 679
-1, // LineTo2f starts at 680
-1, // LineTo2d starts at 681
-1, // LineTo3f starts at 682
-1, // LineTo3d starts at 683
-1, // LineRel2f starts at 684
-1, // LineRel2d starts at 685
-1, // LineRel3f starts at 686
-1, // LineRel3d starts at 687
-1, // Surface starts at 688
-1, // RollToVert starts at 689
-1, // SetElasticity starts at 690
-1, // IncElasticity starts at 691
-1, // DecElasticity starts at 692
-1, // CurrentContour starts at 693
-1, // StartGC starts at 694
-1, // PointGC starts at 695
-1, // EndGC starts at 696
-1, // MeshPoint starts at 697
-1, // E1 starts at 698
-1, // MoveTo2f starts at 699
-1, // MoveTo2d starts at 700
-1, // MoveTo3f starts at 701
-1, // MoveTo3d starts at 702
-1, // E2 starts at 703
-1, // SP starts at 704
-1, // EP starts at 705
-1, // PP starts at 706
-1, // Rhombus starts at 707
-1, // Triangle starts at 708
-1, // MouseIns starts at 709
-1, // BlendedContour starts at 710
-1, // CurrentTexture starts at 711
-1, // TextureVCoeff starts at 712
-1, // Orient starts at 713
-1, // ScaleContour starts at 714
-1, // Elasticity starts at 715
-1, // DSurface starts at 716
-1, // G starts at 717
-1, // g starts at 718
-1, // MouseInsPos starts at 719
-1, // Surface3 starts at 720
-1, // ContourSides starts at 721
-1, // InitSurface starts at 722
-1, // SurfacePoint starts at 723
-1, // DrawSurface starts at 724
-1, // Propensity starts at 725
-1, // CircleFront starts at 726
-1, // CircleFront0 starts at 727
-1, // SetUPrecision starts at 728
-1, // SetVPrecision starts at 729
-1, // LineTo starts at 730
-1, // BSurface starts at 731
-1, // MoveRel2f starts at 732
-1, // MoveRel2d starts at 733
-1, // MoveRel3f starts at 734
-1, // MoveRel3d starts at 735
-1, // DBSurfaceS starts at 736
-1, // DBSurfaceM starts at 737
-1, // Camera starts at 738
-1, // EA20 starts at 739
-1, // Rotate starts at 740
-1, // RotateHLU starts at 741
-1, // RotateXYZ starts at 742
-1, // Terrain starts at 743
-1, // PovRayStart starts at 744
-1, // SetHead3f starts at 745
-1, // SetTropismDirection3f starts at 746
-1, // Orchard starts at 747
-1, // TreeReader starts at 748
-1, // Roots starts at 749
0, 1, // Internode starts at 750
2, // Bud starts at 752
-1, // PruneCap starts at 753
3, // Leaf starts at 754
-1, // Parab starts at 755
-1, // Box starts at 756


// Group 7
-1, // SB starts at 757
-1, // EB starts at 758
-1, // F starts at 759
-1, // f starts at 760
-1, // Left starts at 761
-1, // Right starts at 762
-1, // Down starts at 763
-1, // Up starts at 764
-1, // RollL starts at 765
-1, // RollR starts at 766
-1, // IncColor starts at 767
-1, // DecColor starts at 768
-1, // SetColor starts at 769
-1, // SetWidth starts at 770
-1, // Label starts at 771
-1, // TurnAround starts at 772
-1, // Cut starts at 773
-1, // GetPos starts at 774
-1, // GetHead starts at 775
-1, // GetLeft starts at 776
-1, // GetUp starts at 777
-1, // Circle starts at 778
-1, // MoveTo starts at 779
-1, // Sphere starts at 780
-1, // SetHead starts at 781
-1, // Sphere0 starts at 782
-1, // Circle0 starts at 783
-1, // Line2f starts at 784
-1, // Line2d starts at 785
-1, // Line3f starts at 786
-1, // Line3d starts at 787
-1, // LineTo2f starts at 788
-1, // LineTo2d starts at 789
-1, // LineTo3f starts at 790
-1, // LineTo3d starts at 791
-1, // LineRel2f starts at 792
-1, // LineRel2d starts at 793
-1, // LineRel3f starts at 794
-1, // LineRel3d starts at 795
-1, // Surface starts at 796
-1, // RollToVert starts at 797
-1, // SetElasticity starts at 798
-1, // IncElasticity starts at 799
-1, // DecElasticity starts at 800
-1, // CurrentContour starts at 801
-1, // StartGC starts at 802
-1, // PointGC starts at 803
-1, // EndGC starts at 804
-1, // MeshPoint starts at 805
-1, // E1 starts at 806
-1, // MoveTo2f starts at 807
-1, // MoveTo2d starts at 808
-1, // MoveTo3f starts at 809
-1, // MoveTo3d starts at 810
-1, // E2 starts at 811
-1, // SP starts at 812
-1, // EP starts at 813
-1, // PP starts at 814
-1, // Rhombus starts at 815
-1, // Triangle starts at 816
-1, // MouseIns starts at 817
-1, // BlendedContour starts at 818
-1, // CurrentTexture starts at 819
-1, // TextureVCoeff starts at 820
-1, // Orient starts at 821
-1, // ScaleContour starts at 822
-1, // Elasticity starts at 823
-1, // DSurface starts at 824
-1, // G starts at 825
-1, // g starts at 826
-1, // MouseInsPos starts at 827
-1, // Surface3 starts at 828
-1, // ContourSides starts at 829
-1, // InitSurface starts at 830
-1, // SurfacePoint starts at 831
-1, // DrawSurface starts at 832
-1, // Propensity starts at 833
-1, // CircleFront starts at 834
-1, // CircleFront0 starts at 835
-1, // SetUPrecision starts at 836
-1, // SetVPrecision starts at 837
-1, // LineTo starts at 838
-1, // BSurface starts at 839
-1, // MoveRel2f starts at 840
-1, // MoveRel2d starts at 841
-1, // MoveRel3f starts at 842
-1, // MoveRel3d starts at 843
-1, // DBSurfaceS starts at 844
-1, // DBSurfaceM starts at 845
-1, // Camera starts at 846
-1, // EA20 starts at 847
-1, // Rotate starts at 848
-1, // RotateHLU starts at 849
-1, // RotateXYZ starts at 850
-1, // Terrain starts at 851
-1, // PovRayStart starts at 852
-1, // SetHead3f starts at 853
-1, // SetTropismDirection3f starts at 854
-1, // Orchard starts at 855
-1, // TreeReader starts at 856
-1, // Roots starts at 857
0, 1, // Internode starts at 858
-1, // Bud starts at 860
-1, // PruneCap starts at 861
-1, // Leaf starts at 862
-1, // Parab starts at 863
-1, // Box starts at 864
};

static int PProductionGroupsStart[] =
{
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 
16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 
32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 
48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 
64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 
80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 
96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 
112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 
128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 
144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 
160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 
176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 
192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 
208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 
224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 
240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 
256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 
272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 
288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 
304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 
320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 
336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 
352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 
368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 
384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 
400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 
416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 
432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 449, 451, 
452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 
468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 
484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 
500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 
516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 
532, 533, 535, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 
551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 
567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 
583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 
599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 
615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 
631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 
647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 
663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 
679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 
695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 
711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 
727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 
743, 744, 745, 746, 747, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 
760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 
776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 
792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 
808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 
824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 
840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 
856, 857, 858, 860, 861, 862, 863, 864, 
};
const __lc_ProductionPredecessor& GetModulePProductionPredecessor(int iGroup, __lc_ModuleIdType moduleId, int id)
{
	const __lc_ProductionPredecessor* array = Ptables[iGroup];
	int index = ModulePProductions[PProductionGroupsStart[iGroup * NumOfModules() + moduleId] + id];
	return array[index];
}
static int DProductionModuleCount[] =
{
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
};

int NumOfModuleDProductions(int iGroup, __lc_ModuleIdType moduleId)
{ return DProductionModuleCount[iGroup * NumOfModules() + moduleId]; }
static int ModuleDProductions[] = 
{


// Group 0
-1, // SB starts at 0
-1, // EB starts at 1
-1, // F starts at 2
-1, // f starts at 3
-1, // Left starts at 4
-1, // Right starts at 5
-1, // Down starts at 6
-1, // Up starts at 7
-1, // RollL starts at 8
-1, // RollR starts at 9
-1, // IncColor starts at 10
-1, // DecColor starts at 11
-1, // SetColor starts at 12
-1, // SetWidth starts at 13
-1, // Label starts at 14
-1, // TurnAround starts at 15
-1, // Cut starts at 16
-1, // GetPos starts at 17
-1, // GetHead starts at 18
-1, // GetLeft starts at 19
-1, // GetUp starts at 20
-1, // Circle starts at 21
-1, // MoveTo starts at 22
-1, // Sphere starts at 23
-1, // SetHead starts at 24
-1, // Sphere0 starts at 25
-1, // Circle0 starts at 26
-1, // Line2f starts at 27
-1, // Line2d starts at 28
-1, // Line3f starts at 29
-1, // Line3d starts at 30
-1, // LineTo2f starts at 31
-1, // LineTo2d starts at 32
-1, // LineTo3f starts at 33
-1, // LineTo3d starts at 34
-1, // LineRel2f starts at 35
-1, // LineRel2d starts at 36
-1, // LineRel3f starts at 37
-1, // LineRel3d starts at 38
-1, // Surface starts at 39
-1, // RollToVert starts at 40
-1, // SetElasticity starts at 41
-1, // IncElasticity starts at 42
-1, // DecElasticity starts at 43
-1, // CurrentContour starts at 44
-1, // StartGC starts at 45
-1, // PointGC starts at 46
-1, // EndGC starts at 47
-1, // MeshPoint starts at 48
-1, // E1 starts at 49
-1, // MoveTo2f starts at 50
-1, // MoveTo2d starts at 51
-1, // MoveTo3f starts at 52
-1, // MoveTo3d starts at 53
-1, // E2 starts at 54
-1, // SP starts at 55
-1, // EP starts at 56
-1, // PP starts at 57
-1, // Rhombus starts at 58
-1, // Triangle starts at 59
-1, // MouseIns starts at 60
-1, // BlendedContour starts at 61
-1, // CurrentTexture starts at 62
-1, // TextureVCoeff starts at 63
-1, // Orient starts at 64
-1, // ScaleContour starts at 65
-1, // Elasticity starts at 66
-1, // DSurface starts at 67
-1, // G starts at 68
-1, // g starts at 69
-1, // MouseInsPos starts at 70
-1, // Surface3 starts at 71
-1, // ContourSides starts at 72
-1, // InitSurface starts at 73
-1, // SurfacePoint starts at 74
-1, // DrawSurface starts at 75
-1, // Propensity starts at 76
-1, // CircleFront starts at 77
-1, // CircleFront0 starts at 78
-1, // SetUPrecision starts at 79
-1, // SetVPrecision starts at 80
-1, // LineTo starts at 81
-1, // BSurface starts at 82
-1, // MoveRel2f starts at 83
-1, // MoveRel2d starts at 84
-1, // MoveRel3f starts at 85
-1, // MoveRel3d starts at 86
-1, // DBSurfaceS starts at 87
-1, // DBSurfaceM starts at 88
-1, // Camera starts at 89
-1, // EA20 starts at 90
-1, // Rotate starts at 91
-1, // RotateHLU starts at 92
-1, // RotateXYZ starts at 93
-1, // Terrain starts at 94
-1, // PovRayStart starts at 95
-1, // SetHead3f starts at 96
-1, // SetTropismDirection3f starts at 97
-1, // Orchard starts at 98
-1, // TreeReader starts at 99
-1, // Roots starts at 100
-1, // Internode starts at 101
-1, // Bud starts at 102
-1, // PruneCap starts at 103
-1, // Leaf starts at 104
-1, // Parab starts at 105
-1, // Box starts at 106


// Group 1
-1, // SB starts at 107
-1, // EB starts at 108
-1, // F starts at 109
-1, // f starts at 110
-1, // Left starts at 111
-1, // Right starts at 112
-1, // Down starts at 113
-1, // Up starts at 114
-1, // RollL starts at 115
-1, // RollR starts at 116
-1, // IncColor starts at 117
-1, // DecColor starts at 118
-1, // SetColor starts at 119
-1, // SetWidth starts at 120
-1, // Label starts at 121
-1, // TurnAround starts at 122
-1, // Cut starts at 123
-1, // GetPos starts at 124
-1, // GetHead starts at 125
-1, // GetLeft starts at 126
-1, // GetUp starts at 127
-1, // Circle starts at 128
-1, // MoveTo starts at 129
-1, // Sphere starts at 130
-1, // SetHead starts at 131
-1, // Sphere0 starts at 132
-1, // Circle0 starts at 133
-1, // Line2f starts at 134
-1, // Line2d starts at 135
-1, // Line3f starts at 136
-1, // Line3d starts at 137
-1, // LineTo2f starts at 138
-1, // LineTo2d starts at 139
-1, // LineTo3f starts at 140
-1, // LineTo3d starts at 141
-1, // LineRel2f starts at 142
-1, // LineRel2d starts at 143
-1, // LineRel3f starts at 144
-1, // LineRel3d starts at 145
-1, // Surface starts at 146
-1, // RollToVert starts at 147
-1, // SetElasticity starts at 148
-1, // IncElasticity starts at 149
-1, // DecElasticity starts at 150
-1, // CurrentContour starts at 151
-1, // StartGC starts at 152
-1, // PointGC starts at 153
-1, // EndGC starts at 154
-1, // MeshPoint starts at 155
-1, // E1 starts at 156
-1, // MoveTo2f starts at 157
-1, // MoveTo2d starts at 158
-1, // MoveTo3f starts at 159
-1, // MoveTo3d starts at 160
-1, // E2 starts at 161
-1, // SP starts at 162
-1, // EP starts at 163
-1, // PP starts at 164
-1, // Rhombus starts at 165
-1, // Triangle starts at 166
-1, // MouseIns starts at 167
-1, // BlendedContour starts at 168
-1, // CurrentTexture starts at 169
-1, // TextureVCoeff starts at 170
-1, // Orient starts at 171
-1, // ScaleContour starts at 172
-1, // Elasticity starts at 173
-1, // DSurface starts at 174
-1, // G starts at 175
-1, // g starts at 176
-1, // MouseInsPos starts at 177
-1, // Surface3 starts at 178
-1, // ContourSides starts at 179
-1, // InitSurface starts at 180
-1, // SurfacePoint starts at 181
-1, // DrawSurface starts at 182
-1, // Propensity starts at 183
-1, // CircleFront starts at 184
-1, // CircleFront0 starts at 185
-1, // SetUPrecision starts at 186
-1, // SetVPrecision starts at 187
-1, // LineTo starts at 188
-1, // BSurface starts at 189
-1, // MoveRel2f starts at 190
-1, // MoveRel2d starts at 191
-1, // MoveRel3f starts at 192
-1, // MoveRel3d starts at 193
-1, // DBSurfaceS starts at 194
-1, // DBSurfaceM starts at 195
-1, // Camera starts at 196
-1, // EA20 starts at 197
-1, // Rotate starts at 198
-1, // RotateHLU starts at 199
-1, // RotateXYZ starts at 200
-1, // Terrain starts at 201
-1, // PovRayStart starts at 202
-1, // SetHead3f starts at 203
-1, // SetTropismDirection3f starts at 204
-1, // Orchard starts at 205
-1, // TreeReader starts at 206
-1, // Roots starts at 207
-1, // Internode starts at 208
-1, // Bud starts at 209
-1, // PruneCap starts at 210
-1, // Leaf starts at 211
-1, // Parab starts at 212
-1, // Box starts at 213


// Group 2
-1, // SB starts at 214
-1, // EB starts at 215
-1, // F starts at 216
-1, // f starts at 217
-1, // Left starts at 218
-1, // Right starts at 219
-1, // Down starts at 220
-1, // Up starts at 221
-1, // RollL starts at 222
-1, // RollR starts at 223
-1, // IncColor starts at 224
-1, // DecColor starts at 225
-1, // SetColor starts at 226
-1, // SetWidth starts at 227
-1, // Label starts at 228
-1, // TurnAround starts at 229
-1, // Cut starts at 230
-1, // GetPos starts at 231
-1, // GetHead starts at 232
-1, // GetLeft starts at 233
-1, // GetUp starts at 234
-1, // Circle starts at 235
-1, // MoveTo starts at 236
-1, // Sphere starts at 237
-1, // SetHead starts at 238
-1, // Sphere0 starts at 239
-1, // Circle0 starts at 240
-1, // Line2f starts at 241
-1, // Line2d starts at 242
-1, // Line3f starts at 243
-1, // Line3d starts at 244
-1, // LineTo2f starts at 245
-1, // LineTo2d starts at 246
-1, // LineTo3f starts at 247
-1, // LineTo3d starts at 248
-1, // LineRel2f starts at 249
-1, // LineRel2d starts at 250
-1, // LineRel3f starts at 251
-1, // LineRel3d starts at 252
-1, // Surface starts at 253
-1, // RollToVert starts at 254
-1, // SetElasticity starts at 255
-1, // IncElasticity starts at 256
-1, // DecElasticity starts at 257
-1, // CurrentContour starts at 258
-1, // StartGC starts at 259
-1, // PointGC starts at 260
-1, // EndGC starts at 261
-1, // MeshPoint starts at 262
-1, // E1 starts at 263
-1, // MoveTo2f starts at 264
-1, // MoveTo2d starts at 265
-1, // MoveTo3f starts at 266
-1, // MoveTo3d starts at 267
-1, // E2 starts at 268
-1, // SP starts at 269
-1, // EP starts at 270
-1, // PP starts at 271
-1, // Rhombus starts at 272
-1, // Triangle starts at 273
-1, // MouseIns starts at 274
-1, // BlendedContour starts at 275
-1, // CurrentTexture starts at 276
-1, // TextureVCoeff starts at 277
-1, // Orient starts at 278
-1, // ScaleContour starts at 279
-1, // Elasticity starts at 280
-1, // DSurface starts at 281
-1, // G starts at 282
-1, // g starts at 283
-1, // MouseInsPos starts at 284
-1, // Surface3 starts at 285
-1, // ContourSides starts at 286
-1, // InitSurface starts at 287
-1, // SurfacePoint starts at 288
-1, // DrawSurface starts at 289
-1, // Propensity starts at 290
-1, // CircleFront starts at 291
-1, // CircleFront0 starts at 292
-1, // SetUPrecision starts at 293
-1, // SetVPrecision starts at 294
-1, // LineTo starts at 295
-1, // BSurface starts at 296
-1, // MoveRel2f starts at 297
-1, // MoveRel2d starts at 298
-1, // MoveRel3f starts at 299
-1, // MoveRel3d starts at 300
-1, // DBSurfaceS starts at 301
-1, // DBSurfaceM starts at 302
-1, // Camera starts at 303
-1, // EA20 starts at 304
-1, // Rotate starts at 305
-1, // RotateHLU starts at 306
-1, // RotateXYZ starts at 307
-1, // Terrain starts at 308
-1, // PovRayStart starts at 309
-1, // SetHead3f starts at 310
-1, // SetTropismDirection3f starts at 311
-1, // Orchard starts at 312
-1, // TreeReader starts at 313
-1, // Roots starts at 314
-1, // Internode starts at 315
-1, // Bud starts at 316
-1, // PruneCap starts at 317
-1, // Leaf starts at 318
-1, // Parab starts at 319
-1, // Box starts at 320


// Group 3
-1, // SB starts at 321
-1, // EB starts at 322
-1, // F starts at 323
-1, // f starts at 324
-1, // Left starts at 325
-1, // Right starts at 326
-1, // Down starts at 327
-1, // Up starts at 328
-1, // RollL starts at 329
-1, // RollR starts at 330
-1, // IncColor starts at 331
-1, // DecColor starts at 332
-1, // SetColor starts at 333
-1, // SetWidth starts at 334
-1, // Label starts at 335
-1, // TurnAround starts at 336
-1, // Cut starts at 337
-1, // GetPos starts at 338
-1, // GetHead starts at 339
-1, // GetLeft starts at 340
-1, // GetUp starts at 341
-1, // Circle starts at 342
-1, // MoveTo starts at 343
-1, // Sphere starts at 344
-1, // SetHead starts at 345
-1, // Sphere0 starts at 346
-1, // Circle0 starts at 347
-1, // Line2f starts at 348
-1, // Line2d starts at 349
-1, // Line3f starts at 350
-1, // Line3d starts at 351
-1, // LineTo2f starts at 352
-1, // LineTo2d starts at 353
-1, // LineTo3f starts at 354
-1, // LineTo3d starts at 355
-1, // LineRel2f starts at 356
-1, // LineRel2d starts at 357
-1, // LineRel3f starts at 358
-1, // LineRel3d starts at 359
-1, // Surface starts at 360
-1, // RollToVert starts at 361
-1, // SetElasticity starts at 362
-1, // IncElasticity starts at 363
-1, // DecElasticity starts at 364
-1, // CurrentContour starts at 365
-1, // StartGC starts at 366
-1, // PointGC starts at 367
-1, // EndGC starts at 368
-1, // MeshPoint starts at 369
-1, // E1 starts at 370
-1, // MoveTo2f starts at 371
-1, // MoveTo2d starts at 372
-1, // MoveTo3f starts at 373
-1, // MoveTo3d starts at 374
-1, // E2 starts at 375
-1, // SP starts at 376
-1, // EP starts at 377
-1, // PP starts at 378
-1, // Rhombus starts at 379
-1, // Triangle starts at 380
-1, // MouseIns starts at 381
-1, // BlendedContour starts at 382
-1, // CurrentTexture starts at 383
-1, // TextureVCoeff starts at 384
-1, // Orient starts at 385
-1, // ScaleContour starts at 386
-1, // Elasticity starts at 387
-1, // DSurface starts at 388
-1, // G starts at 389
-1, // g starts at 390
-1, // MouseInsPos starts at 391
-1, // Surface3 starts at 392
-1, // ContourSides starts at 393
-1, // InitSurface starts at 394
-1, // SurfacePoint starts at 395
-1, // DrawSurface starts at 396
-1, // Propensity starts at 397
-1, // CircleFront starts at 398
-1, // CircleFront0 starts at 399
-1, // SetUPrecision starts at 400
-1, // SetVPrecision starts at 401
-1, // LineTo starts at 402
-1, // BSurface starts at 403
-1, // MoveRel2f starts at 404
-1, // MoveRel2d starts at 405
-1, // MoveRel3f starts at 406
-1, // MoveRel3d starts at 407
-1, // DBSurfaceS starts at 408
-1, // DBSurfaceM starts at 409
-1, // Camera starts at 410
-1, // EA20 starts at 411
-1, // Rotate starts at 412
-1, // RotateHLU starts at 413
-1, // RotateXYZ starts at 414
-1, // Terrain starts at 415
-1, // PovRayStart starts at 416
-1, // SetHead3f starts at 417
-1, // SetTropismDirection3f starts at 418
-1, // Orchard starts at 419
-1, // TreeReader starts at 420
-1, // Roots starts at 421
-1, // Internode starts at 422
-1, // Bud starts at 423
-1, // PruneCap starts at 424
-1, // Leaf starts at 425
-1, // Parab starts at 426
-1, // Box starts at 427


// Group 4
-1, // SB starts at 428
-1, // EB starts at 429
-1, // F starts at 430
-1, // f starts at 431
-1, // Left starts at 432
-1, // Right starts at 433
-1, // Down starts at 434
-1, // Up starts at 435
-1, // RollL starts at 436
-1, // RollR starts at 437
-1, // IncColor starts at 438
-1, // DecColor starts at 439
-1, // SetColor starts at 440
-1, // SetWidth starts at 441
-1, // Label starts at 442
-1, // TurnAround starts at 443
-1, // Cut starts at 444
-1, // GetPos starts at 445
-1, // GetHead starts at 446
-1, // GetLeft starts at 447
-1, // GetUp starts at 448
-1, // Circle starts at 449
-1, // MoveTo starts at 450
-1, // Sphere starts at 451
-1, // SetHead starts at 452
-1, // Sphere0 starts at 453
-1, // Circle0 starts at 454
-1, // Line2f starts at 455
-1, // Line2d starts at 456
-1, // Line3f starts at 457
-1, // Line3d starts at 458
-1, // LineTo2f starts at 459
-1, // LineTo2d starts at 460
-1, // LineTo3f starts at 461
-1, // LineTo3d starts at 462
-1, // LineRel2f starts at 463
-1, // LineRel2d starts at 464
-1, // LineRel3f starts at 465
-1, // LineRel3d starts at 466
-1, // Surface starts at 467
-1, // RollToVert starts at 468
-1, // SetElasticity starts at 469
-1, // IncElasticity starts at 470
-1, // DecElasticity starts at 471
-1, // CurrentContour starts at 472
-1, // StartGC starts at 473
-1, // PointGC starts at 474
-1, // EndGC starts at 475
-1, // MeshPoint starts at 476
-1, // E1 starts at 477
-1, // MoveTo2f starts at 478
-1, // MoveTo2d starts at 479
-1, // MoveTo3f starts at 480
-1, // MoveTo3d starts at 481
-1, // E2 starts at 482
-1, // SP starts at 483
-1, // EP starts at 484
-1, // PP starts at 485
-1, // Rhombus starts at 486
-1, // Triangle starts at 487
-1, // MouseIns starts at 488
-1, // BlendedContour starts at 489
-1, // CurrentTexture starts at 490
-1, // TextureVCoeff starts at 491
-1, // Orient starts at 492
-1, // ScaleContour starts at 493
-1, // Elasticity starts at 494
-1, // DSurface starts at 495
-1, // G starts at 496
-1, // g starts at 497
-1, // MouseInsPos starts at 498
-1, // Surface3 starts at 499
-1, // ContourSides starts at 500
-1, // InitSurface starts at 501
-1, // SurfacePoint starts at 502
-1, // DrawSurface starts at 503
-1, // Propensity starts at 504
-1, // CircleFront starts at 505
-1, // CircleFront0 starts at 506
-1, // SetUPrecision starts at 507
-1, // SetVPrecision starts at 508
-1, // LineTo starts at 509
-1, // BSurface starts at 510
-1, // MoveRel2f starts at 511
-1, // MoveRel2d starts at 512
-1, // MoveRel3f starts at 513
-1, // MoveRel3d starts at 514
-1, // DBSurfaceS starts at 515
-1, // DBSurfaceM starts at 516
-1, // Camera starts at 517
-1, // EA20 starts at 518
-1, // Rotate starts at 519
-1, // RotateHLU starts at 520
-1, // RotateXYZ starts at 521
-1, // Terrain starts at 522
-1, // PovRayStart starts at 523
-1, // SetHead3f starts at 524
-1, // SetTropismDirection3f starts at 525
-1, // Orchard starts at 526
-1, // TreeReader starts at 527
-1, // Roots starts at 528
-1, // Internode starts at 529
-1, // Bud starts at 530
-1, // PruneCap starts at 531
-1, // Leaf starts at 532
-1, // Parab starts at 533
-1, // Box starts at 534


// Group 5
-1, // SB starts at 535
-1, // EB starts at 536
-1, // F starts at 537
-1, // f starts at 538
-1, // Left starts at 539
-1, // Right starts at 540
-1, // Down starts at 541
-1, // Up starts at 542
-1, // RollL starts at 543
-1, // RollR starts at 544
-1, // IncColor starts at 545
-1, // DecColor starts at 546
-1, // SetColor starts at 547
-1, // SetWidth starts at 548
-1, // Label starts at 549
-1, // TurnAround starts at 550
-1, // Cut starts at 551
-1, // GetPos starts at 552
-1, // GetHead starts at 553
-1, // GetLeft starts at 554
-1, // GetUp starts at 555
-1, // Circle starts at 556
-1, // MoveTo starts at 557
-1, // Sphere starts at 558
-1, // SetHead starts at 559
-1, // Sphere0 starts at 560
-1, // Circle0 starts at 561
-1, // Line2f starts at 562
-1, // Line2d starts at 563
-1, // Line3f starts at 564
-1, // Line3d starts at 565
-1, // LineTo2f starts at 566
-1, // LineTo2d starts at 567
-1, // LineTo3f starts at 568
-1, // LineTo3d starts at 569
-1, // LineRel2f starts at 570
-1, // LineRel2d starts at 571
-1, // LineRel3f starts at 572
-1, // LineRel3d starts at 573
-1, // Surface starts at 574
-1, // RollToVert starts at 575
-1, // SetElasticity starts at 576
-1, // IncElasticity starts at 577
-1, // DecElasticity starts at 578
-1, // CurrentContour starts at 579
-1, // StartGC starts at 580
-1, // PointGC starts at 581
-1, // EndGC starts at 582
-1, // MeshPoint starts at 583
-1, // E1 starts at 584
-1, // MoveTo2f starts at 585
-1, // MoveTo2d starts at 586
-1, // MoveTo3f starts at 587
-1, // MoveTo3d starts at 588
-1, // E2 starts at 589
-1, // SP starts at 590
-1, // EP starts at 591
-1, // PP starts at 592
-1, // Rhombus starts at 593
-1, // Triangle starts at 594
-1, // MouseIns starts at 595
-1, // BlendedContour starts at 596
-1, // CurrentTexture starts at 597
-1, // TextureVCoeff starts at 598
-1, // Orient starts at 599
-1, // ScaleContour starts at 600
-1, // Elasticity starts at 601
-1, // DSurface starts at 602
-1, // G starts at 603
-1, // g starts at 604
-1, // MouseInsPos starts at 605
-1, // Surface3 starts at 606
-1, // ContourSides starts at 607
-1, // InitSurface starts at 608
-1, // SurfacePoint starts at 609
-1, // DrawSurface starts at 610
-1, // Propensity starts at 611
-1, // CircleFront starts at 612
-1, // CircleFront0 starts at 613
-1, // SetUPrecision starts at 614
-1, // SetVPrecision starts at 615
-1, // LineTo starts at 616
-1, // BSurface starts at 617
-1, // MoveRel2f starts at 618
-1, // MoveRel2d starts at 619
-1, // MoveRel3f starts at 620
-1, // MoveRel3d starts at 621
-1, // DBSurfaceS starts at 622
-1, // DBSurfaceM starts at 623
-1, // Camera starts at 624
-1, // EA20 starts at 625
-1, // Rotate starts at 626
-1, // RotateHLU starts at 627
-1, // RotateXYZ starts at 628
-1, // Terrain starts at 629
-1, // PovRayStart starts at 630
-1, // SetHead3f starts at 631
-1, // SetTropismDirection3f starts at 632
-1, // Orchard starts at 633
-1, // TreeReader starts at 634
-1, // Roots starts at 635
-1, // Internode starts at 636
-1, // Bud starts at 637
-1, // PruneCap starts at 638
-1, // Leaf starts at 639
-1, // Parab starts at 640
-1, // Box starts at 641


// Group 6
-1, // SB starts at 642
-1, // EB starts at 643
-1, // F starts at 644
-1, // f starts at 645
-1, // Left starts at 646
-1, // Right starts at 647
-1, // Down starts at 648
-1, // Up starts at 649
-1, // RollL starts at 650
-1, // RollR starts at 651
-1, // IncColor starts at 652
-1, // DecColor starts at 653
-1, // SetColor starts at 654
-1, // SetWidth starts at 655
-1, // Label starts at 656
-1, // TurnAround starts at 657
-1, // Cut starts at 658
-1, // GetPos starts at 659
-1, // GetHead starts at 660
-1, // GetLeft starts at 661
-1, // GetUp starts at 662
-1, // Circle starts at 663
-1, // MoveTo starts at 664
-1, // Sphere starts at 665
-1, // SetHead starts at 666
-1, // Sphere0 starts at 667
-1, // Circle0 starts at 668
-1, // Line2f starts at 669
-1, // Line2d starts at 670
-1, // Line3f starts at 671
-1, // Line3d starts at 672
-1, // LineTo2f starts at 673
-1, // LineTo2d starts at 674
-1, // LineTo3f starts at 675
-1, // LineTo3d starts at 676
-1, // LineRel2f starts at 677
-1, // LineRel2d starts at 678
-1, // LineRel3f starts at 679
-1, // LineRel3d starts at 680
-1, // Surface starts at 681
-1, // RollToVert starts at 682
-1, // SetElasticity starts at 683
-1, // IncElasticity starts at 684
-1, // DecElasticity starts at 685
-1, // CurrentContour starts at 686
-1, // StartGC starts at 687
-1, // PointGC starts at 688
-1, // EndGC starts at 689
-1, // MeshPoint starts at 690
-1, // E1 starts at 691
-1, // MoveTo2f starts at 692
-1, // MoveTo2d starts at 693
-1, // MoveTo3f starts at 694
-1, // MoveTo3d starts at 695
-1, // E2 starts at 696
-1, // SP starts at 697
-1, // EP starts at 698
-1, // PP starts at 699
-1, // Rhombus starts at 700
-1, // Triangle starts at 701
-1, // MouseIns starts at 702
-1, // BlendedContour starts at 703
-1, // CurrentTexture starts at 704
-1, // TextureVCoeff starts at 705
-1, // Orient starts at 706
-1, // ScaleContour starts at 707
-1, // Elasticity starts at 708
-1, // DSurface starts at 709
-1, // G starts at 710
-1, // g starts at 711
-1, // MouseInsPos starts at 712
-1, // Surface3 starts at 713
-1, // ContourSides starts at 714
-1, // InitSurface starts at 715
-1, // SurfacePoint starts at 716
-1, // DrawSurface starts at 717
-1, // Propensity starts at 718
-1, // CircleFront starts at 719
-1, // CircleFront0 starts at 720
-1, // SetUPrecision starts at 721
-1, // SetVPrecision starts at 722
-1, // LineTo starts at 723
-1, // BSurface starts at 724
-1, // MoveRel2f starts at 725
-1, // MoveRel2d starts at 726
-1, // MoveRel3f starts at 727
-1, // MoveRel3d starts at 728
-1, // DBSurfaceS starts at 729
-1, // DBSurfaceM starts at 730
-1, // Camera starts at 731
-1, // EA20 starts at 732
-1, // Rotate starts at 733
-1, // RotateHLU starts at 734
-1, // RotateXYZ starts at 735
-1, // Terrain starts at 736
-1, // PovRayStart starts at 737
-1, // SetHead3f starts at 738
-1, // SetTropismDirection3f starts at 739
-1, // Orchard starts at 740
-1, // TreeReader starts at 741
-1, // Roots starts at 742
-1, // Internode starts at 743
-1, // Bud starts at 744
-1, // PruneCap starts at 745
-1, // Leaf starts at 746
-1, // Parab starts at 747
-1, // Box starts at 748


// Group 7
-1, // SB starts at 749
-1, // EB starts at 750
-1, // F starts at 751
-1, // f starts at 752
-1, // Left starts at 753
-1, // Right starts at 754
-1, // Down starts at 755
-1, // Up starts at 756
-1, // RollL starts at 757
-1, // RollR starts at 758
-1, // IncColor starts at 759
-1, // DecColor starts at 760
-1, // SetColor starts at 761
-1, // SetWidth starts at 762
-1, // Label starts at 763
-1, // TurnAround starts at 764
-1, // Cut starts at 765
-1, // GetPos starts at 766
-1, // GetHead starts at 767
-1, // GetLeft starts at 768
-1, // GetUp starts at 769
-1, // Circle starts at 770
-1, // MoveTo starts at 771
-1, // Sphere starts at 772
-1, // SetHead starts at 773
-1, // Sphere0 starts at 774
-1, // Circle0 starts at 775
-1, // Line2f starts at 776
-1, // Line2d starts at 777
-1, // Line3f starts at 778
-1, // Line3d starts at 779
-1, // LineTo2f starts at 780
-1, // LineTo2d starts at 781
-1, // LineTo3f starts at 782
-1, // LineTo3d starts at 783
-1, // LineRel2f starts at 784
-1, // LineRel2d starts at 785
-1, // LineRel3f starts at 786
-1, // LineRel3d starts at 787
-1, // Surface starts at 788
-1, // RollToVert starts at 789
-1, // SetElasticity starts at 790
-1, // IncElasticity starts at 791
-1, // DecElasticity starts at 792
-1, // CurrentContour starts at 793
-1, // StartGC starts at 794
-1, // PointGC starts at 795
-1, // EndGC starts at 796
-1, // MeshPoint starts at 797
-1, // E1 starts at 798
-1, // MoveTo2f starts at 799
-1, // MoveTo2d starts at 800
-1, // MoveTo3f starts at 801
-1, // MoveTo3d starts at 802
-1, // E2 starts at 803
-1, // SP starts at 804
-1, // EP starts at 805
-1, // PP starts at 806
-1, // Rhombus starts at 807
-1, // Triangle starts at 808
-1, // MouseIns starts at 809
-1, // BlendedContour starts at 810
-1, // CurrentTexture starts at 811
-1, // TextureVCoeff starts at 812
-1, // Orient starts at 813
-1, // ScaleContour starts at 814
-1, // Elasticity starts at 815
-1, // DSurface starts at 816
-1, // G starts at 817
-1, // g starts at 818
-1, // MouseInsPos starts at 819
-1, // Surface3 starts at 820
-1, // ContourSides starts at 821
-1, // InitSurface starts at 822
-1, // SurfacePoint starts at 823
-1, // DrawSurface starts at 824
-1, // Propensity starts at 825
-1, // CircleFront starts at 826
-1, // CircleFront0 starts at 827
-1, // SetUPrecision starts at 828
-1, // SetVPrecision starts at 829
-1, // LineTo starts at 830
-1, // BSurface starts at 831
-1, // MoveRel2f starts at 832
-1, // MoveRel2d starts at 833
-1, // MoveRel3f starts at 834
-1, // MoveRel3d starts at 835
-1, // DBSurfaceS starts at 836
-1, // DBSurfaceM starts at 837
-1, // Camera starts at 838
-1, // EA20 starts at 839
-1, // Rotate starts at 840
-1, // RotateHLU starts at 841
-1, // RotateXYZ starts at 842
-1, // Terrain starts at 843
-1, // PovRayStart starts at 844
-1, // SetHead3f starts at 845
-1, // SetTropismDirection3f starts at 846
-1, // Orchard starts at 847
-1, // TreeReader starts at 848
-1, // Roots starts at 849
-1, // Internode starts at 850
-1, // Bud starts at 851
-1, // PruneCap starts at 852
-1, // Leaf starts at 853
-1, // Parab starts at 854
-1, // Box starts at 855
};

static int DProductionGroupsStart[] =
{
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 
16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 
32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 
48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 
64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 
80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 
96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 
112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 
128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 
144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 
160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 
176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 
192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 
208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 
224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 
240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 
256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 
272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 
288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 
304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 
320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 
336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 
352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 
368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 
384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 
400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 
416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 
432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 
448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 
464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 
480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 
496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 
512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 
528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 
544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 
560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 
576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 
592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 
608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 
624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 
640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 
656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 
672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 
688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 
704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 
720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 
736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 
752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 
768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 
784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 
800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 
816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 
832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 
848, 849, 850, 851, 852, 853, 854, 855, 
};
const __lc_ProductionPredecessor& GetModuleDProductionPredecessor(int iGroup, __lc_ModuleIdType moduleId, int id)
{
	const __lc_ProductionPredecessor* array = Dtables[iGroup];
	int index = ModuleDProductions[DProductionGroupsStart[iGroup * NumOfModules() + moduleId] + id];
	return array[index];
}
static int IProductionModuleCount[] = 
{
// Group: 0
// VGroup: 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 

// Group: 1
// VGroup: 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 

// Group: 2
// VGroup: 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 

// Group: 3
// VGroup: 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 

// Group: 4
// VGroup: 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 

// Group: 5
// VGroup: 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 

// Group: 6
// VGroup: 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 

// Group: 7
// VGroup: 0
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 

};

int NumOfModuleIProductions(int iGroup, int iVGroup, __lc_ModuleIdType moduleId)
{ return IProductionModuleCount[iGroup * NumOfModules() * NumOfViews() + iVGroup * NumOfModules() + moduleId]; }
static int ModuleIProductions[] = 
{

// Group 0

	// VGroup 0'
-1, // SB starts at 0
-1, // EB starts at 1
-1, // F starts at 2
-1, // f starts at 3
-1, // Left starts at 4
-1, // Right starts at 5
-1, // Down starts at 6
-1, // Up starts at 7
-1, // RollL starts at 8
-1, // RollR starts at 9
-1, // IncColor starts at 10
-1, // DecColor starts at 11
-1, // SetColor starts at 12
-1, // SetWidth starts at 13
-1, // Label starts at 14
-1, // TurnAround starts at 15
-1, // Cut starts at 16
-1, // GetPos starts at 17
-1, // GetHead starts at 18
-1, // GetLeft starts at 19
-1, // GetUp starts at 20
-1, // Circle starts at 21
-1, // MoveTo starts at 22
-1, // Sphere starts at 23
-1, // SetHead starts at 24
-1, // Sphere0 starts at 25
-1, // Circle0 starts at 26
-1, // Line2f starts at 27
-1, // Line2d starts at 28
-1, // Line3f starts at 29
-1, // Line3d starts at 30
-1, // LineTo2f starts at 31
-1, // LineTo2d starts at 32
-1, // LineTo3f starts at 33
-1, // LineTo3d starts at 34
-1, // LineRel2f starts at 35
-1, // LineRel2d starts at 36
-1, // LineRel3f starts at 37
-1, // LineRel3d starts at 38
-1, // Surface starts at 39
-1, // RollToVert starts at 40
-1, // SetElasticity starts at 41
-1, // IncElasticity starts at 42
-1, // DecElasticity starts at 43
-1, // CurrentContour starts at 44
-1, // StartGC starts at 45
-1, // PointGC starts at 46
-1, // EndGC starts at 47
-1, // MeshPoint starts at 48
-1, // E1 starts at 49
-1, // MoveTo2f starts at 50
-1, // MoveTo2d starts at 51
-1, // MoveTo3f starts at 52
-1, // MoveTo3d starts at 53
-1, // E2 starts at 54
-1, // SP starts at 55
-1, // EP starts at 56
-1, // PP starts at 57
-1, // Rhombus starts at 58
-1, // Triangle starts at 59
-1, // MouseIns starts at 60
-1, // BlendedContour starts at 61
-1, // CurrentTexture starts at 62
-1, // TextureVCoeff starts at 63
-1, // Orient starts at 64
-1, // ScaleContour starts at 65
-1, // Elasticity starts at 66
-1, // DSurface starts at 67
-1, // G starts at 68
-1, // g starts at 69
-1, // MouseInsPos starts at 70
-1, // Surface3 starts at 71
-1, // ContourSides starts at 72
-1, // InitSurface starts at 73
-1, // SurfacePoint starts at 74
-1, // DrawSurface starts at 75
-1, // Propensity starts at 76
-1, // CircleFront starts at 77
-1, // CircleFront0 starts at 78
-1, // SetUPrecision starts at 79
-1, // SetVPrecision starts at 80
-1, // LineTo starts at 81
-1, // BSurface starts at 82
-1, // MoveRel2f starts at 83
-1, // MoveRel2d starts at 84
-1, // MoveRel3f starts at 85
-1, // MoveRel3d starts at 86
-1, // DBSurfaceS starts at 87
-1, // DBSurfaceM starts at 88
-1, // Camera starts at 89
-1, // EA20 starts at 90
-1, // Rotate starts at 91
-1, // RotateHLU starts at 92
-1, // RotateXYZ starts at 93
-1, // Terrain starts at 94
-1, // PovRayStart starts at 95
-1, // SetHead3f starts at 96
-1, // SetTropismDirection3f starts at 97
-1, // Orchard starts at 98
-1, // TreeReader starts at 99
1, // Roots starts at 100
2, // Internode starts at 101
-1, // Bud starts at 102
-1, // PruneCap starts at 103
-1, // Leaf starts at 104
-1, // Parab starts at 105
0, // Box starts at 106

// Group 1

	// VGroup 0'
-1, // SB starts at 107
-1, // EB starts at 108
-1, // F starts at 109
-1, // f starts at 110
-1, // Left starts at 111
-1, // Right starts at 112
-1, // Down starts at 113
-1, // Up starts at 114
-1, // RollL starts at 115
-1, // RollR starts at 116
-1, // IncColor starts at 117
-1, // DecColor starts at 118
-1, // SetColor starts at 119
-1, // SetWidth starts at 120
-1, // Label starts at 121
-1, // TurnAround starts at 122
-1, // Cut starts at 123
-1, // GetPos starts at 124
-1, // GetHead starts at 125
-1, // GetLeft starts at 126
-1, // GetUp starts at 127
-1, // Circle starts at 128
-1, // MoveTo starts at 129
-1, // Sphere starts at 130
-1, // SetHead starts at 131
-1, // Sphere0 starts at 132
-1, // Circle0 starts at 133
-1, // Line2f starts at 134
-1, // Line2d starts at 135
-1, // Line3f starts at 136
-1, // Line3d starts at 137
-1, // LineTo2f starts at 138
-1, // LineTo2d starts at 139
-1, // LineTo3f starts at 140
-1, // LineTo3d starts at 141
-1, // LineRel2f starts at 142
-1, // LineRel2d starts at 143
-1, // LineRel3f starts at 144
-1, // LineRel3d starts at 145
-1, // Surface starts at 146
-1, // RollToVert starts at 147
-1, // SetElasticity starts at 148
-1, // IncElasticity starts at 149
-1, // DecElasticity starts at 150
-1, // CurrentContour starts at 151
-1, // StartGC starts at 152
-1, // PointGC starts at 153
-1, // EndGC starts at 154
-1, // MeshPoint starts at 155
-1, // E1 starts at 156
-1, // MoveTo2f starts at 157
-1, // MoveTo2d starts at 158
-1, // MoveTo3f starts at 159
-1, // MoveTo3d starts at 160
-1, // E2 starts at 161
-1, // SP starts at 162
-1, // EP starts at 163
-1, // PP starts at 164
-1, // Rhombus starts at 165
-1, // Triangle starts at 166
-1, // MouseIns starts at 167
-1, // BlendedContour starts at 168
-1, // CurrentTexture starts at 169
-1, // TextureVCoeff starts at 170
-1, // Orient starts at 171
-1, // ScaleContour starts at 172
-1, // Elasticity starts at 173
-1, // DSurface starts at 174
-1, // G starts at 175
-1, // g starts at 176
-1, // MouseInsPos starts at 177
-1, // Surface3 starts at 178
-1, // ContourSides starts at 179
-1, // InitSurface starts at 180
-1, // SurfacePoint starts at 181
-1, // DrawSurface starts at 182
-1, // Propensity starts at 183
-1, // CircleFront starts at 184
-1, // CircleFront0 starts at 185
-1, // SetUPrecision starts at 186
-1, // SetVPrecision starts at 187
-1, // LineTo starts at 188
-1, // BSurface starts at 189
-1, // MoveRel2f starts at 190
-1, // MoveRel2d starts at 191
-1, // MoveRel3f starts at 192
-1, // MoveRel3d starts at 193
-1, // DBSurfaceS starts at 194
-1, // DBSurfaceM starts at 195
-1, // Camera starts at 196
-1, // EA20 starts at 197
-1, // Rotate starts at 198
-1, // RotateHLU starts at 199
-1, // RotateXYZ starts at 200
-1, // Terrain starts at 201
-1, // PovRayStart starts at 202
-1, // SetHead3f starts at 203
-1, // SetTropismDirection3f starts at 204
-1, // Orchard starts at 205
-1, // TreeReader starts at 206
-1, // Roots starts at 207
-1, // Internode starts at 208
-1, // Bud starts at 209
-1, // PruneCap starts at 210
-1, // Leaf starts at 211
-1, // Parab starts at 212
-1, // Box starts at 213

// Group 2

	// VGroup 0'
-1, // SB starts at 214
-1, // EB starts at 215
-1, // F starts at 216
-1, // f starts at 217
-1, // Left starts at 218
-1, // Right starts at 219
-1, // Down starts at 220
-1, // Up starts at 221
-1, // RollL starts at 222
-1, // RollR starts at 223
-1, // IncColor starts at 224
-1, // DecColor starts at 225
-1, // SetColor starts at 226
-1, // SetWidth starts at 227
-1, // Label starts at 228
-1, // TurnAround starts at 229
-1, // Cut starts at 230
-1, // GetPos starts at 231
-1, // GetHead starts at 232
-1, // GetLeft starts at 233
-1, // GetUp starts at 234
-1, // Circle starts at 235
-1, // MoveTo starts at 236
-1, // Sphere starts at 237
-1, // SetHead starts at 238
-1, // Sphere0 starts at 239
-1, // Circle0 starts at 240
-1, // Line2f starts at 241
-1, // Line2d starts at 242
-1, // Line3f starts at 243
-1, // Line3d starts at 244
-1, // LineTo2f starts at 245
-1, // LineTo2d starts at 246
-1, // LineTo3f starts at 247
-1, // LineTo3d starts at 248
-1, // LineRel2f starts at 249
-1, // LineRel2d starts at 250
-1, // LineRel3f starts at 251
-1, // LineRel3d starts at 252
-1, // Surface starts at 253
-1, // RollToVert starts at 254
-1, // SetElasticity starts at 255
-1, // IncElasticity starts at 256
-1, // DecElasticity starts at 257
-1, // CurrentContour starts at 258
-1, // StartGC starts at 259
-1, // PointGC starts at 260
-1, // EndGC starts at 261
-1, // MeshPoint starts at 262
-1, // E1 starts at 263
-1, // MoveTo2f starts at 264
-1, // MoveTo2d starts at 265
-1, // MoveTo3f starts at 266
-1, // MoveTo3d starts at 267
-1, // E2 starts at 268
-1, // SP starts at 269
-1, // EP starts at 270
-1, // PP starts at 271
-1, // Rhombus starts at 272
-1, // Triangle starts at 273
-1, // MouseIns starts at 274
-1, // BlendedContour starts at 275
-1, // CurrentTexture starts at 276
-1, // TextureVCoeff starts at 277
-1, // Orient starts at 278
-1, // ScaleContour starts at 279
-1, // Elasticity starts at 280
-1, // DSurface starts at 281
-1, // G starts at 282
-1, // g starts at 283
-1, // MouseInsPos starts at 284
-1, // Surface3 starts at 285
-1, // ContourSides starts at 286
-1, // InitSurface starts at 287
-1, // SurfacePoint starts at 288
-1, // DrawSurface starts at 289
-1, // Propensity starts at 290
-1, // CircleFront starts at 291
-1, // CircleFront0 starts at 292
-1, // SetUPrecision starts at 293
-1, // SetVPrecision starts at 294
-1, // LineTo starts at 295
-1, // BSurface starts at 296
-1, // MoveRel2f starts at 297
-1, // MoveRel2d starts at 298
-1, // MoveRel3f starts at 299
-1, // MoveRel3d starts at 300
-1, // DBSurfaceS starts at 301
-1, // DBSurfaceM starts at 302
-1, // Camera starts at 303
-1, // EA20 starts at 304
-1, // Rotate starts at 305
-1, // RotateHLU starts at 306
-1, // RotateXYZ starts at 307
-1, // Terrain starts at 308
-1, // PovRayStart starts at 309
-1, // SetHead3f starts at 310
-1, // SetTropismDirection3f starts at 311
-1, // Orchard starts at 312
-1, // TreeReader starts at 313
-1, // Roots starts at 314
-1, // Internode starts at 315
-1, // Bud starts at 316
-1, // PruneCap starts at 317
-1, // Leaf starts at 318
-1, // Parab starts at 319
-1, // Box starts at 320

// Group 3

	// VGroup 0'
-1, // SB starts at 321
-1, // EB starts at 322
-1, // F starts at 323
-1, // f starts at 324
-1, // Left starts at 325
-1, // Right starts at 326
-1, // Down starts at 327
-1, // Up starts at 328
-1, // RollL starts at 329
-1, // RollR starts at 330
-1, // IncColor starts at 331
-1, // DecColor starts at 332
-1, // SetColor starts at 333
-1, // SetWidth starts at 334
-1, // Label starts at 335
-1, // TurnAround starts at 336
-1, // Cut starts at 337
-1, // GetPos starts at 338
-1, // GetHead starts at 339
-1, // GetLeft starts at 340
-1, // GetUp starts at 341
-1, // Circle starts at 342
-1, // MoveTo starts at 343
-1, // Sphere starts at 344
-1, // SetHead starts at 345
-1, // Sphere0 starts at 346
-1, // Circle0 starts at 347
-1, // Line2f starts at 348
-1, // Line2d starts at 349
-1, // Line3f starts at 350
-1, // Line3d starts at 351
-1, // LineTo2f starts at 352
-1, // LineTo2d starts at 353
-1, // LineTo3f starts at 354
-1, // LineTo3d starts at 355
-1, // LineRel2f starts at 356
-1, // LineRel2d starts at 357
-1, // LineRel3f starts at 358
-1, // LineRel3d starts at 359
-1, // Surface starts at 360
-1, // RollToVert starts at 361
-1, // SetElasticity starts at 362
-1, // IncElasticity starts at 363
-1, // DecElasticity starts at 364
-1, // CurrentContour starts at 365
-1, // StartGC starts at 366
-1, // PointGC starts at 367
-1, // EndGC starts at 368
-1, // MeshPoint starts at 369
-1, // E1 starts at 370
-1, // MoveTo2f starts at 371
-1, // MoveTo2d starts at 372
-1, // MoveTo3f starts at 373
-1, // MoveTo3d starts at 374
-1, // E2 starts at 375
-1, // SP starts at 376
-1, // EP starts at 377
-1, // PP starts at 378
-1, // Rhombus starts at 379
-1, // Triangle starts at 380
-1, // MouseIns starts at 381
-1, // BlendedContour starts at 382
-1, // CurrentTexture starts at 383
-1, // TextureVCoeff starts at 384
-1, // Orient starts at 385
-1, // ScaleContour starts at 386
-1, // Elasticity starts at 387
-1, // DSurface starts at 388
-1, // G starts at 389
-1, // g starts at 390
-1, // MouseInsPos starts at 391
-1, // Surface3 starts at 392
-1, // ContourSides starts at 393
-1, // InitSurface starts at 394
-1, // SurfacePoint starts at 395
-1, // DrawSurface starts at 396
-1, // Propensity starts at 397
-1, // CircleFront starts at 398
-1, // CircleFront0 starts at 399
-1, // SetUPrecision starts at 400
-1, // SetVPrecision starts at 401
-1, // LineTo starts at 402
-1, // BSurface starts at 403
-1, // MoveRel2f starts at 404
-1, // MoveRel2d starts at 405
-1, // MoveRel3f starts at 406
-1, // MoveRel3d starts at 407
-1, // DBSurfaceS starts at 408
-1, // DBSurfaceM starts at 409
-1, // Camera starts at 410
-1, // EA20 starts at 411
-1, // Rotate starts at 412
-1, // RotateHLU starts at 413
-1, // RotateXYZ starts at 414
-1, // Terrain starts at 415
-1, // PovRayStart starts at 416
-1, // SetHead3f starts at 417
-1, // SetTropismDirection3f starts at 418
-1, // Orchard starts at 419
-1, // TreeReader starts at 420
-1, // Roots starts at 421
-1, // Internode starts at 422
-1, // Bud starts at 423
-1, // PruneCap starts at 424
-1, // Leaf starts at 425
-1, // Parab starts at 426
-1, // Box starts at 427

// Group 4

	// VGroup 0'
-1, // SB starts at 428
-1, // EB starts at 429
-1, // F starts at 430
-1, // f starts at 431
-1, // Left starts at 432
-1, // Right starts at 433
-1, // Down starts at 434
-1, // Up starts at 435
-1, // RollL starts at 436
-1, // RollR starts at 437
-1, // IncColor starts at 438
-1, // DecColor starts at 439
-1, // SetColor starts at 440
-1, // SetWidth starts at 441
-1, // Label starts at 442
-1, // TurnAround starts at 443
-1, // Cut starts at 444
-1, // GetPos starts at 445
-1, // GetHead starts at 446
-1, // GetLeft starts at 447
-1, // GetUp starts at 448
-1, // Circle starts at 449
-1, // MoveTo starts at 450
-1, // Sphere starts at 451
-1, // SetHead starts at 452
-1, // Sphere0 starts at 453
-1, // Circle0 starts at 454
-1, // Line2f starts at 455
-1, // Line2d starts at 456
-1, // Line3f starts at 457
-1, // Line3d starts at 458
-1, // LineTo2f starts at 459
-1, // LineTo2d starts at 460
-1, // LineTo3f starts at 461
-1, // LineTo3d starts at 462
-1, // LineRel2f starts at 463
-1, // LineRel2d starts at 464
-1, // LineRel3f starts at 465
-1, // LineRel3d starts at 466
-1, // Surface starts at 467
-1, // RollToVert starts at 468
-1, // SetElasticity starts at 469
-1, // IncElasticity starts at 470
-1, // DecElasticity starts at 471
-1, // CurrentContour starts at 472
-1, // StartGC starts at 473
-1, // PointGC starts at 474
-1, // EndGC starts at 475
-1, // MeshPoint starts at 476
-1, // E1 starts at 477
-1, // MoveTo2f starts at 478
-1, // MoveTo2d starts at 479
-1, // MoveTo3f starts at 480
-1, // MoveTo3d starts at 481
-1, // E2 starts at 482
-1, // SP starts at 483
-1, // EP starts at 484
-1, // PP starts at 485
-1, // Rhombus starts at 486
-1, // Triangle starts at 487
-1, // MouseIns starts at 488
-1, // BlendedContour starts at 489
-1, // CurrentTexture starts at 490
-1, // TextureVCoeff starts at 491
-1, // Orient starts at 492
-1, // ScaleContour starts at 493
-1, // Elasticity starts at 494
-1, // DSurface starts at 495
-1, // G starts at 496
-1, // g starts at 497
-1, // MouseInsPos starts at 498
-1, // Surface3 starts at 499
-1, // ContourSides starts at 500
-1, // InitSurface starts at 501
-1, // SurfacePoint starts at 502
-1, // DrawSurface starts at 503
-1, // Propensity starts at 504
-1, // CircleFront starts at 505
-1, // CircleFront0 starts at 506
-1, // SetUPrecision starts at 507
-1, // SetVPrecision starts at 508
-1, // LineTo starts at 509
-1, // BSurface starts at 510
-1, // MoveRel2f starts at 511
-1, // MoveRel2d starts at 512
-1, // MoveRel3f starts at 513
-1, // MoveRel3d starts at 514
-1, // DBSurfaceS starts at 515
-1, // DBSurfaceM starts at 516
-1, // Camera starts at 517
-1, // EA20 starts at 518
-1, // Rotate starts at 519
-1, // RotateHLU starts at 520
-1, // RotateXYZ starts at 521
-1, // Terrain starts at 522
-1, // PovRayStart starts at 523
-1, // SetHead3f starts at 524
-1, // SetTropismDirection3f starts at 525
-1, // Orchard starts at 526
-1, // TreeReader starts at 527
-1, // Roots starts at 528
-1, // Internode starts at 529
-1, // Bud starts at 530
-1, // PruneCap starts at 531
-1, // Leaf starts at 532
-1, // Parab starts at 533
-1, // Box starts at 534

// Group 5

	// VGroup 0'
-1, // SB starts at 535
-1, // EB starts at 536
-1, // F starts at 537
-1, // f starts at 538
-1, // Left starts at 539
-1, // Right starts at 540
-1, // Down starts at 541
-1, // Up starts at 542
-1, // RollL starts at 543
-1, // RollR starts at 544
-1, // IncColor starts at 545
-1, // DecColor starts at 546
-1, // SetColor starts at 547
-1, // SetWidth starts at 548
-1, // Label starts at 549
-1, // TurnAround starts at 550
-1, // Cut starts at 551
-1, // GetPos starts at 552
-1, // GetHead starts at 553
-1, // GetLeft starts at 554
-1, // GetUp starts at 555
-1, // Circle starts at 556
-1, // MoveTo starts at 557
-1, // Sphere starts at 558
-1, // SetHead starts at 559
-1, // Sphere0 starts at 560
-1, // Circle0 starts at 561
-1, // Line2f starts at 562
-1, // Line2d starts at 563
-1, // Line3f starts at 564
-1, // Line3d starts at 565
-1, // LineTo2f starts at 566
-1, // LineTo2d starts at 567
-1, // LineTo3f starts at 568
-1, // LineTo3d starts at 569
-1, // LineRel2f starts at 570
-1, // LineRel2d starts at 571
-1, // LineRel3f starts at 572
-1, // LineRel3d starts at 573
-1, // Surface starts at 574
-1, // RollToVert starts at 575
-1, // SetElasticity starts at 576
-1, // IncElasticity starts at 577
-1, // DecElasticity starts at 578
-1, // CurrentContour starts at 579
-1, // StartGC starts at 580
-1, // PointGC starts at 581
-1, // EndGC starts at 582
-1, // MeshPoint starts at 583
-1, // E1 starts at 584
-1, // MoveTo2f starts at 585
-1, // MoveTo2d starts at 586
-1, // MoveTo3f starts at 587
-1, // MoveTo3d starts at 588
-1, // E2 starts at 589
-1, // SP starts at 590
-1, // EP starts at 591
-1, // PP starts at 592
-1, // Rhombus starts at 593
-1, // Triangle starts at 594
-1, // MouseIns starts at 595
-1, // BlendedContour starts at 596
-1, // CurrentTexture starts at 597
-1, // TextureVCoeff starts at 598
-1, // Orient starts at 599
-1, // ScaleContour starts at 600
-1, // Elasticity starts at 601
-1, // DSurface starts at 602
-1, // G starts at 603
-1, // g starts at 604
-1, // MouseInsPos starts at 605
-1, // Surface3 starts at 606
-1, // ContourSides starts at 607
-1, // InitSurface starts at 608
-1, // SurfacePoint starts at 609
-1, // DrawSurface starts at 610
-1, // Propensity starts at 611
-1, // CircleFront starts at 612
-1, // CircleFront0 starts at 613
-1, // SetUPrecision starts at 614
-1, // SetVPrecision starts at 615
-1, // LineTo starts at 616
-1, // BSurface starts at 617
-1, // MoveRel2f starts at 618
-1, // MoveRel2d starts at 619
-1, // MoveRel3f starts at 620
-1, // MoveRel3d starts at 621
-1, // DBSurfaceS starts at 622
-1, // DBSurfaceM starts at 623
-1, // Camera starts at 624
-1, // EA20 starts at 625
-1, // Rotate starts at 626
-1, // RotateHLU starts at 627
-1, // RotateXYZ starts at 628
-1, // Terrain starts at 629
-1, // PovRayStart starts at 630
-1, // SetHead3f starts at 631
-1, // SetTropismDirection3f starts at 632
-1, // Orchard starts at 633
-1, // TreeReader starts at 634
-1, // Roots starts at 635
-1, // Internode starts at 636
-1, // Bud starts at 637
-1, // PruneCap starts at 638
-1, // Leaf starts at 639
-1, // Parab starts at 640
-1, // Box starts at 641

// Group 6

	// VGroup 0'
-1, // SB starts at 642
-1, // EB starts at 643
-1, // F starts at 644
-1, // f starts at 645
-1, // Left starts at 646
-1, // Right starts at 647
-1, // Down starts at 648
-1, // Up starts at 649
-1, // RollL starts at 650
-1, // RollR starts at 651
-1, // IncColor starts at 652
-1, // DecColor starts at 653
-1, // SetColor starts at 654
-1, // SetWidth starts at 655
-1, // Label starts at 656
-1, // TurnAround starts at 657
-1, // Cut starts at 658
-1, // GetPos starts at 659
-1, // GetHead starts at 660
-1, // GetLeft starts at 661
-1, // GetUp starts at 662
-1, // Circle starts at 663
-1, // MoveTo starts at 664
-1, // Sphere starts at 665
-1, // SetHead starts at 666
-1, // Sphere0 starts at 667
-1, // Circle0 starts at 668
-1, // Line2f starts at 669
-1, // Line2d starts at 670
-1, // Line3f starts at 671
-1, // Line3d starts at 672
-1, // LineTo2f starts at 673
-1, // LineTo2d starts at 674
-1, // LineTo3f starts at 675
-1, // LineTo3d starts at 676
-1, // LineRel2f starts at 677
-1, // LineRel2d starts at 678
-1, // LineRel3f starts at 679
-1, // LineRel3d starts at 680
-1, // Surface starts at 681
-1, // RollToVert starts at 682
-1, // SetElasticity starts at 683
-1, // IncElasticity starts at 684
-1, // DecElasticity starts at 685
-1, // CurrentContour starts at 686
-1, // StartGC starts at 687
-1, // PointGC starts at 688
-1, // EndGC starts at 689
-1, // MeshPoint starts at 690
-1, // E1 starts at 691
-1, // MoveTo2f starts at 692
-1, // MoveTo2d starts at 693
-1, // MoveTo3f starts at 694
-1, // MoveTo3d starts at 695
-1, // E2 starts at 696
-1, // SP starts at 697
-1, // EP starts at 698
-1, // PP starts at 699
-1, // Rhombus starts at 700
-1, // Triangle starts at 701
-1, // MouseIns starts at 702
-1, // BlendedContour starts at 703
-1, // CurrentTexture starts at 704
-1, // TextureVCoeff starts at 705
-1, // Orient starts at 706
-1, // ScaleContour starts at 707
-1, // Elasticity starts at 708
-1, // DSurface starts at 709
-1, // G starts at 710
-1, // g starts at 711
-1, // MouseInsPos starts at 712
-1, // Surface3 starts at 713
-1, // ContourSides starts at 714
-1, // InitSurface starts at 715
-1, // SurfacePoint starts at 716
-1, // DrawSurface starts at 717
-1, // Propensity starts at 718
-1, // CircleFront starts at 719
-1, // CircleFront0 starts at 720
-1, // SetUPrecision starts at 721
-1, // SetVPrecision starts at 722
-1, // LineTo starts at 723
-1, // BSurface starts at 724
-1, // MoveRel2f starts at 725
-1, // MoveRel2d starts at 726
-1, // MoveRel3f starts at 727
-1, // MoveRel3d starts at 728
-1, // DBSurfaceS starts at 729
-1, // DBSurfaceM starts at 730
-1, // Camera starts at 731
-1, // EA20 starts at 732
-1, // Rotate starts at 733
-1, // RotateHLU starts at 734
-1, // RotateXYZ starts at 735
-1, // Terrain starts at 736
-1, // PovRayStart starts at 737
-1, // SetHead3f starts at 738
-1, // SetTropismDirection3f starts at 739
-1, // Orchard starts at 740
-1, // TreeReader starts at 741
-1, // Roots starts at 742
-1, // Internode starts at 743
-1, // Bud starts at 744
-1, // PruneCap starts at 745
-1, // Leaf starts at 746
-1, // Parab starts at 747
-1, // Box starts at 748

// Group 7

	// VGroup 0'
-1, // SB starts at 749
-1, // EB starts at 750
-1, // F starts at 751
-1, // f starts at 752
-1, // Left starts at 753
-1, // Right starts at 754
-1, // Down starts at 755
-1, // Up starts at 756
-1, // RollL starts at 757
-1, // RollR starts at 758
-1, // IncColor starts at 759
-1, // DecColor starts at 760
-1, // SetColor starts at 761
-1, // SetWidth starts at 762
-1, // Label starts at 763
-1, // TurnAround starts at 764
-1, // Cut starts at 765
-1, // GetPos starts at 766
-1, // GetHead starts at 767
-1, // GetLeft starts at 768
-1, // GetUp starts at 769
-1, // Circle starts at 770
-1, // MoveTo starts at 771
-1, // Sphere starts at 772
-1, // SetHead starts at 773
-1, // Sphere0 starts at 774
-1, // Circle0 starts at 775
-1, // Line2f starts at 776
-1, // Line2d starts at 777
-1, // Line3f starts at 778
-1, // Line3d starts at 779
-1, // LineTo2f starts at 780
-1, // LineTo2d starts at 781
-1, // LineTo3f starts at 782
-1, // LineTo3d starts at 783
-1, // LineRel2f starts at 784
-1, // LineRel2d starts at 785
-1, // LineRel3f starts at 786
-1, // LineRel3d starts at 787
-1, // Surface starts at 788
-1, // RollToVert starts at 789
-1, // SetElasticity starts at 790
-1, // IncElasticity starts at 791
-1, // DecElasticity starts at 792
-1, // CurrentContour starts at 793
-1, // StartGC starts at 794
-1, // PointGC starts at 795
-1, // EndGC starts at 796
-1, // MeshPoint starts at 797
-1, // E1 starts at 798
-1, // MoveTo2f starts at 799
-1, // MoveTo2d starts at 800
-1, // MoveTo3f starts at 801
-1, // MoveTo3d starts at 802
-1, // E2 starts at 803
-1, // SP starts at 804
-1, // EP starts at 805
-1, // PP starts at 806
-1, // Rhombus starts at 807
-1, // Triangle starts at 808
-1, // MouseIns starts at 809
-1, // BlendedContour starts at 810
-1, // CurrentTexture starts at 811
-1, // TextureVCoeff starts at 812
-1, // Orient starts at 813
-1, // ScaleContour starts at 814
-1, // Elasticity starts at 815
-1, // DSurface starts at 816
-1, // G starts at 817
-1, // g starts at 818
-1, // MouseInsPos starts at 819
-1, // Surface3 starts at 820
-1, // ContourSides starts at 821
-1, // InitSurface starts at 822
-1, // SurfacePoint starts at 823
-1, // DrawSurface starts at 824
-1, // Propensity starts at 825
-1, // CircleFront starts at 826
-1, // CircleFront0 starts at 827
-1, // SetUPrecision starts at 828
-1, // SetVPrecision starts at 829
-1, // LineTo starts at 830
-1, // BSurface starts at 831
-1, // MoveRel2f starts at 832
-1, // MoveRel2d starts at 833
-1, // MoveRel3f starts at 834
-1, // MoveRel3d starts at 835
-1, // DBSurfaceS starts at 836
-1, // DBSurfaceM starts at 837
-1, // Camera starts at 838
-1, // EA20 starts at 839
-1, // Rotate starts at 840
-1, // RotateHLU starts at 841
-1, // RotateXYZ starts at 842
-1, // Terrain starts at 843
-1, // PovRayStart starts at 844
-1, // SetHead3f starts at 845
-1, // SetTropismDirection3f starts at 846
-1, // Orchard starts at 847
-1, // TreeReader starts at 848
-1, // Roots starts at 849
-1, // Internode starts at 850
-1, // Bud starts at 851
-1, // PruneCap starts at 852
-1, // Leaf starts at 853
-1, // Parab starts at 854
-1, // Box starts at 855
};

static int IProductionGroupsStart[] =
{
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 
16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 
32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 
48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 
64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 
80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 
96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 
112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 
128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 
144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 
160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 
176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 
192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 
208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 
224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 
240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 
256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 
272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 
288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 
304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 
320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 
336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 
352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 
368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 
384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 
400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 
416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 
432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 
448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 
464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 
480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 
496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 
512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 
528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 
544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 
560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 
576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 
592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 
608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 
624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 
640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 
656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 
672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 
688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 
704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 
720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 
736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 
752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 
768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 
784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 
800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 
816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 
832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 
848, 849, 850, 851, 852, 853, 854, 855, 
};
const __lc_ProductionPredecessor& GetModuleIProductionPredecessor(int iGroup, int iVGroup, __lc_ModuleIdType moduleId, int id)
{
	const __lc_ProductionPredecessor* array = Itables[iGroup];
	int index = ModuleIProductions[IProductionGroupsStart[iGroup * NumOfModules() * NumOfViews() + iVGroup * NumOfModules() + moduleId] + id];
	return array[index];
}
